{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/UpdateMod.js\";\nimport React, { Component } from 'react';\nimport { Form, FormGroup, Col, Row, Label, Input, FormText, Button } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nvar apiUrl = process.env.API_URL || 'http://localhost:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar NewMod =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewMod, _Component);\n\n  function NewMod(props) {\n    var _this;\n\n    _classCallCheck(this, NewMod);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewMod).call(this, props));\n    _this.saveChanges =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, html, application;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this$state = _this.state, html = _this$state.html, application = _this$state.application;\n              html = html.replace(/\"/g, '\\'\\'\\'');\n              html = html.replace(/\\\\/g, '----');\n              console.log(html);\n              _context.next = 7;\n              return strapi.request('POST', 'graphql', {\n                data: {\n                  query: \"mutation {\\n                        NewMods(input: {\\n                          where: {\\n                            id: \\\"\".concat(application._id, \"\\\"\\n                          },\\n                          data: {\\n                            howto: \\\"\").concat(html, \"\\\"\\n                          }\\n                        }) {\\n                          application {\\n                            howto\\n                          }\\n                        }\\n                      }\")\n                }\n              });\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 9]]);\n    }));\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this._uploadImageCallBack = function (file) {\n      // long story short, every time we upload an image, we\n      // need to save it to the state so we can get it's data\n      // later when we decide what to do with it.\n      // Make sure you have a uploadImages: [] as your default state\n      var uploadedImages = _this.state.uploadedImages;\n      console.log(uploadedImages);\n      var imageObject = {\n        file: file,\n        localSrc: URL.createObjectURL(file),\n        dburl: \"\".concat(apiUrl, \"/uploads/\").concat(file.name)\n      };\n      uploadedImages.push(imageObject);\n\n      _this.setState({\n        uploadedImages: uploadedImages\n      }); // We need to return a promise with the image src\n      // the img src we will use here will be what's needed\n      // to preview it in the browser. This will be different than what\n      // we will see in the index.md file we generate.\n\n\n      return new Promise(function (resolve, reject) {\n        resolve({\n          data: {\n            link: imageObject.localSrc\n          }\n        });\n      });\n    };\n\n    _this.handleTrackerID = function (event) {\n      _this.setState({\n        trackerid: event.target.value\n      });\n\n      console.log(_this.state);\n    };\n\n    _this.onModDetailsStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this.onTestStepsStateChange = function (editorState1) {\n      _this.setState({\n        editorState1: editorState1,\n        teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    var _html = '<p>Testing 1234 ðŸ˜€</p>';\n    var contentBlock = htmlToDraft(_html);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      _this.state = {\n        application: [],\n        submission: [],\n        loadingItems: true,\n        editorState: editorState,\n        uploadedImages: [],\n        moddetails: '',\n        teststeps: '',\n        trackerid: ''\n      };\n      _this._uploadImageCallBack = _this._uploadImageCallBack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n\n  _createClass(NewMod, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response, x, y, contentBlock, contentBlock1, contentState, contentState1, editorState, editorState1;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    mod (id: \\\"\".concat(this.props.match.params.modId, \"\\\") {\\n                        title\\n                        moddetails\\n                        trackerid\\n                        teststeps\\n                        application {\\n                            _id\\n                            name\\n                        }\\n                        status\\n                        submissions {\\n                            _id\\n                            file\\n                        }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context2.sent;\n                this.setState({\n                  application: response.data.mod.application._id,\n                  submission: response.data.mod.submissions[0].file,\n                  trackerid: response.data.mod.trackerid,\n                  moddetails: response.data.mod.moddetails,\n                  teststeps: response.data.mod.teststeps,\n                  title: response.data.title,\n                  loadingItems: false\n                });\n                x = this.state.moddetails.replace(/'''/g, '\"');\n                y = this.state.teststeps.replace(/'''/g, '\"');\n                contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n                contentBlock1 = htmlToDraft(y.replace(/----/g, '\\\\'));\n\n                if (contentBlock && contentBlock1) {\n                  contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n                  contentState1 = ContentState.createFromBlockArray(contentBlock1.contentBlocks);\n                  editorState = EditorState.createWithContent(contentState);\n                  editorState1 = EditorState.createWithContent(contentState1);\n                  this.setState({\n                    editorState: editorState,\n                    editorState1: editorState1\n                  });\n                }\n\n                _context2.next = 16;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 12]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          loadingItems = _this$state2.loadingItems,\n          application = _this$state2.application,\n          submission = _this$state2.submission,\n          editorState = _this$state2.editorState,\n          editorState1 = _this$state2.editorState1,\n          trackerid = _this$state2.trackerid,\n          moddetails = _this$state2.moddetails,\n          teststeps = _this$state2.teststeps;\n      console.log(this.state);\n      return React.createElement(Form, {\n        style: {\n          marginLeft: '10px',\n          marginRight: '10px',\n          marginTop: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"file\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Submission File #\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"file\",\n        id: \"file\",\n        value: submission,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"trackerid\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Tracker ID\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"trackerid\",\n        name: \"trackerid\",\n        id: \"trackerid\",\n        value: trackerid,\n        onChange: this.handleTrackerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleSelect\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        name: \"select\",\n        id: \"exampleSelect\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Testable\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"JIRA\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Audit\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Complete\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Revoked\")))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"moddetails\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Mod Details\"), React.createElement(Editor, {\n        editorState: editorState,\n        onEditorStateChange: this.onModDetailsStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"teststeps\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Test Steps\"), React.createElement(Editor, {\n        editorState: editorState1,\n        onEditorStateChange: this.onTestStepsStateChange,\n        toolbar: {\n          image: {\n            uploadCallback: this._uploadImageCallBack\n          },\n          inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        check: true,\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: 10,\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return NewMod;\n}(Component);\n\nexport default NewMod;","map":{"version":3,"sources":["/home/aely/gli/src/Components/UpdateMod.js"],"names":["React","Component","Form","FormGroup","Col","Row","Label","Input","FormText","Button","Strapi","Editor","EditorState","convertToRaw","ContentState","htmlToDraft","draftToHtml","apiUrl","process","env","API_URL","strapi","NewMod","props","saveChanges","state","html","application","replace","console","log","request","data","query","_id","onEditorStateChange","editorState","setState","getCurrentContent","_uploadImageCallBack","file","uploadedImages","imageObject","localSrc","URL","createObjectURL","dburl","name","push","Promise","resolve","reject","link","handleTrackerID","event","trackerid","target","value","onModDetailsStateChange","moddetails","onTestStepsStateChange","editorState1","teststeps","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","submission","loadingItems","bind","match","params","modId","response","mod","submissions","title","x","y","contentBlock1","contentState1","marginLeft","marginRight","marginTop","image","uploadCallback","inputAccept","size","offset"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, FormGroup, Col, Row, Label, Input, FormText, Button } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass NewMod extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 ðŸ˜€</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                application: [],\n                submission: [],\n                loadingItems: true,\n                editorState,\n                uploadedImages: [],\n                moddetails: '',\n                teststeps: '',\n                trackerid: ''\n            }\n            this._uploadImageCallBack = this._uploadImageCallBack.bind(this);\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    mod (id: \"${this.props.match.params.modId}\") {\n                        title\n                        moddetails\n                        trackerid\n                        teststeps\n                        application {\n                            _id\n                            name\n                        }\n                        status\n                        submissions {\n                            _id\n                            file\n                        }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            application: response.data.mod.application._id,\n            submission: response.data.mod.submissions[0].file,\n            trackerid: response.data.mod.trackerid,\n            moddetails: response.data.mod.moddetails,\n            teststeps: response.data.mod.teststeps,\n            title: response.data.title,\n            loadingItems: false\n        });\n        let x = this.state.moddetails.replace(/'''/g, '\"');\n        let y = this.state.teststeps.replace(/'''/g, '\"');\n        let contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n        let contentBlock1 = htmlToDraft(y.replace(/----/g, '\\\\'));\n        if (contentBlock && contentBlock1) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let contentState1 = ContentState.createFromBlockArray(contentBlock1.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            let editorState1 = EditorState.createWithContent(contentState1);\n            this.setState({\n                editorState,\n                editorState1\n            });\n        }\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    saveChanges =  async () => {\n        try {\n            let { html, application } = this.state;\n            html = html.replace(/\"/g, '\\'\\'\\'');\n            html = html.replace(/\\\\/g, '----')\n            console.log(html);\n            await strapi.request('POST', 'graphql', {\n                data: {\n                    query: `mutation {\n                        NewMods(input: {\n                          where: {\n                            id: \"${application._id}\"\n                          },\n                          data: {\n                            howto: \"${html}\"\n                          }\n                        }) {\n                          application {\n                            howto\n                          }\n                        }\n                      }`\n                }\n            });\n            }catch (err) {\n                console.log(err);\n            }\n        }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    _uploadImageCallBack = (file) => {\n       // long story short, every time we upload an image, we\n       // need to save it to the state so we can get it's data\n       // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        let { uploadedImages } = this.state;\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n          dburl: `${apiUrl}/uploads/${file.name}`\n        }\n\n        uploadedImages.push(imageObject);\n    \n        this.setState({uploadedImages: uploadedImages})\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n    handleTrackerID = (event) => {\n        this.setState({\n            trackerid: event.target.value\n        })\n        console.log(this.state);\n    }\n\n\n    onModDetailsStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    onTestStepsStateChange = (editorState1) => {\n        this.setState({\n            editorState1,\n            teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    render() {\n        let { loadingItems, application, submission, editorState, editorState1, trackerid, moddetails, teststeps } = this.state;\n        console.log(this.state);\n        return(\n            <Form style={{marginLeft: '10px', marginRight: '10px', marginTop: '20px'}}>\n                <FormGroup row>\n                    <Label for=\"file\" sm={2}>Submission File #</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name=\"file\" id=\"file\" value={submission} />\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"trackerid\" sm={2}>Tracker ID</Label>\n                    <Col sm={10}>\n                        <Input type=\"trackerid\" name=\"trackerid\" id=\"trackerid\" value={trackerid} onChange={this.handleTrackerID}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"exampleSelect\" sm={2}>Status</Label>\n                    <Col sm={10}>\n                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n                        <option>Testable</option>\n                        <option>JIRA</option>\n                        <option>Audit</option>\n                        <option>Complete</option>\n                        <option>Revoked</option>\n                        </Input>\n                    </Col>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"moddetails\" sm={2}>Mod Details</Label>\n                        <Editor \n                            editorState={editorState}\n                            onEditorStateChange={this.onModDetailsStateChange}\n                        />  \n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"teststeps\" sm={2}>Test Steps</Label>\n                        <Editor \n                            editorState={editorState1}\n                            onEditorStateChange={this.onTestStepsStateChange}\n                            toolbar={{\n                                image: { uploadCallback: this._uploadImageCallBack },\n                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                              }}\n                        />\n                </FormGroup>\n                <FormGroup check row>\n                    <Col sm={{ size: 10, offset: 2 }}>\n                        <Button>Submit</Button>\n                    </Col>\n                </FormGroup>\n            </Form>\n        );\n    }\n}\n\nexport default NewMod;"]},"metadata":{},"sourceType":"module"}