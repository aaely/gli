{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/Newmod.js\";\nimport React, { Component } from 'react';\nimport { Form, Input, Button, Label, FormGroup, FormText, Col, Row } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Redirect from 'react-router-dom';\nvar apiUrl = process.env.API_URL || 'http://nv-dt-534:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar Newmod =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Newmod, _Component);\n\n  function Newmod(props) {\n    var _this;\n\n    _classCallCheck(this, Newmod);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Newmod).call(this, props));\n\n    _this.handleTrackerIDChange = function (event) {\n      _this.setState({\n        trackerID: event.target.value\n      });\n    };\n\n    _this.handleStatusChange = function (event) {\n      _this.setState({\n        status: event.target.value\n      });\n    };\n\n    _this.handleRewriteChange = function (event) {\n      _this.setState({\n        rewrite: event.target.value\n      });\n    };\n\n    _this.handleTitleChange = function (event) {\n      _this.setState({\n        title: event.target.value\n      });\n    };\n\n    _this.handleModNumberChange = function (event) {\n      _this.setState({\n        modnumber: event.target.value\n      });\n    };\n\n    _this.handleVersionChange = function (event) {\n      _this.setState({\n        versionaffected: event.target.value\n      });\n    };\n\n    _this.handleVersionsChange = function (event) {\n      var ver = _this.state.versions.filter(function (prop) {\n        return prop.version.toLowerCase().includes(\"\".concat(event.target.value).toLowerCase());\n      });\n\n      console.log(ver);\n\n      _this.setState({\n        version: ver[0]._id\n      });\n    };\n\n    _this.handleSidenotesChange = function (event) {\n      _this.setState({\n        sidenotes: event.target.value\n      });\n    };\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this.onEditorStateChange1 = function (editorState1) {\n      _this.setState({\n        editorState1: editorState1,\n        teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this.saveMod =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, versionaffected, appId, moddetails, teststeps, trackerID, status, rewrite, title, version, modnumber, jira, sidenotes, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this$state = _this.state, versionaffected = _this$state.versionaffected, appId = _this$state.appId, moddetails = _this$state.moddetails, teststeps = _this$state.teststeps, trackerID = _this$state.trackerID, status = _this$state.status, rewrite = _this$state.rewrite, title = _this$state.title, version = _this$state.version, modnumber = _this$state.modnumber, jira = _this$state.jira, sidenotes = _this$state.sidenotes;\n              moddetails = moddetails.replace(/\"/g, '\\'\\'\\'');\n              moddetails = moddetails.replace(/\\\\/g, '----');\n              teststeps = teststeps.replace(/\"/g, '\\'\\'\\'');\n              teststeps = teststeps.replace(/\\\\/g, '----');\n              _context.next = 8;\n              return strapi.request('POST', 'graphql', {\n                data: {\n                  query: \"mutation {\\n                        createMods(input: {\\n                          data: {\\n                            title: \\\"\".concat(title, \"\\\",\\n                            trackerid: \\\"\").concat(trackerID, \"\\\",\\n                            status: \").concat(status, \",\\n                            jira: \").concat(jira, \",\\n                            modnumber: \").concat(modnumber, \",\\n                            teststeps: \\\"\").concat(teststeps, \"\\\",\\n                            moddetails: \\\"\").concat(moddetails, \"\\\",\\n                            rewrite: \\\"\").concat(rewrite, \"\\\",\\n                            application: \\\"\").concat(appId, \"\\\",\\n                            submissions: \\\"\").concat(_this.props.match.params.submissionId, \"\\\",\\n                            versions: \\\"\").concat(version, \"\\\",\\n                            sidenotes: \\\"\").concat(sidenotes, \"\\\",\\n                            versionaffected: \\\"\").concat(versionaffected, \"\\\"\\n                          }\\n                        }) {\\n                          mod {\\n                            _id\\n                            title\\n                            trackerid\\n                            status\\n                            jira\\n                            modnumber\\n                            teststeps\\n                            moddetails\\n                            rewrite\\n                            sidenotes\\n                          }\\n                        }\\n                      }\")\n                }\n              });\n\n            case 8:\n              response = _context.sent;\n              console.log(response);\n\n              _this.props.history.push(\"/submission/\".concat(_this.props.match.params.submissionId));\n\n              _context.next = 17;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n              _this.setState({\n                loadingItems: false\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 13]]);\n    }));\n\n    _this._uploadImageCallBack = function (file) {\n      // long story short, every time we upload an image, we\n      // need to save it to the state so we can get it's data\n      // later when we decide what to do with it.\n      // Make sure you have a uploadImages: [] as your default state\n      var uploadedImages = _this.state.uploadedImages;\n      console.log(uploadedImages);\n      var imageObject = {\n        file: file,\n        localSrc: URL.createObjectURL(file),\n        dburl: \"\".concat(apiUrl, \"/uploads/\").concat(file.name)\n      };\n      uploadedImages.push(imageObject);\n\n      _this.setState({\n        uploadedImages: uploadedImages\n      }); // We need to return a promise with the image src\n      // the img src we will use here will be what's needed\n      // to preview it in the browser. This will be different than what\n      // we will see in the index.md file we generate.\n\n\n      return new Promise(function (resolve, reject) {\n        resolve({\n          data: {\n            link: imageObject.localSrc\n          }\n        });\n      });\n    };\n\n    var _moddetails = '';\n    var contentBlock = htmlToDraft(_moddetails);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      var editorState1 = EditorState.createWithContent(contentState);\n      _this.state = {\n        loadingItems: true,\n        mods: [],\n        file: '',\n        appId: '',\n        editorState: editorState,\n        editorState1: editorState1,\n        uploadedImages: [],\n        moddetails: '<p>Insert mod details here</p>',\n        teststeps: '<p>Insert test steps here</p>',\n        trackerID: '',\n        status: 'Testable',\n        rewrite: '',\n        title: '',\n        versions: [],\n        modnumber: 0,\n        jira: null,\n        sidenotes: '',\n        versionaffected: '',\n        version: ''\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(Newmod, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    submission (id : \\\"\".concat(this.props.match.params.submissionId, \"\\\") {\\n                      file\\n                      application {\\n                          _id\\n                          name\\n                      }\\n                      versions {\\n                          _id\\n                          version\\n                      }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context2.sent;\n                this.setState({\n                  loadingItems: false,\n                  mods: response.data.submission.mods,\n                  file: response.data.submission.file,\n                  appId: response.data.submission.application._id,\n                  app: response.data.submission.application.name,\n                  versions: response.data.submission.versions,\n                  version: response.data.submission.versions[0]._id\n                });\n                _context2.next = 11;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          versionaffected = _this$state2.versionaffected,\n          loadingItems = _this$state2.loadingItems,\n          file = _this$state2.file,\n          app = _this$state2.app,\n          editorState = _this$state2.editorState,\n          editorState1 = _this$state2.editorState1,\n          versions = _this$state2.versions,\n          title = _this$state2.title,\n          trackerid = _this$state2.trackerid,\n          sidenotes = _this$state2.sidenotes,\n          rewrite = _this$state2.rewrite,\n          modnumber = _this$state2.modnumber;\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginTop: '20px',\n          marginBottom: '20px',\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, app), React.createElement(\"h3\", {\n        style: {\n          marginTop: '20px',\n          marginBottom: '20px',\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, file), !loadingItems && React.createElement(Form, {\n        style: {\n          marginTop: '20px',\n          marginLeft: '20px',\n          marginRight: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"fileNumber\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Submission #\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"file\",\n        id: \"file\",\n        value: \"\".concat(file),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"modTitle\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"Mod Title\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"title\",\n        id: \"title\",\n        onChange: this.handleTitleChange,\n        vlaue: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"versionaffected\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Version Affected\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"versionaffected\",\n        id: \"versionaffected\",\n        onChange: this.handleVersionChange.bind(this),\n        value: versionaffected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"trackerID\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, \"Tracker ID\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"trackerid\",\n        id: \"trackerid\",\n        placeholder: \"EBS-555\",\n        onChange: this.handleTrackerIDChange.bind(this),\n        value: trackerid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"modnumber\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"Mod Number\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"number\",\n        name: \"modnumber\",\n        id: \"modnumber\",\n        placeholder: \"1\",\n        onChange: this.handleModNumberChange.bind(this),\n        value: modnumber,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"statusSelect\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        name: \"status\",\n        id: \"status\",\n        onChange: this.handleStatusChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, \"Testable\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, \"Audit\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, \"JIRA\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Complete\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"Revoked\")))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"statusSelect\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, \"Version\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        name: \"versions\",\n        id: \"version\",\n        onChange: this.handleVersionsChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, versions.map(function (a) {\n        return React.createElement(\"option\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }, a.version);\n      })))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleText\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, \"Mod Wording\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        editorStyle: {\n          borderStyle: 'solid',\n          borderWidth: '2px',\n          borderColor: '#ddd'\n        },\n        editorState: editorState,\n        onEditorStateChange: this.onEditorStateChange,\n        toolbar: {\n          image: {\n            uploadCallback: this._uploadImageCallBack\n          },\n          inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleText\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"Test Steps\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        editorStyle: {\n          borderStyle: 'solid',\n          borderWidth: '2px',\n          borderColor: '#ddd'\n        },\n        editorState: editorState1,\n        onEditorStateChange: this.onEditorStateChange1,\n        toolbar: {\n          image: {\n            uploadCallback: this._uploadImageCallBack\n          },\n          inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, \"Mod Rewrite\"), React.createElement(Input, {\n        type: \"textarea\",\n        name: \"text\",\n        id: \"exampleText\",\n        onChange: this.handleRewriteChange,\n        value: rewrite,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, \"Side Notes\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"sidenotes\",\n        id: \"sidenotes\",\n        onChange: this.handleSidenotesChange,\n        value: sidenotes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        check: true,\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: 10,\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.saveMod,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, \"Submit\")))), loadingItems && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Newmod;\n}(Component);\n\nexport default Newmod;","map":{"version":3,"sources":["/home/aely/gli/src/Components/Newmod.js"],"names":["React","Component","Form","Input","Button","Label","FormGroup","FormText","Col","Row","Strapi","Loader","Editor","EditorState","convertToRaw","ContentState","htmlToDraft","draftToHtml","Redirect","apiUrl","process","env","API_URL","strapi","Newmod","props","handleTrackerIDChange","event","setState","trackerID","target","value","handleStatusChange","status","handleRewriteChange","rewrite","handleTitleChange","title","handleModNumberChange","modnumber","handleVersionChange","versionaffected","handleVersionsChange","ver","state","versions","filter","prop","version","toLowerCase","includes","console","log","_id","handleSidenotesChange","sidenotes","onEditorStateChange","editorState","moddetails","getCurrentContent","replace","onEditorStateChange1","editorState1","teststeps","saveMod","appId","jira","request","data","query","match","params","submissionId","response","history","push","loadingItems","_uploadImageCallBack","file","uploadedImages","imageObject","localSrc","URL","createObjectURL","dburl","name","Promise","resolve","reject","link","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","mods","submission","application","app","trackerid","marginTop","marginBottom","textAlign","marginLeft","marginRight","bind","map","a","borderStyle","borderWidth","borderColor","image","uploadCallback","inputAccept","size","offset"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,SAArC,EAAgDC,QAAhD,EAA0DC,GAA1D,EAA+DC,GAA/D,QAA0E,YAA1E;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,QAAwD,UAAxD;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,IAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAZ,IAAuB,uBAAtC;AACA,IAAMC,MAAM,GAAG,IAAIb,MAAJ,CAAWS,MAAX,CAAf;;IAEMK,M;;;;;AAEF,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gFAAMA,KAAN;;AADe,UAmEnBC,qBAnEmB,GAmEK,UAACC,KAAD,EAAW;AAC/B,YAAKC,QAAL,CAAc;AACVC,QAAAA,SAAS,EAAEF,KAAK,CAACG,MAAN,CAAaC;AADd,OAAd;AAGH,KAvEkB;;AAAA,UAyEnBC,kBAzEmB,GAyEE,UAACL,KAAD,EAAW;AAC5B,YAAKC,QAAL,CAAc;AACVK,QAAAA,MAAM,EAAEN,KAAK,CAACG,MAAN,CAAaC;AADX,OAAd;AAGH,KA7EkB;;AAAA,UA+EnBG,mBA/EmB,GA+EG,UAACP,KAAD,EAAW;AAC7B,YAAKC,QAAL,CAAc;AACVO,QAAAA,OAAO,EAAER,KAAK,CAACG,MAAN,CAAaC;AADZ,OAAd;AAGH,KAnFkB;;AAAA,UAqFnBK,iBArFmB,GAqFC,UAACT,KAAD,EAAW;AAC3B,YAAKC,QAAL,CAAc;AACVS,QAAAA,KAAK,EAAEV,KAAK,CAACG,MAAN,CAAaC;AADV,OAAd;AAGH,KAzFkB;;AAAA,UA2FnBO,qBA3FmB,GA2FK,UAACX,KAAD,EAAW;AAC/B,YAAKC,QAAL,CAAc;AACVW,QAAAA,SAAS,EAAEZ,KAAK,CAACG,MAAN,CAAaC;AADd,OAAd;AAGH,KA/FkB;;AAAA,UAiGnBS,mBAjGmB,GAiGG,UAACb,KAAD,EAAW;AAC7B,YAAKC,QAAL,CAAc;AACVa,QAAAA,eAAe,EAAEd,KAAK,CAACG,MAAN,CAAaC;AADpB,OAAd;AAGH,KArGkB;;AAAA,UAuGnBW,oBAvGmB,GAuGI,UAACf,KAAD,EAAW;AAC9B,UAAIgB,GAAG,GAAG,MAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA2B,UAAAC,IAAI,EAAI;AACzC,eAAOA,IAAI,CAACC,OAAL,CAAaC,WAAb,GAA2BC,QAA3B,CAAoC,UAAGvB,KAAK,CAACG,MAAN,CAAaC,KAAhB,EAAwBkB,WAAxB,EAApC,CAAP;AACH,OAFS,CAAV;;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;;AACA,YAAKf,QAAL,CAAc;AACVoB,QAAAA,OAAO,EAAEL,GAAG,CAAC,CAAD,CAAH,CAAOU;AADN,OAAd;AAGH,KA/GkB;;AAAA,UAiHnBC,qBAjHmB,GAiHK,UAAC3B,KAAD,EAAW;AAC/B,YAAKC,QAAL,CAAc;AACV2B,QAAAA,SAAS,EAAE5B,KAAK,CAACG,MAAN,CAAaC;AADd,OAAd;AAGH,KArHkB;;AAAA,UAuHnByB,mBAvHmB,GAuHG,UAACC,WAAD,EAAiB;AACnC,YAAK7B,QAAL,CAAc;AACV6B,QAAAA,WAAW,EAAXA,WADU;AAEVC,QAAAA,UAAU,EAAEzC,WAAW,CAACH,YAAY,CAAC2C,WAAW,CAACE,iBAAZ,EAAD,CAAb,CAAX,CAA2DC,OAA3D,CAAmE,OAAnE,EAA4E,EAA5E;AAFF,OAAd;AAIH,KA5HkB;;AAAA,UA8HnBC,oBA9HmB,GA8HI,UAACC,YAAD,EAAkB;AACrC,YAAKlC,QAAL,CAAc;AACVkC,QAAAA,YAAY,EAAZA,YADU;AAEVC,QAAAA,SAAS,EAAE9C,WAAW,CAACH,YAAY,CAACgD,YAAY,CAACH,iBAAb,EAAD,CAAb,CAAX,CAA4DC,OAA5D,CAAoE,OAApE,EAA6E,EAA7E;AAFD,OAAd;AAIH,KAnIkB;;AAAA,UAqInBI,OArImB;AAAA;AAAA;AAAA;AAAA,6BAqIT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAE8H,MAAKpB,KAFnI,EAEIH,eAFJ,eAEIA,eAFJ,EAEqBwB,KAFrB,eAEqBA,KAFrB,EAE4BP,UAF5B,eAE4BA,UAF5B,EAEwCK,SAFxC,eAEwCA,SAFxC,EAEmDlC,SAFnD,eAEmDA,SAFnD,EAE8DI,MAF9D,eAE8DA,MAF9D,EAEsEE,OAFtE,eAEsEA,OAFtE,EAE+EE,KAF/E,eAE+EA,KAF/E,EAEsFW,OAFtF,eAEsFA,OAFtF,EAE+FT,SAF/F,eAE+FA,SAF/F,EAE0G2B,IAF1G,eAE0GA,IAF1G,EAEgHX,SAFhH,eAEgHA,SAFhH;AAIFG,cAAAA,UAAU,GAAGA,UAAU,CAACE,OAAX,CAAmB,IAAnB,EAAyB,QAAzB,CAAb;AACAF,cAAAA,UAAU,GAAGA,UAAU,CAACE,OAAX,CAAmB,KAAnB,EAA0B,MAA1B,CAAb;AACAG,cAAAA,SAAS,GAAGA,SAAS,CAACH,OAAV,CAAkB,IAAlB,EAAwB,QAAxB,CAAZ;AACAG,cAAAA,SAAS,GAAGA,SAAS,CAACH,OAAV,CAAkB,KAAlB,EAAyB,MAAzB,CAAZ;AAPE;AAAA,qBAQmBrC,MAAM,CAAC4C,OAAP,CAAe,MAAf,EAAuB,SAAvB,EAAkC;AACnDC,gBAAAA,IAAI,EAAE;AACFC,kBAAAA,KAAK,6IAGahC,KAHb,2DAIiBR,SAJjB,sDAKaI,MALb,kDAMWiC,IANX,uDAOgB3B,SAPhB,yDAQiBwB,SARjB,4DASkBL,UATlB,yDAUevB,OAVf,6DAWmB8B,KAXnB,6DAYmB,MAAKxC,KAAL,CAAW6C,KAAX,CAAiBC,MAAjB,CAAwBC,YAZ3C,0DAagBxB,OAbhB,2DAciBO,SAdjB,iEAeuBd,eAfvB;AADH;AAD6C,eAAlC,CARnB;;AAAA;AAQEgC,cAAAA,QARF;AA4CFtB,cAAAA,OAAO,CAACC,GAAR,CAAYqB,QAAZ;;AACA,oBAAKhD,KAAL,CAAWiD,OAAX,CAAmBC,IAAnB,uBAAuC,MAAKlD,KAAL,CAAW6C,KAAX,CAAiBC,MAAjB,CAAwBC,YAA/D;;AA7CE;AAAA;;AAAA;AAAA;AAAA;AA+CFrB,cAAAA,OAAO,CAACC,GAAR;;AACA,oBAAKxB,QAAL,CAAc;AAAEgD,gBAAAA,YAAY,EAAE;AAAhB,eAAd;;AAhDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArIS;;AAAA,UAyLnBC,oBAzLmB,GAyLI,UAACC,IAAD,EAAU;AAC7B;AACA;AACA;AAED;AAL8B,UAMvBC,cANuB,GAMJ,MAAKnC,KAND,CAMvBmC,cANuB;AAO7B5B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,cAAZ;AACA,UAAMC,WAAW,GAAG;AAClBF,QAAAA,IAAI,EAAEA,IADY;AAElBG,QAAAA,QAAQ,EAAEC,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAFQ;AAGlBM,QAAAA,KAAK,YAAKjE,MAAL,sBAAuB2D,IAAI,CAACO,IAA5B;AAHa,OAApB;AAMAN,MAAAA,cAAc,CAACJ,IAAf,CAAoBK,WAApB;;AAEA,YAAKpD,QAAL,CAAc;AAACmD,QAAAA,cAAc,EAAEA;AAAjB,OAAd,EAhB6B,CAkB7B;AACA;AACA;AACA;;;AACA,aAAO,IAAIO,OAAJ,CACL,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACnBD,QAAAA,OAAO,CAAC;AAAEnB,UAAAA,IAAI,EAAE;AAAEqB,YAAAA,IAAI,EAAET,WAAW,CAACC;AAApB;AAAR,SAAD,CAAP;AACD,OAHI,CAAP;AAKH,KApNkB;;AAEf,QAAIvB,WAAU,GAAG,EAAjB;AACA,QAAIgC,YAAY,GAAG1E,WAAW,CAAC0C,WAAD,CAA9B;;AACA,QAAIgC,YAAJ,EAAkB;AACd,UAAIC,YAAY,GAAG5E,YAAY,CAAC6E,oBAAb,CAAkCF,YAAY,CAACG,aAA/C,CAAnB;AACA,UAAIpC,WAAW,GAAG5C,WAAW,CAACiF,iBAAZ,CAA8BH,YAA9B,CAAlB;AACA,UAAI7B,YAAY,GAAGjD,WAAW,CAACiF,iBAAZ,CAA8BH,YAA9B,CAAnB;AACA,YAAK/C,KAAL,GAAa;AACTgC,QAAAA,YAAY,EAAE,IADL;AAETmB,QAAAA,IAAI,EAAE,EAFG;AAGTjB,QAAAA,IAAI,EAAE,EAHG;AAITb,QAAAA,KAAK,EAAE,EAJE;AAKTR,QAAAA,WAAW,EAAXA,WALS;AAMTK,QAAAA,YAAY,EAAZA,YANS;AAOTiB,QAAAA,cAAc,EAAE,EAPP;AAQTrB,QAAAA,UAAU,EAAE,gCARH;AASTK,QAAAA,SAAS,EAAE,+BATF;AAUTlC,QAAAA,SAAS,EAAE,EAVF;AAWTI,QAAAA,MAAM,EAAE,UAXC;AAYTE,QAAAA,OAAO,EAAE,EAZA;AAaTE,QAAAA,KAAK,EAAE,EAbE;AAcTQ,QAAAA,QAAQ,EAAE,EAdD;AAeTN,QAAAA,SAAS,EAAE,CAfF;AAgBT2B,QAAAA,IAAI,EAAE,IAhBG;AAiBTX,QAAAA,SAAS,EAAE,EAjBF;AAkBTd,QAAAA,eAAe,EAAE,EAlBR;AAmBTO,QAAAA,OAAO,EAAE;AAnBA,OAAb;AAqBH;;AA7Bc;AA8BlB;;;;;;;;;;;;;;;uBAI8BzB,MAAM,CAAC4C,OAAP,CAAe,MAAf,EAAuB,UAAvB,EAAmC;AAC1DC,kBAAAA,IAAI,EAAE;AACFC,oBAAAA,KAAK,4DACmB,KAAK5C,KAAL,CAAW6C,KAAX,CAAiBC,MAAjB,CAAwBC,YAD3C;AADH;AADoD,iBAAnC,C;;;AAAjBC,gBAAAA,Q;AAkBV,qBAAK7C,QAAL,CAAc;AACVgD,kBAAAA,YAAY,EAAE,KADJ;AAEVmB,kBAAAA,IAAI,EAAEtB,QAAQ,CAACL,IAAT,CAAc4B,UAAd,CAAyBD,IAFrB;AAGVjB,kBAAAA,IAAI,EAAEL,QAAQ,CAACL,IAAT,CAAc4B,UAAd,CAAyBlB,IAHrB;AAIVb,kBAAAA,KAAK,EAAEQ,QAAQ,CAACL,IAAT,CAAc4B,UAAd,CAAyBC,WAAzB,CAAqC5C,GAJlC;AAKV6C,kBAAAA,GAAG,EAAEzB,QAAQ,CAACL,IAAT,CAAc4B,UAAd,CAAyBC,WAAzB,CAAqCZ,IALhC;AAMVxC,kBAAAA,QAAQ,EAAE4B,QAAQ,CAACL,IAAT,CAAc4B,UAAd,CAAyBnD,QANzB;AAOVG,kBAAAA,OAAO,EAAEyB,QAAQ,CAACL,IAAT,CAAc4B,UAAd,CAAyBnD,QAAzB,CAAkC,CAAlC,EAAqCQ;AAPpC,iBAAd;;;;;;;AAUIF,gBAAAA,OAAO,CAACC,GAAR;AACA,qBAAKxB,QAAL,CAAc;AAAEgD,kBAAAA,YAAY,EAAE;AAAhB,iBAAd;;;;;;;;;;;;;;;;6BAuJC;AAAA,yBACoI,KAAKhC,KADzI;AAAA,UACCH,eADD,gBACCA,eADD;AAAA,UACkBmC,YADlB,gBACkBA,YADlB;AAAA,UACgCE,IADhC,gBACgCA,IADhC;AAAA,UACsCoB,GADtC,gBACsCA,GADtC;AAAA,UAC2CzC,WAD3C,gBAC2CA,WAD3C;AAAA,UACwDK,YADxD,gBACwDA,YADxD;AAAA,UACsEjB,QADtE,gBACsEA,QADtE;AAAA,UACgFR,KADhF,gBACgFA,KADhF;AAAA,UACuF8D,SADvF,gBACuFA,SADvF;AAAA,UACkG5C,SADlG,gBACkGA,SADlG;AAAA,UAC6GpB,OAD7G,gBAC6GA,OAD7G;AAAA,UACsHI,SADtH,gBACsHA,SADtH;AAELY,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAjB;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAE;AAACwD,UAAAA,SAAS,EAAE,MAAZ;AAAoBC,UAAAA,YAAY,EAAE,MAAlC;AAA0CC,UAAAA,SAAS,EAAE;AAArD,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4EJ,GAA5E,CADJ,EAEI;AAAI,QAAA,KAAK,EAAE;AAACE,UAAAA,SAAS,EAAE,MAAZ;AAAoBC,UAAAA,YAAY,EAAE,MAAlC;AAA0CC,UAAAA,SAAS,EAAE;AAArD,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4ExB,IAA5E,CAFJ,EAGK,CAACF,YAAD,IACD,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACwB,UAAAA,SAAS,EAAE,MAAZ;AAAoBG,UAAAA,UAAU,EAAE,MAAhC;AAAwCC,UAAAA,WAAW,EAAE;AAArD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,YAAX;AAAwB,QAAA,EAAE,EAAE,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,EAAE,EAAC,MAAlC;AAAyC,QAAA,KAAK,YAAK1B,IAAL,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFJ,CADJ,EAOI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,UAAX;AAAsB,QAAA,EAAE,EAAE,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,EAAE,EAAC,OAAnC;AAA2C,QAAA,QAAQ,EAAE,KAAK1C,iBAA1D;AAA6E,QAAA,KAAK,EAAEC,KAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFJ,CAPJ,EAaI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,iBAAX;AAA6B,QAAA,EAAE,EAAE,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,iBAAxB;AAA0C,QAAA,EAAE,EAAC,iBAA7C;AAA+D,QAAA,QAAQ,EAAE,KAAKG,mBAAL,CAAyBiE,IAAzB,CAA8B,IAA9B,CAAzE;AAA8G,QAAA,KAAK,EAAEhE,eAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFJ,CAbJ,EAmBI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,WAAX;AAAuB,QAAA,EAAE,EAAE,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,WAAxB;AAAoC,QAAA,EAAE,EAAC,WAAvC;AAAmD,QAAA,WAAW,EAAC,SAA/D;AAAyE,QAAA,QAAQ,EAAE,KAAKf,qBAAL,CAA2B+E,IAA3B,CAAgC,IAAhC,CAAnF;AAA0H,QAAA,KAAK,EAAEN,SAAjI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFJ,CAnBJ,EAyBI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,WAAX;AAAuB,QAAA,EAAE,EAAE,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,WAA1B;AAAsC,QAAA,EAAE,EAAC,WAAzC;AAAqD,QAAA,WAAW,EAAC,GAAjE;AAAqE,QAAA,QAAQ,EAAE,KAAK7D,qBAAL,CAA2BmE,IAA3B,CAAgC,IAAhC,CAA/E;AAAsH,QAAA,KAAK,EAAElE,SAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFJ,CAzBJ,EA+BI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,cAAX;AAA0B,QAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,QAA1B;AAAmC,QAAA,EAAE,EAAC,QAAtC;AAA+C,QAAA,QAAQ,EAAE,KAAKP,kBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALJ,CADA,CAFJ,CA/BJ,EA2CI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,cAAX;AAA0B,QAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,UAA1B;AAAqC,QAAA,EAAE,EAAC,SAAxC;AAAkD,QAAA,QAAQ,EAAE,KAAKU,oBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACIG,QAAQ,CAAC6D,GAAT,CAAa,UAAAC,CAAC,EAAI;AACf,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASA,CAAC,CAAC3D,OAAX,CADJ;AAGH,OAJA,CADJ,CADA,CAFJ,CA3CJ,EAuDI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,aAAX;AAAyB,QAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AACA,QAAA,WAAW,EAAE;AAAC4D,UAAAA,WAAW,EAAE,OAAd;AAAuBC,UAAAA,WAAW,EAAE,KAApC;AAA2CC,UAAAA,WAAW,EAAE;AAAxD,SADb;AAEA,QAAA,WAAW,EAAErD,WAFb;AAGA,QAAA,mBAAmB,EAAE,KAAKD,mBAH1B;AAIA,QAAA,OAAO,EAAE;AACLuD,UAAAA,KAAK,EAAE;AAAEC,YAAAA,cAAc,EAAE,KAAKnC;AAAvB,WADF;AAELoC,UAAAA,WAAW,EAAE;AAFR,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFJ,CAvDJ,EAqEI,oBAAC,SAAD;AAAW,QAAA,GAAG,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,aAAX;AAAyB,QAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AACA,QAAA,WAAW,EAAE;AAACL,UAAAA,WAAW,EAAE,OAAd;AAAuBC,UAAAA,WAAW,EAAE,KAApC;AAA2CC,UAAAA,WAAW,EAAE;AAAxD,SADb;AAEA,QAAA,WAAW,EAAEhD,YAFb;AAGA,QAAA,mBAAmB,EAAE,KAAKD,oBAH1B;AAIA,QAAA,OAAO,EAAE;AACLkD,UAAAA,KAAK,EAAE;AAAEC,YAAAA,cAAc,EAAE,KAAKnC;AAAvB,WADF;AAELoC,UAAAA,WAAW,EAAE;AAFR,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAFJ,CArEJ,EAmFI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAC,MAA5B;AAAmC,QAAA,EAAE,EAAC,aAAtC;AAAoD,QAAA,QAAQ,EAAE,KAAK/E,mBAAnE;AAAwF,QAAA,KAAK,EAAEC,OAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAnFJ,EAuFI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,WAAxB;AAAoC,QAAA,EAAE,EAAC,WAAvC;AAAmD,QAAA,QAAQ,EAAE,KAAKmB,qBAAlE;AAAyF,QAAA,KAAK,EAAEC,SAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAvFJ,EA2FI,oBAAC,SAAD;AAAW,QAAA,KAAK,MAAhB;AAAiB,QAAA,GAAG,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAE2D,UAAAA,IAAI,EAAE,EAAR;AAAYC,UAAAA,MAAM,EAAE;AAApB,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKnD,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,CADJ,CA3FJ,CAJJ,EAqGKY,YAAY,IAAI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArGrB,CADJ;AAyGH;;;;EApUgB3E,S;;AAuUrB,eAAeuB,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Input, Button, Label, FormGroup, FormText, Col, Row } from 'reactstrap';\r\nimport Strapi from 'strapi-sdk-javascript/build/main';\r\nimport Loader from './Loader';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport Redirect from 'react-router-dom';\r\nconst apiUrl = process.env.API_URL || 'http://nv-dt-534:1337';\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass Newmod extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let moddetails = '';\r\n        let contentBlock = htmlToDraft(moddetails);\r\n        if (contentBlock) {\r\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n            let editorState = EditorState.createWithContent(contentState);\r\n            let editorState1 = EditorState.createWithContent(contentState);\r\n            this.state = {\r\n                loadingItems: true,\r\n                mods: [],\r\n                file: '',\r\n                appId: '',\r\n                editorState,\r\n                editorState1,\r\n                uploadedImages: [],\r\n                moddetails: '<p>Insert mod details here</p>',\r\n                teststeps: '<p>Insert test steps here</p>',\r\n                trackerID: '',\r\n                status: 'Testable',\r\n                rewrite: '',\r\n                title: '',\r\n                versions: [],\r\n                modnumber: 0,\r\n                jira: null,\r\n                sidenotes: '',\r\n                versionaffected: '',\r\n                version: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const response = await strapi.request('POST', '/graphql', {\r\n            data: {\r\n                query: `query {\r\n                    submission (id : \"${this.props.match.params.submissionId}\") {\r\n                      file\r\n                      application {\r\n                          _id\r\n                          name\r\n                      }\r\n                      versions {\r\n                          _id\r\n                          version\r\n                      }\r\n                  }\r\n                }`\r\n            }\r\n        }\r\n        );\r\n        this.setState({\r\n            loadingItems: false,\r\n            mods: response.data.submission.mods,\r\n            file: response.data.submission.file,\r\n            appId: response.data.submission.application._id,\r\n            app: response.data.submission.application.name,\r\n            versions: response.data.submission.versions,\r\n            version: response.data.submission.versions[0]._id\r\n        });\r\n        }catch (err) {\r\n            console.log(err);\r\n            this.setState({ loadingItems: false });\r\n        }\r\n    }\r\n\r\n    handleTrackerIDChange = (event) => {\r\n        this.setState({\r\n            trackerID: event.target.value\r\n        })\r\n    }\r\n\r\n    handleStatusChange = (event) => {\r\n        this.setState({\r\n            status: event.target.value\r\n        })\r\n    }\r\n\r\n    handleRewriteChange = (event) => {\r\n        this.setState({\r\n            rewrite: event.target.value\r\n        })\r\n    }\r\n\r\n    handleTitleChange = (event) => {\r\n        this.setState({\r\n            title: event.target.value\r\n        })\r\n    }\r\n\r\n    handleModNumberChange = (event) => {\r\n        this.setState({\r\n            modnumber: event.target.value\r\n        })\r\n    }\r\n\r\n    handleVersionChange = (event) => {\r\n        this.setState({\r\n            versionaffected: event.target.value\r\n        })\r\n    }\r\n\r\n    handleVersionsChange = (event) => {\r\n        let ver = this.state.versions.filter(prop => {\r\n            return prop.version.toLowerCase().includes(`${event.target.value}`.toLowerCase())\r\n        });\r\n        console.log(ver);\r\n        this.setState({\r\n            version: ver[0]._id\r\n        })\r\n    }\r\n\r\n    handleSidenotesChange = (event) => {\r\n        this.setState({\r\n            sidenotes: event.target.value\r\n        })\r\n    }\r\n\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({\r\n            editorState,\r\n            moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\r\n        });\r\n    }\r\n\r\n    onEditorStateChange1 = (editorState1) => {\r\n        this.setState({\r\n            editorState1,\r\n            teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\r\n        });\r\n    }\r\n\r\n    saveMod = async () => {\r\n        try {\r\n            let { versionaffected, appId, moddetails, teststeps, trackerID, status, rewrite, title, version, modnumber, jira, sidenotes } = this.state;\r\n            \r\n            moddetails = moddetails.replace(/\"/g, '\\'\\'\\'');\r\n            moddetails = moddetails.replace(/\\\\/g, '----');\r\n            teststeps = teststeps.replace(/\"/g, '\\'\\'\\'');\r\n            teststeps = teststeps.replace(/\\\\/g, '----');\r\n            let response = await strapi.request('POST', 'graphql', {\r\n                data: {\r\n                    query: `mutation {\r\n                        createMods(input: {\r\n                          data: {\r\n                            title: \"${title}\",\r\n                            trackerid: \"${trackerID}\",\r\n                            status: ${status},\r\n                            jira: ${jira},\r\n                            modnumber: ${modnumber},\r\n                            teststeps: \"${teststeps}\",\r\n                            moddetails: \"${moddetails}\",\r\n                            rewrite: \"${rewrite}\",\r\n                            application: \"${appId}\",\r\n                            submissions: \"${this.props.match.params.submissionId}\",\r\n                            versions: \"${version}\",\r\n                            sidenotes: \"${sidenotes}\",\r\n                            versionaffected: \"${versionaffected}\"\r\n                          }\r\n                        }) {\r\n                          mod {\r\n                            _id\r\n                            title\r\n                            trackerid\r\n                            status\r\n                            jira\r\n                            modnumber\r\n                            teststeps\r\n                            moddetails\r\n                            rewrite\r\n                            sidenotes\r\n                          }\r\n                        }\r\n                      }`\r\n                }\r\n            });\r\n            console.log(response);\r\n            this.props.history.push(`/submission/${this.props.match.params.submissionId}`);\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({ loadingItems: false });\r\n        }\r\n    }\r\n\r\n    _uploadImageCallBack = (file) => {\r\n        // long story short, every time we upload an image, we\r\n        // need to save it to the state so we can get it's data\r\n        // later when we decide what to do with it.\r\n    \r\n       // Make sure you have a uploadImages: [] as your default state\r\n        let { uploadedImages } = this.state;\r\n        console.log(uploadedImages);\r\n        const imageObject = {\r\n          file: file,\r\n          localSrc: URL.createObjectURL(file),\r\n          dburl: `${apiUrl}/uploads/${file.name}`\r\n        }\r\n\r\n        uploadedImages.push(imageObject);\r\n    \r\n        this.setState({uploadedImages: uploadedImages})\r\n    \r\n        // We need to return a promise with the image src\r\n        // the img src we will use here will be what's needed\r\n        // to preview it in the browser. This will be different than what\r\n        // we will see in the index.md file we generate.\r\n        return new Promise(\r\n          (resolve, reject) => {\r\n            resolve({ data: { link: imageObject.localSrc } });\r\n          }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let { versionaffected, loadingItems, file, app, editorState, editorState1, versions, title, trackerid, sidenotes, rewrite, modnumber } = this.state;\r\n        console.log(this.state);\r\n        return(\r\n            <div>\r\n                <h3 style={{marginTop: '20px', marginBottom: '20px', textAlign: 'center'}}>{app}</h3>\r\n                <h3 style={{marginTop: '20px', marginBottom: '20px', textAlign: 'center'}}>{file}</h3>\r\n                {!loadingItems &&\r\n                <Form style={{marginTop: '20px', marginLeft: '20px', marginRight: '20px'}}>\r\n                    <FormGroup row>\r\n                        <Label for=\"fileNumber\" sm={2}>Submission #</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"text\" name=\"file\" id=\"file\" value={`${file}`} />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"modTitle\" sm={2}>Mod Title</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"text\" name=\"title\" id=\"title\" onChange={this.handleTitleChange} vlaue={title} />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"versionaffected\" sm={2}>Version Affected</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"text\" name=\"versionaffected\" id=\"versionaffected\" onChange={this.handleVersionChange.bind(this)} value={versionaffected}/>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"trackerID\" sm={2}>Tracker ID</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"text\" name=\"trackerid\" id=\"trackerid\" placeholder=\"EBS-555\" onChange={this.handleTrackerIDChange.bind(this)} value={trackerid} />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"modnumber\" sm={2}>Mod Number</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"number\" name=\"modnumber\" id=\"modnumber\" placeholder=\"1\" onChange={this.handleModNumberChange.bind(this)} value={modnumber} />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"statusSelect\" sm={2}>Status</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"select\" name=\"status\" id=\"status\" onChange={this.handleStatusChange}>\r\n                            <option>Testable</option>\r\n                            <option>Audit</option>\r\n                            <option>JIRA</option>\r\n                            <option>Complete</option>\r\n                            <option>Revoked</option>\r\n                        </Input>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"statusSelect\" sm={2}>Version</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"select\" name=\"versions\" id=\"version\" onChange={this.handleVersionsChange}>\r\n                           {versions.map(a => {\r\n                               return(\r\n                                   <option>{a.version}</option>\r\n                               )\r\n                           })} \r\n                        </Input>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"exampleText\" sm={2}>Mod Wording</Label>\r\n                        <Col sm={10}>\r\n                        <Editor \r\n                        editorStyle={{borderStyle: 'solid', borderWidth: '2px', borderColor: '#ddd'}}\r\n                        editorState={editorState}\r\n                        onEditorStateChange={this.onEditorStateChange}\r\n                        toolbar={{\r\n                            image: { uploadCallback: this._uploadImageCallBack },\r\n                            inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\r\n                            }}\r\n                        />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"exampleText\" sm={2}>Test Steps</Label>\r\n                        <Col sm={10}>\r\n                        <Editor\r\n                        editorStyle={{borderStyle: 'solid', borderWidth: '2px', borderColor: '#ddd'}}\r\n                        editorState={editorState1}\r\n                        onEditorStateChange={this.onEditorStateChange1}\r\n                        toolbar={{\r\n                            image: { uploadCallback: this._uploadImageCallBack },\r\n                            inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\r\n                            }}\r\n                        />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"exampleText\">Mod Rewrite</Label>\r\n                        <Input type=\"textarea\" name=\"text\" id=\"exampleText\" onChange={this.handleRewriteChange} value={rewrite} />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"exampleText\">Side Notes</Label>\r\n                        <Input type=\"text\" name=\"sidenotes\" id=\"sidenotes\" onChange={this.handleSidenotesChange} value={sidenotes} />\r\n                    </FormGroup>\r\n                    <FormGroup check row>\r\n                        <Col sm={{ size: 10, offset: 2 }}>\r\n                        <Button onClick={this.saveMod}>Submit</Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>}\r\n                {loadingItems && <Loader />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Newmod;"]},"metadata":{},"sourceType":"module"}