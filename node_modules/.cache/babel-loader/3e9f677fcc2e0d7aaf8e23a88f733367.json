{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\aaron_e\\\\gli\\\\src\\\\Components\\\\Submission.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { pdfjs, Document, Page, View } from 'react-pdf';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Collapsible from 'react-collapsible';\npdfjs.GlobalWorkerOptions.workerSrc = \"//cdnjs.cloudflare.com/ajax/libs/pdf.js/\".concat(pdfjs.version, \"/pdf.worker.js\");\nvar apiUrl = process.env.API_URL || 'http://nv-dt-534:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar Submission =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Submission, _Component);\n\n  /*state = {\r\n      loadingItems: true,\r\n      submission: '',\r\n      jurisdictions: [],\r\n      vendor: '',\r\n      vendorId: '',\r\n      numPages: null,\r\n      pageNumber: 1,\r\n      urns: [],\r\n      mods: []\r\n  }*/\n  function Submission(props) {\n    var _this;\n\n    _classCallCheck(this, Submission);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Submission).call(this, props));\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this.renderAuditMods = function () {\n      var mods = _this.state.mods;\n      var auditMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('audit'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        className: \"card\",\n        key: x._id,\n        style: {\n          marginTop: '10px',\n          backgroundColor: '#eee'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, auditMods.map(function (x) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    _this.renderTestableMods = function () {\n      var mods = _this.state.mods;\n      var testableMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('testable'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        className: \"card\",\n        key: x._id,\n        style: {\n          marginTop: '10px',\n          backgroundColor: '#eee'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, testableMods.map(function (x) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    _this.onDocumentLoadSuccess = function (_ref) {\n      var numPages = _ref.numPages;\n\n      _this.setState({\n        numPages: numPages\n      });\n    };\n\n    _this.changePage = function (offset) {\n      return _this.setState(function (prevState) {\n        return {\n          pageNumber: prevState.pageNumber + offset\n        };\n      });\n    };\n\n    _this.previousPage = function () {\n      return _this.changePage(-1);\n    };\n\n    _this.nextPage = function () {\n      return _this.changePage(1);\n    };\n\n    _this.tableOfContents = function () {\n      return _this.setState({\n        pageNumber: 4\n      });\n    };\n\n    _this.onItemClick = function (_ref2) {\n      var pageNumber = _ref2.pageNumber;\n      return _this.setState({\n        pageNumber: pageNumber\n      });\n    };\n\n    _this.removeTextLayerOffset = function () {\n      var textLayers = document.querySelectorAll(\".react-pdf__Page__textContent\");\n      textLayers.forEach(function (layer) {\n        var style = layer.style;\n        style.top = \"0\";\n        style.left = \"0\";\n        style.transform = \"\";\n      });\n    };\n\n    _this.renderURNs = function () {\n      var _this$state = _this.state,\n          urns = _this$state.urns,\n          pageNumber = _this$state.pageNumber,\n          numPages = _this$state.numPages;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, urns.map(function (a) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 362\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 363\n          },\n          __self: this\n        }, \"Page \", pageNumber || (numPages ? 1 : '--'), \" of \", numPages || '--'), React.createElement(\"button\", {\n          type: \"button\",\n          disabled: pageNumber <= 1,\n          onClick: _this.previousPage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364\n          },\n          __self: this\n        }, \"Back\"), React.createElement(\"button\", {\n          type: \"button\",\n          disabled: pageNumber >= numPages,\n          onClick: _this.nextPage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371\n          },\n          __self: this\n        }, \"Next\"), React.createElement(\"button\", {\n          type: \"button\",\n          onClick: _this.tableOfContents,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378\n          },\n          __self: this\n        }, \"Table of Contents\"), React.createElement(Document, {\n          file: \"\".concat(apiUrl).concat(a.url),\n          className: \"canvas\",\n          onLoadSuccess: _this.onDocumentLoadSuccess,\n          onItemClick: _this.onItemClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384\n          },\n          __self: this\n        }, React.createElement(Page, {\n          pageNumber: pageNumber,\n          onLoadSuccess: _this.removeTextLayerOffset,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    var html = '<p>Testing 1234 😀</p>';\n    var contentBlock = htmlToDraft(html);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      _this.state = {\n        loadingItems: true,\n        submission: '',\n        jurisdictions: [],\n        vendor: '',\n        vendorId: '',\n        numPages: null,\n        pageNumber: 1,\n        urns: [],\n        mods: [],\n        application: [],\n        versions: [],\n        html: '',\n        editorState: editorState,\n        uploadedImages: [],\n        auditModsCount: 0,\n        modsCount: 0,\n        testableModsCount: 0,\n        completeModsCount: 0,\n        jiraModsCount: 0\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(Submission, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    submission (id : \\\"\".concat(this.props.match.params.submissionId, \"\\\") {\\n                        file\\n                        received\\n                        processed\\n                        begin\\n                        vendor {\\n                        _id\\n                        name\\n                        logo {\\n                          _id\\n                          url\\n                        }\\n                      }\\n                        jurisdictions {\\n                        _id\\n                        jurisdiction\\n                      }\\n                      urns {\\n                          _id\\n                          url\\n                      }\\n                      mods {\\n                          _id\\n                          modnumber\\n                          title\\n                          trackerid\\n                          moddetails\\n                          status\\n                          jira\\n                          testingzip {\\n                              _id\\n                              url\\n                          }\\n                      }\\n                      application {\\n                          _id\\n                          name\\n                      }\\n                      versions {\\n                          _id\\n                          version\\n                      }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                this.setState({\n                  submission: response.data.submission.file,\n                  vendor: response.data.submission.vendor.name,\n                  jurisdictions: response.data.submission.jurisdictions,\n                  loadingItems: false,\n                  vendorId: response.data.submission.vendor._id,\n                  urns: response.data.submission.urns,\n                  mods: response.data.submission.mods,\n                  application: response.data.submission.application,\n                  versions: response.data.submission.versions,\n                  modsCount: response.data.submission.mods.length,\n                  auditModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('audit'.toLowerCase());\n                  }).length,\n                  testableModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('testable'.toLowerCase());\n                  }).length,\n                  completeModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('complete'.toLowerCase());\n                  }).length,\n                  jiraModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('jira'.toLowerCase());\n                  }).length\n                });\n                console.log(this.state);\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"renderMods\",\n    value: function renderMods() {\n      var _this2 = this;\n\n      var mods = this.state.mods;\n      return mods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          style: {\n            backgroundColor: 'black',\n            color: 'orange'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this2.renderDropDown4(),\n          triggerWhenOpen: _this2.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        })));\n      });\n    }\n  }, {\n    key: \"renderDropDown1\",\n    value: function renderDropDown1() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, \"Jurisdictions:\");\n    }\n  }, {\n    key: \"renderDropDown2\",\n    value: function renderDropDown2() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"URNs:\");\n    }\n  }, {\n    key: \"renderDropDown3\",\n    value: function renderDropDown3() {\n      var modsCount = this.state.modsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, \"Mods:  (\", modsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown4\",\n    value: function renderDropDown4() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, \"Details:\");\n    }\n  }, {\n    key: \"renderDropDown5\",\n    value: function renderDropDown5() {\n      var auditModsCount = this.state.auditModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"Audited Mods: (\", auditModsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown6\",\n    value: function renderDropDown6() {\n      var testableModsCount = this.state.testableModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \"Testable Mods: (\", testableModsCount, \")\");\n    }\n  }, {\n    key: \"renderHide\",\n    value: function renderHide() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, \"Hide\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          submission = _this$state2.submission,\n          vendor = _this$state2.vendor,\n          jurisdictions = _this$state2.jurisdictions,\n          loadingItems = _this$state2.loadingItems,\n          vendorId = _this$state2.vendorId,\n          numPages = _this$state2.numPages,\n          pageNumber = _this$state2.pageNumber,\n          urns = _this$state2.urns,\n          mods = _this$state2.mods,\n          application = _this$state2.application,\n          versions = _this$state2.versions,\n          editorState = _this$state2.editorState;\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, submission), React.createElement(Link, {\n        to: \"/manufacturer/\".concat(vendorId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, vendor)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/application/\".concat(application._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, application.name, \" \", versions.map(function (y) {\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407\n          },\n          __self: this\n        }, y.version);\n      }))), React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown1(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, jurisdictions.map(function (jurs) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 417\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/jurisdiction/\".concat(jurs._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 418\n          },\n          __self: this\n        }, jurs.jurisdiction));\n      })), React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown2(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, this.renderURNs()), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown3(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, this.renderMods()), React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown5(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        },\n        __self: this\n      }, this.renderAuditMods()), React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown6(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, this.renderTestableMods())), loadingItems && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Submission;\n}(Component);\n\nexport default Submission;","map":{"version":3,"sources":["C:\\Users\\aaron_e\\gli\\src\\Components\\Submission.js"],"names":["React","Component","Link","Strapi","Loader","pdfjs","Document","Page","View","Editor","EditorState","convertToRaw","ContentState","htmlToDraft","draftToHtml","Collapsible","GlobalWorkerOptions","workerSrc","version","apiUrl","process","env","API_URL","strapi","Submission","props","onEditorStateChange","editorState","setState","html","getCurrentContent","replace","renderAuditMods","mods","state","auditMods","filter","prop","status","toLowerCase","includes","x","_id","marginTop","backgroundColor","map","modnumber","color","title","trackerid","jira","testingzip","url","renderDropDown4","renderHide","createWithContent","createFromBlockArray","moddetails","contentBlocks","renderTestableMods","testableMods","onDocumentLoadSuccess","numPages","changePage","offset","prevState","pageNumber","previousPage","nextPage","tableOfContents","onItemClick","removeTextLayerOffset","textLayers","document","querySelectorAll","forEach","layer","style","top","left","transform","renderURNs","urns","a","contentBlock","contentState","loadingItems","submission","jurisdictions","vendor","vendorId","application","versions","uploadedImages","auditModsCount","modsCount","testableModsCount","completeModsCount","jiraModsCount","request","data","query","match","params","submissionId","response","file","name","length","console","log","textAlign","y","renderDropDown1","jurs","jurisdiction","renderDropDown2","renderDropDown3","renderMods","renderDropDown5","renderDropDown6"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Strapi from 'strapi-sdk-javascript/build/main';\r\nimport Loader from './Loader';\r\nimport { pdfjs, Document, Page, View } from 'react-pdf';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport draftToHtml from 'draftjs-to-html';\r\nimport Collapsible from 'react-collapsible';\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\nconst apiUrl = process.env.API_URL || 'http://nv-dt-534:1337';\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass Submission extends Component {\r\n    /*state = {\r\n        loadingItems: true,\r\n        submission: '',\r\n        jurisdictions: [],\r\n        vendor: '',\r\n        vendorId: '',\r\n        numPages: null,\r\n        pageNumber: 1,\r\n        urns: [],\r\n        mods: []\r\n    }*/\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let html = '<p>Testing 1234 😀</p>';\r\n        let contentBlock = htmlToDraft(html);\r\n        if (contentBlock) {\r\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n            let editorState = EditorState.createWithContent(contentState);\r\n            this.state = {\r\n                loadingItems: true,\r\n                submission: '',\r\n                jurisdictions: [],\r\n                vendor: '',\r\n                vendorId: '',\r\n                numPages: null,\r\n                pageNumber: 1,\r\n                urns: [],\r\n                mods: [],\r\n                application: [],\r\n                versions: [],\r\n                html: '',\r\n                editorState,\r\n                uploadedImages: [],\r\n                auditModsCount: 0,\r\n                modsCount: 0,\r\n                testableModsCount: 0,\r\n                completeModsCount: 0,\r\n                jiraModsCount: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const response = await strapi.request('POST', '/graphql', {\r\n            data: {\r\n                query: `query {\r\n                    submission (id : \"${this.props.match.params.submissionId}\") {\r\n                        file\r\n                        received\r\n                        processed\r\n                        begin\r\n                        vendor {\r\n                        _id\r\n                        name\r\n                        logo {\r\n                          _id\r\n                          url\r\n                        }\r\n                      }\r\n                        jurisdictions {\r\n                        _id\r\n                        jurisdiction\r\n                      }\r\n                      urns {\r\n                          _id\r\n                          url\r\n                      }\r\n                      mods {\r\n                          _id\r\n                          modnumber\r\n                          title\r\n                          trackerid\r\n                          moddetails\r\n                          status\r\n                          jira\r\n                          testingzip {\r\n                              _id\r\n                              url\r\n                          }\r\n                      }\r\n                      application {\r\n                          _id\r\n                          name\r\n                      }\r\n                      versions {\r\n                          _id\r\n                          version\r\n                      }\r\n                  }\r\n                }`\r\n            }\r\n        }\r\n        );\r\n        this.setState({\r\n            submission: response.data.submission.file,\r\n            vendor: response.data.submission.vendor.name,\r\n            jurisdictions: response.data.submission.jurisdictions,\r\n            loadingItems: false,\r\n            vendorId: response.data.submission.vendor._id,\r\n            urns: response.data.submission.urns,\r\n            mods: response.data.submission.mods,\r\n            application: response.data.submission.application,\r\n            versions: response.data.submission.versions,\r\n            modsCount: response.data.submission.mods.length,\r\n            auditModsCount: response.data.submission.mods.filter(prop => {\r\n                return prop.status.toLowerCase().includes('audit'.toLowerCase())\r\n            }).length,\r\n            testableModsCount: response.data.submission.mods.filter(prop => {\r\n                return prop.status.toLowerCase().includes('testable'.toLowerCase())\r\n            }).length,\r\n            completeModsCount: response.data.submission.mods.filter(prop => {\r\n                return prop.status.toLowerCase().includes('complete'.toLowerCase())\r\n            }).length,\r\n            jiraModsCount: response.data.submission.mods.filter(prop => {\r\n                return prop.status.toLowerCase().includes('jira'.toLowerCase())\r\n            }).length\r\n        });\r\n        console.log(this.state);\r\n        }catch (err) {\r\n            console.log(err);\r\n            this.setState({ loadingItems: false });\r\n        }\r\n    }\r\n\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({\r\n            editorState,\r\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\r\n        });\r\n    }\r\n\r\n    renderMods() {\r\n        let { mods } = this.state;\r\n        return (\r\n        mods.map(x => {\r\n        return (\r\n            <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\r\n                <h5>Mod {x.modnumber}</h5>\r\n                <h5 style={{color: '#007bff'}}>{x.title}</h5>\r\n                <h5>{x.trackerid}</h5>\r\n                <h5>Testing Status: {x.status}</h5>\r\n                {x.jira != null &&\r\n                    <h5>\r\n                        <a href={x.jira} style={{backgroundColor: 'black', color: 'orange'}}>Jira</a>\r\n                    </h5>\r\n                }\r\n                {x.testingzip != null &&\r\n                    <h5>\r\n                        <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\r\n                    </h5>\r\n                }\r\n                <Collapsible \r\n                transitionTime=\"250\"\r\n                trigger={this.renderDropDown4()}\r\n                triggerWhenOpen={this.renderHide()}\r\n                >\r\n                    <Editor \r\n                    editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\r\n                    readOnly='true'\r\n                    toolbarHidden='true'\r\n                    />\r\n                </Collapsible>\r\n            </div>\r\n            );}\r\n        ))\r\n    }\r\n\r\n    renderAuditMods = () => {\r\n        let { mods } = this.state;\r\n        let auditMods = mods.filter(prop => {\r\n            return prop.status.toLowerCase().includes('audit'.toLowerCase())\r\n        })\r\n\r\n        return (\r\n            <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\r\n                {auditMods.map(x => {\r\n                return (\r\n                    <div>\r\n                    <h5>Mod {x.modnumber}</h5>\r\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\r\n                    <h5>{x.trackerid}</h5>\r\n                    <h5>Testing Status: {x.status}</h5>\r\n                    {x.jira != null &&\r\n                        <h5>\r\n                            <a href={x.jira}>Jira</a>\r\n                        </h5>\r\n                    }\r\n                    {x.testingzip != null &&\r\n                        <h5>\r\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\r\n                        </h5>\r\n                    }\r\n                    <Collapsible \r\n                    transitionTime=\"250\"\r\n                    trigger={this.renderDropDown4()}\r\n                    triggerWhenOpen={this.renderHide()}\r\n                    >\r\n                        <Editor \r\n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\r\n                        readOnly='true'\r\n                        toolbarHidden='true'\r\n                        />\r\n                    </Collapsible>\r\n                </div>\r\n                )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderTestableMods = () => {\r\n        let { mods } = this.state;\r\n        let testableMods = mods.filter(prop => {\r\n            return prop.status.toLowerCase().includes('testable'.toLowerCase())\r\n        })\r\n        return (\r\n            <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\r\n                {testableMods.map(x => {\r\n                return (\r\n                    <div>\r\n                    <h5>Mod {x.modnumber}</h5>\r\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\r\n                    <h5>{x.trackerid}</h5>\r\n                    <h5>Testing Status: {x.status}</h5>\r\n                    {x.jira != null &&\r\n                        <h5>\r\n                            <a href={x.jira}>Jira</a>\r\n                        </h5>\r\n                    }\r\n                    {x.testingzip != null &&\r\n                        <h5>\r\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\r\n                        </h5>\r\n                    }\r\n                    <Collapsible \r\n                    transitionTime=\"250\"\r\n                    trigger={this.renderDropDown4()}\r\n                    triggerWhenOpen={this.renderHide()}\r\n                    >\r\n                        <Editor \r\n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\r\n                        readOnly='true'\r\n                        toolbarHidden='true'\r\n                        />\r\n                    </Collapsible>\r\n                </div>\r\n                )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderDropDown1() {\r\n        return (\r\n            <span className=\"trigger\">\r\n                Jurisdictions:\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderDropDown2() {\r\n        return (\r\n            <span className=\"trigger\">\r\n                URNs:\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderDropDown3() {\r\n        let { modsCount } = this.state;\r\n        return (\r\n            <span className=\"trigger\">\r\n                Mods:  ({modsCount})\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderDropDown4() {\r\n        return (\r\n            <span className=\"trigger\">\r\n                Details:\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderDropDown5() {\r\n        let { auditModsCount } = this.state;\r\n        return (\r\n            <span className=\"trigger\">\r\n                Audited Mods: ({auditModsCount})\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderDropDown6() {\r\n        let { testableModsCount } = this.state;\r\n        return (\r\n            <span className=\"trigger\">\r\n                Testable Mods: ({testableModsCount})\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderHide() {\r\n        return (\r\n            <span className=\"trigger\">\r\n                Hide\r\n            </span>\r\n        );\r\n    }\r\n\r\n    onDocumentLoadSuccess = ({ numPages }) => {\r\n        this.setState({ numPages });\r\n      }\r\n\r\n      changePage = offset => this.setState(prevState => ({\r\n        pageNumber: prevState.pageNumber + offset,\r\n      }));\r\n    \r\n      previousPage = () => this.changePage(-1);\r\n    \r\n      nextPage = () => this.changePage(1);\r\n\r\n      tableOfContents = () => this.setState({ pageNumber: 4});\r\n\r\n      onItemClick = ({ pageNumber }) => this.setState({ pageNumber: pageNumber });\r\n\r\n      //removes the offset of text from the rendered PDF file\r\n      removeTextLayerOffset = () => {\r\n        const textLayers = document.querySelectorAll(\".react-pdf__Page__textContent\");\r\n          textLayers.forEach(layer => {\r\n            const { style } = layer;\r\n            style.top = \"0\";\r\n            style.left = \"0\";\r\n            style.transform = \"\";\r\n        });\r\n      }\r\n\r\n      renderURNs = () => {\r\n          let { urns, pageNumber, numPages } = this.state;\r\n          return (\r\n            <div>\r\n                {urns.map(a => {\r\n                    return (\r\n                        <div>\r\n                            <p>Page {pageNumber || (numPages ? 1 : '--')} of {numPages || '--'}</p>\r\n                            <button\r\n                            type=\"button\"\r\n                            disabled={pageNumber <= 1}\r\n                            onClick={this.previousPage}\r\n                            >\r\n                                Back\r\n                            </button>\r\n                            <button\r\n                            type=\"button\"\r\n                            disabled={pageNumber >= numPages}\r\n                            onClick={this.nextPage}\r\n                            >\r\n                                Next\r\n                            </button>\r\n                            <button\r\n                            type=\"button\"\r\n                            onClick={this.tableOfContents}\r\n                            >\r\n                                Table of Contents\r\n                            </button>\r\n                            <Document\r\n                            file={`${apiUrl}${a.url}`}\r\n                            className='canvas'\r\n                            onLoadSuccess={this.onDocumentLoadSuccess}\r\n                            onItemClick={this.onItemClick}\r\n                            >\r\n                                <Page pageNumber={pageNumber} onLoadSuccess={this.removeTextLayerOffset}/>\r\n                            </Document>                        \r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n          );\r\n      }\r\n    \r\n    render() {\r\n        let { submission, vendor, jurisdictions, loadingItems, vendorId, numPages, pageNumber, urns, mods, application, versions, editorState } = this.state;\r\n        return(\r\n            <div style={{textAlign: 'center'}}>\r\n                <h1 style={{textAlign: 'center'}}>{submission}</h1>\r\n                <Link to={`/manufacturer/${vendorId}`}><h3 style={{textAlign: 'center'}}>{vendor}</h3></Link><br />\r\n                <h1 style={{textAlign: 'center'}}><Link to={`/application/${application._id}`}>{application.name} {versions.map(y => {\r\n                    return (\r\n                        <span>{y.version}</span>\r\n                    )\r\n                })}</Link></h1>\r\n                <Collapsible \r\n                transitionTime=\"250\" \r\n                trigger={this.renderDropDown1()}\r\n                triggerWhenOpen={this.renderHide()}\r\n                >\r\n                {jurisdictions.map(jurs => {\r\n                    return(\r\n                        <div>\r\n                           <Link to={`/jurisdiction/${jurs._id}`}>{jurs.jurisdiction}</Link>\r\n                        </div>\r\n                    );\r\n                })}\r\n                </Collapsible>\r\n                <Collapsible \r\n                transitionTime=\"250\" \r\n                trigger={this.renderDropDown2()}\r\n                triggerWhenOpen={this.renderHide()}\r\n                >\r\n                    {this.renderURNs()}\r\n                </Collapsible>\r\n                <div>\r\n                <Collapsible \r\n                transitionTime=\"250\" \r\n                trigger={this.renderDropDown3()}\r\n                triggerWhenOpen={this.renderHide()}\r\n                >\r\n                    {this.renderMods()}\r\n                </Collapsible>\r\n                <Collapsible \r\n                transitionTime=\"250\" \r\n                trigger={this.renderDropDown5()}\r\n                triggerWhenOpen={this.renderHide()}\r\n                >\r\n                    {this.renderAuditMods()}\r\n                </Collapsible>\r\n                <Collapsible \r\n                transitionTime=\"250\" \r\n                trigger={this.renderDropDown6()}\r\n                triggerWhenOpen={this.renderHide()}\r\n                >\r\n                    {this.renderTestableMods()}\r\n                </Collapsible>\r\n                </div>\r\n                {loadingItems && <Loader />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Submission;"]},"metadata":{},"sourceType":"module"}