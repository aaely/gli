{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/ModsList.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { FaRegEdit } from 'react-icons/fa';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Collapsible from 'react-collapsible';\nvar apiUrl = process.env.API_URL || 'http://localhost:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar ModList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ModList, _Component);\n\n  function ModList(props) {\n    var _this;\n\n    _classCallCheck(this, ModList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModList).call(this, props));\n\n    _this.renderAuditMods = function () {\n      var mods = _this.state.mods;\n      var auditMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('audit'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, auditMods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    _this.renderTestableMods = function () {\n      var mods = _this.state.mods;\n      var testableMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('testable'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, testableMods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    _this.renderJiraMods = function () {\n      var mods = _this.state.mods;\n      var jiraMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('jira'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, jiraMods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    var html = '<p>Testing 1234 😀</p>';\n    var contentBlock = htmlToDraft(html);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      _this.state = {\n        loadingItems: true,\n        submission: '',\n        mods: [],\n        application: [],\n        html: '',\n        editorState: editorState,\n        auditModsCount: 0,\n        modsCount: 0,\n        testableModsCount: 0,\n        completeModsCount: 0,\n        jiraModsCount: 0,\n        revokedModsCount: 0\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(ModList, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, getMods, ModsList, i, j;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    submission (id : \\\"\".concat(this.props.submissionId, \"\\\") {\\n                        file\\n                        received\\n                        processed\\n                        begin\\n                        jurisdictions {\\n                        _id\\n                        jurisdiction\\n                      }\\n                      mods {\\n                        _id\\n                        modnumber\\n                        title\\n                        trackerid\\n                        moddetails\\n                        status\\n                        jira\\n                        testingzip {\\n                            _id\\n                            url\\n                        }\\n                    }\\n                      versions {\\n                          _id\\n                          version\\n                          mods {\\n                            _id\\n                            modnumber\\n                            title\\n                            trackerid\\n                            moddetails\\n                            status\\n                            jira\\n                            testingzip {\\n                                _id\\n                                url\\n                            }\\n                        }\\n                      }\\n                      application {\\n                          _id\\n                          name\\n                      }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                getMods = response.data.submission.versions.map(function (a) {\n                  return a.mods;\n                });\n                ModsList = [];\n\n                for (i = 0; i < getMods.length; i++) {\n                  j = 0;\n\n                  while (j < getMods[i].length) {\n                    ModsList.push(getMods[i][j]);\n                    j++;\n                  }\n                }\n\n                console.log(ModsList);\n                this.setState({\n                  submission: response.data.submission.file,\n                  loadingItems: false,\n                  mods: ModsList,\n                  application: response.data.submission.application,\n                  modsCount: ModsList.length,\n                  auditModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('audit'.toLowerCase());\n                  }).length,\n                  testableModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('testable'.toLowerCase());\n                  }).length,\n                  completeModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('complete'.toLowerCase());\n                  }).length,\n                  jiraModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('jira'.toLowerCase());\n                  }).length,\n                  revokedModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('revoked'.toLowerCase());\n                  }).length\n                });\n                console.log(this.state);\n                _context.next = 16;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"renderMods\",\n    value: function renderMods() {\n      var _this2 = this;\n\n      var mods = this.state.mods;\n      mods = mods.sort(function (a, b) {\n        return a.modnumber - b.modnumber;\n      });\n      return mods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/updatemod/\".concat(x._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, React.createElement(FaRegEdit, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }))), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          style: {\n            backgroundColor: 'black',\n            color: 'orange'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this2.renderDropDown4(),\n          triggerWhenOpen: _this2.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        })));\n      });\n    }\n  }, {\n    key: \"renderDropDown3\",\n    value: function renderDropDown3() {\n      var modsCount = this.state.modsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, \"Mods:  (\", modsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown4\",\n    value: function renderDropDown4() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, \"Details:\");\n    }\n  }, {\n    key: \"renderDropDown5\",\n    value: function renderDropDown5() {\n      var auditModsCount = this.state.auditModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, \"Audited Mods: (\", auditModsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown6\",\n    value: function renderDropDown6() {\n      var testableModsCount = this.state.testableModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, \"Testable Mods: (\", testableModsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown7\",\n    value: function renderDropDown7() {\n      var jiraModsCount = this.state.jiraModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, \"Mods in JIRA:  (\", jiraModsCount, \")\");\n    }\n  }, {\n    key: \"renderHide\",\n    value: function renderHide() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, \"Hide\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //let { modsCount, auditModsCount, testableModsCount, jiraModsCount, completeModsCount } = this.state;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, //modsCount > 0 && \n      React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown3(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, this.renderMods()), //auditModsCount > 0 && \n      React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown5(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, this.renderAuditMods()), //testableModsCount > 0 && \n      React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown6(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, this.renderTestableMods()), //jiraModsCount > 0 && \n      React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown7(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, this.renderJiraMods()), React.createElement(\"p\", {\n        style: {\n          marginTop: '25px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"fixed-action-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, React.createElement(Link, {\n        style: {\n          backgroundColor: '#333'\n        },\n        className: \"btn-floating btn-large\",\n        to: \"/newmod/\".concat(this.props.submissionId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"material-icons\",\n        style: {\n          color: 'rgb(0, 123, 255)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, \"add\"))));\n    }\n  }]);\n\n  return ModList;\n}(Component);\n\nexport default ModList;","map":{"version":3,"sources":["/home/aely/gli/src/Components/ModsList.js"],"names":["React","Component","Link","Strapi","Loader","FaRegEdit","EditorState","convertToRaw","ContentState","Editor","htmlToDraft","draftToHtml","Collapsible","apiUrl","process","env","API_URL","strapi","ModList","props","renderAuditMods","mods","state","auditMods","filter","prop","status","toLowerCase","includes","map","x","_id","marginTop","backgroundColor","modnumber","color","title","trackerid","jira","testingzip","url","renderDropDown4","renderHide","createWithContent","createFromBlockArray","moddetails","replace","contentBlocks","renderTestableMods","testableMods","renderJiraMods","jiraMods","html","contentBlock","contentState","editorState","loadingItems","submission","application","auditModsCount","modsCount","testableModsCount","completeModsCount","jiraModsCount","revokedModsCount","request","data","query","submissionId","response","getMods","versions","a","ModsList","i","length","j","push","console","log","setState","file","sort","b","renderDropDown3","renderMods","renderDropDown5","renderDropDown6","renderDropDown7"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { FaRegEdit } from 'react-icons/fa';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Collapsible from 'react-collapsible';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass ModList extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 😀</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                loadingItems: true,\n                submission: '',\n                mods: [],\n                application: [],\n                html: '',\n                editorState,\n                auditModsCount: 0,\n                modsCount: 0,\n                testableModsCount: 0,\n                completeModsCount: 0,\n                jiraModsCount: 0,\n                revokedModsCount: 0\n            }\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id : \"${this.props.submissionId}\") {\n                        file\n                        received\n                        processed\n                        begin\n                        jurisdictions {\n                        _id\n                        jurisdiction\n                      }\n                      mods {\n                        _id\n                        modnumber\n                        title\n                        trackerid\n                        moddetails\n                        status\n                        jira\n                        testingzip {\n                            _id\n                            url\n                        }\n                    }\n                      versions {\n                          _id\n                          version\n                          mods {\n                            _id\n                            modnumber\n                            title\n                            trackerid\n                            moddetails\n                            status\n                            jira\n                            testingzip {\n                                _id\n                                url\n                            }\n                        }\n                      }\n                      application {\n                          _id\n                          name\n                      }\n                  }\n                }`\n            }\n        }\n        );\n        let getMods = response.data.submission.versions.map(a => {return a.mods});\n        let ModsList = [];\n        for (let i = 0; i < getMods.length; i++){\n            let j = 0;\n            while (j < getMods[i].length) {\n                ModsList.push(getMods[i][j])\n                j++\n            }\n        }\n        console.log(ModsList);\n        this.setState({\n            submission: response.data.submission.file,\n            loadingItems: false,\n            mods: ModsList,\n            application: response.data.submission.application,\n            modsCount: ModsList.length,\n            auditModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('audit'.toLowerCase())\n            }).length,\n            testableModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('testable'.toLowerCase())\n            }).length,\n            completeModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('complete'.toLowerCase())\n            }).length,\n            jiraModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('jira'.toLowerCase())\n            }).length,\n            revokedModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('revoked'.toLowerCase())\n            }).length\n        });\n        console.log(this.state);\n        } catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n    \n    renderMods() {\n        let { mods } = this.state;\n        mods = mods.sort((a, b) => (a.modnumber - b.modnumber));\n        return (\n        mods.map(x => {\n        return (\n            <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                <h5><Link to={`/updatemod/${x._id}`}><FaRegEdit /></Link></h5>\n                <h5>Mod {x.modnumber}</h5>\n                <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                <h5>{x.trackerid}</h5>\n                <h5>Testing Status: {x.status}</h5>\n                {x.jira != null &&\n                    <h5>\n                        <a href={x.jira} style={{backgroundColor: 'black', color: 'orange'}}>Jira</a>\n                    </h5>\n                }\n                {x.testingzip != null &&\n                    <h5>\n                        <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                    </h5>\n                }\n                <Collapsible \n                transitionTime=\"250\"\n                trigger={this.renderDropDown4()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    <Editor \n                    editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                    readOnly='true'\n                    toolbarHidden='true'\n                    />\n                </Collapsible>\n            </div>\n            );}\n        ))\n    }\n\n    renderAuditMods = () => {\n        let { mods } = this.state;\n        let auditMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('audit'.toLowerCase())\n        })\n\n        return (\n            <div>\n                {auditMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderTestableMods = () => {\n        let { mods } = this.state;\n        let testableMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('testable'.toLowerCase())\n        })\n        return (\n            <div>\n                {testableMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderJiraMods = () => {\n        let { mods } = this.state;\n        let jiraMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('jira'.toLowerCase())\n        })\n        return (\n            <div>\n                {jiraMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderDropDown3() {\n        let { modsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Mods:  ({modsCount})\n            </span>\n        );\n    }\n\n    renderDropDown4() {\n        return (\n            <span className=\"trigger\">\n                Details:\n            </span>\n        );\n    }\n\n    renderDropDown5() {\n        let { auditModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Audited Mods: ({auditModsCount})\n            </span>\n        );\n    }\n\n    renderDropDown6() {\n        let { testableModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Testable Mods: ({testableModsCount})\n            </span>\n        );\n    }\n\n    renderDropDown7() {\n        let { jiraModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Mods in JIRA:  ({jiraModsCount})\n            </span>\n        );\n    }\n\n    renderHide() {\n        return (\n            <span className=\"trigger\">\n                Hide\n            </span>\n        );\n    }\n\n    render() {\n        //let { modsCount, auditModsCount, testableModsCount, jiraModsCount, completeModsCount } = this.state;\n        return(\n            <div>\n                {//modsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown3()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderMods()}\n                </Collapsible>}\n                {//auditModsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown5()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderAuditMods()}\n                </Collapsible>}\n                {//testableModsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown6()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderTestableMods()}\n                </Collapsible>}\n                {//jiraModsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown7()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderJiraMods()}\n                </Collapsible>}\n                <p style={{marginTop: '25px'}}></p>\n                <div className=\"fixed-action-btn\">\n                <Link style={{backgroundColor: '#333'}} className=\"btn-floating btn-large\" to={`/newmod/${this.props.submissionId}`}>\n                    <i className=\"material-icons\" style={{color: 'rgb(0, 123, 255)'}}>add</i>\n                </Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ModList;"]},"metadata":{},"sourceType":"module"}