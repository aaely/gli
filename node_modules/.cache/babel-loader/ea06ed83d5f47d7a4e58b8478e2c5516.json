{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/Application.js\";\nimport React, { Component } from 'react';\nimport Collapsible from 'react-collapsible';\nimport { Box, Heading, Text, Image, Mask, Card, Button, Container, IconButton } from 'gestalt';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport { Alert } from 'reactstrap';\nvar apiUrl = process.env.API_URL || 'http://localhost:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar Vendors =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Vendors, _Component);\n\n  function Vendors(props) {\n    var _this;\n\n    _classCallCheck(this, Vendors);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vendors).call(this, props));\n    _this.saveChanges =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, html, application;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this$state = _this.state, html = _this$state.html, application = _this$state.application;\n              html = html.replace(/\"/g, '\\'\\'\\'');\n              html = html.replace(/\\\\/g, '----');\n              console.log(html);\n              _context.next = 7;\n              return strapi.request('POST', 'graphql', {\n                data: {\n                  query: \"mutation {\\n                        updateApplication(input: {\\n                          where: {\\n                            id: \\\"\".concat(application._id, \"\\\"\\n                          },\\n                          data: {\\n                            howto: \\\"\").concat(html, \"\\\"\\n                          }\\n                        }) {\\n                          application {\\n                            howto\\n                          }\\n                        }\\n                      }\")\n                }\n              });\n\n            case 7:\n              _this.setState({\n                successMessage: true\n              });\n\n              setTimeout(function () {\n                _this.setState({\n                  successMessage: false\n                });\n              }, 3000);\n              _context.next = 16;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n              _this.setState({\n                errorMessage: true\n              });\n\n              setTimeout(function () {\n                _this.setState({\n                  errorMessage: false\n                });\n              }, 3000);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 11]]);\n    }));\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this._uploadImageCallBack = function (file) {\n      // long story short, every time we upload an image, we\n      // need to save it to the state so we can get it's data\n      // later when we decide what to do with it.\n      // Make sure you have a uploadImages: [] as your default state\n      var uploadedImages = _this.state.uploadedImages;\n      console.log(uploadedImages);\n      var imageObject = {\n        file: file,\n        localSrc: URL.createObjectURL(file),\n        dburl: \"\".concat(apiUrl, \"/uploads/\").concat(file.name)\n      };\n      uploadedImages.push(imageObject);\n\n      _this.setState({\n        uploadedImages: uploadedImages\n      }); // We need to return a promise with the image src\n      // the img src we will use here will be what's needed\n      // to preview it in the browser. This will be different than what\n      // we will see in the index.md file we generate.\n\n\n      return new Promise(function (resolve, reject) {\n        resolve({\n          data: {\n            link: imageObject.localSrc\n          }\n        });\n      });\n    };\n\n    var _html = '<p>Testing 1234 ðŸ˜€</p>';\n    var contentBlock = htmlToDraft(_html);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      _this.state = {\n        application: [],\n        submissions: [],\n        loadingItems: true,\n        editorState: editorState,\n        uploadedImages: [],\n        html: _html,\n        errorMessage: false,\n        successMessage: false\n      };\n      _this._uploadImageCallBack = _this._uploadImageCallBack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n\n  _createClass(Vendors, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response, x, contentBlock, contentState, editorState;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    application (id: \\\"\".concat(this.props.match.params.applicationId, \"\\\") {\\n                    _id\\n                    name\\n                    howto\\n                    submissions {\\n                        _id\\n                        file\\n                        versions {\\n                            _id\\n                            version\\n                            approvalstatuses {\\n                                _id\\n                                status\\n                                jurisdictions {\\n                                    _id\\n                                    jurisdiction\\n                                }\\n                            }\\n                        }\\n                    }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context2.sent;\n                this.setState({\n                  application: response.data.application,\n                  submissions: response.data.application.submissions,\n                  loadingItems: false\n                });\n                x = this.state.application.howto.replace(/'''/g, '\"');\n                contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n\n                if (contentBlock) {\n                  contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n                  editorState = EditorState.createWithContent(contentState);\n                  this.setState({\n                    editorState: editorState,\n                    html: x.replace(/----/g, '\\\\')\n                  });\n                }\n\n                _context2.next = 14;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"renderDropDown1\",\n    value: function renderDropDown1() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Jurisdictions:\");\n    }\n  }, {\n    key: \"renderDropDown2\",\n    value: function renderDropDown2() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Mods:\");\n    }\n  }, {\n    key: \"renderHide\",\n    value: function renderHide() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Hide\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          loadingItems = _this$state2.loadingItems,\n          application = _this$state2.application,\n          submissions = _this$state2.submissions,\n          editorState = _this$state2.editorState,\n          successMessage = _this$state2.successMessage,\n          errorMessage = _this$state2.errorMessage;\n      console.log(this.state);\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(Box, {\n        marginTop: 5,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"start\",\n        dangerouslySetInlineStyle: {\n          __style: {\n            flexWrap: \"wrap-reverse\"\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Box, {\n        display: \"flex\",\n        direction: \"column\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(Box, {\n        marginBottom: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Heading, {\n        color: \"blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, application.name), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Submissions:\")), submissions.map(function (a) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/submission/\".concat(a._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, a.file), \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }), application.name, a.versions.map(function (b) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222\n            },\n            __self: this\n          }, \" \", b.version);\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this2.renderDropDown1(),\n          triggerWhenOpen: _this2.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, a.jurisdictions.map(function (c) {\n          return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }, c.jurisdiction, \" -- Status: \", c.approvalstatuses.map(function (d) {\n            return React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 234\n              },\n              __self: this\n            }, d.status);\n          }), \"   \");\n        })));\n      }), React.createElement(Editor, {\n        editorState: editorState,\n        onEditorStateChange: this.onEditorStateChange,\n        toolbar: {\n          image: {\n            uploadCallback: this._uploadImageCallBack\n          },\n          inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        style: {\n          backgroundColor: 'black',\n          color: 'green',\n          borderRadius: '20px'\n        },\n        onClick: this.saveChanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Save\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), successMessage && React.createElement(Alert, {\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, \"Successfully Saved!\"), errorMessage && React.createElement(Alert, {\n        color: \"danger\",\n        style: {\n          padding: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, \"There was an issue saving to database\")))), loadingItems && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Vendors;\n}(Component);\n\nexport default Vendors;","map":{"version":3,"sources":["/home/aely/gli/src/Components/Application.js"],"names":["React","Component","Collapsible","Box","Heading","Text","Image","Mask","Card","Button","Container","IconButton","Link","Strapi","Loader","Editor","EditorState","convertToRaw","ContentState","htmlToDraft","draftToHtml","Alert","apiUrl","process","env","API_URL","strapi","Vendors","props","saveChanges","state","html","application","replace","console","log","request","data","query","_id","setState","successMessage","setTimeout","errorMessage","onEditorStateChange","editorState","getCurrentContent","_uploadImageCallBack","file","uploadedImages","imageObject","localSrc","URL","createObjectURL","dburl","name","push","Promise","resolve","reject","link","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","submissions","loadingItems","bind","match","params","applicationId","response","x","howto","__style","flexWrap","map","a","versions","b","version","renderDropDown1","renderHide","jurisdictions","c","jurisdiction","approvalstatuses","d","status","image","uploadCallback","inputAccept","backgroundColor","color","borderRadius","padding"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Collapsible from 'react-collapsible';\nimport { Box,\n    Heading,\n    Text,\n    Image,\n    Mask,\n    Card,\n    Button,\n    Container, \n    IconButton} from 'gestalt';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport { Alert } from 'reactstrap';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Vendors extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 ðŸ˜€</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                application: [],\n                submissions: [],\n                loadingItems: true,\n                editorState,\n                uploadedImages: [],\n                html,\n                errorMessage: false,\n                successMessage: false\n            }\n            this._uploadImageCallBack = this._uploadImageCallBack.bind(this);\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    application (id: \"${this.props.match.params.applicationId}\") {\n                    _id\n                    name\n                    howto\n                    submissions {\n                        _id\n                        file\n                        versions {\n                            _id\n                            version\n                            approvalstatuses {\n                                _id\n                                status\n                                jurisdictions {\n                                    _id\n                                    jurisdiction\n                                }\n                            }\n                        }\n                    }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            application: response.data.application,\n            submissions: response.data.application.submissions,\n            loadingItems: false\n        });\n        let x = this.state.application.howto.replace(/'''/g, '\"');\n        let contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.setState({\n                editorState,\n                html: x.replace(/----/g, '\\\\')\n            });\n        }\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    saveChanges = async () => {\n        try {\n            let { html, application } = this.state;\n            html = html.replace(/\"/g, '\\'\\'\\'');\n            html = html.replace(/\\\\/g, '----')\n            console.log(html);\n            await strapi.request('POST', 'graphql', {\n                data: {\n                    query: `mutation {\n                        updateApplication(input: {\n                          where: {\n                            id: \"${application._id}\"\n                          },\n                          data: {\n                            howto: \"${html}\"\n                          }\n                        }) {\n                          application {\n                            howto\n                          }\n                        }\n                      }`\n                }\n            });\n            this.setState({\n                successMessage: true\n            })\n            setTimeout(() => {this.setState({ successMessage: false })}, 3000);\n            }catch (err) {\n                console.log(err);\n                this.setState({\n                    errorMessage: true\n                });\n                setTimeout(() => {this.setState({ errorMessage: false })}, 3000);\n            }\n        }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    renderDropDown1() {\n        return (\n            <span className=\"trigger\">\n                Jurisdictions:\n            </span>\n        );\n    }\n\n    renderDropDown2() {\n        return (\n            <span className=\"trigger\">\n                Mods:\n            </span>\n        );\n    }\n\n    renderHide() {\n        return (\n            <span className=\"trigger\">\n                Hide\n            </span>\n        );\n    }\n\n    _uploadImageCallBack = (file) => {\n        // long story short, every time we upload an image, we\n        // need to save it to the state so we can get it's data\n        // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        let { uploadedImages } = this.state;\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n          dburl: `${apiUrl}/uploads/${file.name}`\n        }\n\n        uploadedImages.push(imageObject);\n    \n        this.setState({uploadedImages: uploadedImages})\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n\n    render() {\n        let { loadingItems, application, submissions, editorState, successMessage, errorMessage } = this.state;\n        console.log(this.state);\n        return(\n            <Container>\n            <Box\n            marginTop={5}\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"start\"\n            dangerouslySetInlineStyle={{\n                __style: {\n                    flexWrap: \"wrap-reverse\"\n                }\n            }}\n            >\n            <Box display=\"flex\" direction=\"column\" alignItems=\"center\">\n                <Box marginBottom={5}>\n                    <Heading color=\"blue\">{application.name}</Heading>\n                    <h3><strong>Submissions:</strong></h3>\n                {submissions.map(a => {\n                    return (\n                        <p>\n                            <Link to={`/submission/${a._id}`}>{a.file}</Link> <br />\n                            {application.name}\n                            {a.versions.map(b => {\n                                return (\n                                    <span> {b.version}</span>\n                                )\n                            })}<br />\n                            <Collapsible \n                            transitionTime=\"250\" \n                            trigger={this.renderDropDown1()}\n                            triggerWhenOpen={this.renderHide()}\n                            >\n                                {a.jurisdictions.map(c => {\n                                return (\n                                    <p>{c.jurisdiction} -- Status: {c.approvalstatuses.map(d => {\n                                        return (\n                                            <span>{d.status}</span>\n                                        )\n                                        })}   </p>\n                                    )\n                                })}\n                            </Collapsible>\n                        </p>\n                    )\n                })}\n                <Editor \n                    editorState={editorState}\n                    onEditorStateChange={this.onEditorStateChange}\n                    toolbar={{\n                        image: { uploadCallback: this._uploadImageCallBack },\n                        inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                        }}\n                    />\n                <button style={{backgroundColor: 'black',color: 'green', borderRadius: '20px'}} onClick={this.saveChanges}>Save</button> <br />\n                {successMessage && \n                <Alert color='success'>Successfully Saved!</Alert>\n                }\n                {errorMessage &&\n                <Alert color='danger' style={{padding: '20px'}}>There was an issue saving to database</Alert>\n                }\n                </Box>\n            </Box>\n            </Box>\n            {loadingItems && <Loader />}\n            </Container>\n        );\n    }\n}\n\nexport default Vendors;"]},"metadata":{},"sourceType":"module"}