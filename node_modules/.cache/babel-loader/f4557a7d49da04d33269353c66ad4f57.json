{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\aaron_e\\\\gli\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\aaron_e\\\\gli\\\\src\\\\Components\\\\Application.js\";\nimport React, { Component } from 'react';\nimport Collapsible from 'react-collapsible';\nimport { Box, Heading, Text, Image, Mask, Card, Button, Container, IconButton } from 'gestalt';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nvar apiUrl = process.env.API_URL || 'http://nv-dt-534:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar Vendors =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Vendors, _Component);\n\n  /*state = {\r\n      application: [],\r\n      submissions: [],\r\n      loadingItems: true,\r\n      EditorState,\r\n      ContentState\r\n  }*/\n  function Vendors(props) {\n    var _this;\n\n    _classCallCheck(this, Vendors);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vendors).call(this, props));\n\n    _this.saveChanges = function () {\n      try {\n        var _this$state = _this.state,\n            html = _this$state.html,\n            application = _this$state.application;\n        html = html.replace(/\"/g, '\\'\\'\\'');\n        html = html.replace(/\\\\/g, '----');\n        console.log(html);\n        strapi.request('POST', 'graphql', {\n          data: {\n            query: \"mutation {\\n                        updateApplication(input: {\\n                          where: {\\n                            id: \\\"\".concat(application._id, \"\\\"\\n                          },\\n                          data: {\\n                            howto: \\\"\").concat(html, \"\\\"\\n                          }\\n                        }) {\\n                          application {\\n                            howto\\n                          }\\n                        }\\n                      }\")\n          }\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this._uploadImageCallBack = function (file) {\n      // long story short, every time we upload an image, we\n      // need to save it to the state so we can get it's data\n      // later when we decide what to do with it.\n      // Make sure you have a uploadImages: [] as your default state\n      var uploadedImages = _this.state.uploadedImages;\n      console.log(uploadedImages);\n      var imageObject = {\n        file: file,\n        localSrc: URL.createObjectURL(file).replace(/blob:/g, '')\n      };\n      console.log(imageObject);\n      uploadedImages.push(imageObject);\n\n      _this.setState({\n        uploadedImages: uploadedImages\n      }); // We need to return a promise with the image src\n      // the img src we will use here will be what's needed\n      // to preview it in the browser. This will be different than what\n      // we will see in the index.md file we generate.\n\n\n      return new Promise(function (resolve, reject) {\n        resolve({\n          data: {\n            link: imageObject.localSrc\n          }\n        });\n      });\n    };\n\n    var _html = '<p>Testing 1234 ðŸ˜€</p>';\n    var contentBlock = htmlToDraft(_html);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      _this.state = {\n        application: [],\n        submissions: [],\n        loadingItems: true,\n        editorState: editorState,\n        uploadData: '',\n        html: _html\n      };\n      _this._uploadImageCallBack = _this._uploadImageCallBack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n\n  _createClass(Vendors, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, x, contentBlock, contentState, editorState;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    application (id: \\\"\".concat(this.props.match.params.applicationId, \"\\\") {\\n                    _id\\n                    name\\n                    howto\\n                    mods {\\n                        _id\\n                        title\\n                        moddetails\\n                        trackerid\\n                    }\\n                    submissions {\\n                        _id\\n                        file\\n                        versions {\\n                            _id\\n                            version\\n                        }\\n                        jurisdictions {\\n                            _id\\n                            jurisdiction\\n                            approvalstatuses {\\n                                _id\\n                                status\\n                            }\\n                        }\\n                    }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                this.setState({\n                  application: response.data.application,\n                  submissions: response.data.application.submissions,\n                  loadingItems: false\n                });\n                x = this.state.application.howto.replace(/'''/g, '\"');\n                contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n\n                if (contentBlock) {\n                  contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n                  editorState = EditorState.createWithContent(contentState);\n                  this.setState({\n                    editorState: editorState,\n                    html: x.replace(/----/g, '\\\\')\n                  });\n                }\n\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"renderMods\",\n    value: function renderMods() {\n      var application = this.state.application;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, application.mods.map(function (a) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, a.title, \" | \", a.trackerid), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }), a.moddetails);\n      }));\n    }\n  }, {\n    key: \"renderDropDown1\",\n    value: function renderDropDown1() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Jurisdictions:\");\n    }\n  }, {\n    key: \"renderDropDown2\",\n    value: function renderDropDown2() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Mods:\");\n    }\n  }, {\n    key: \"renderHide\",\n    value: function renderHide() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Hide\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          loadingItems = _this$state2.loadingItems,\n          application = _this$state2.application,\n          submissions = _this$state2.submissions,\n          editorState = _this$state2.editorState;\n      console.log(this.state);\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Box, {\n        marginTop: 5,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"start\",\n        dangerouslySetInlineStyle: {\n          __style: {\n            flexWrap: \"wrap-reverse\"\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Box, {\n        display: \"flex\",\n        direction: \"column\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(Box, {\n        marginBottom: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(Heading, {\n        color: \"blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, application.name), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Submissions:\")), submissions.map(function (a) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/submission/\".concat(a._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, a.file), \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }), application.name, a.versions.map(function (b) {\n          return React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240\n            },\n            __self: this\n          }, \" \", b.version);\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this2.renderDropDown1(),\n          triggerWhenOpen: _this2.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, a.jurisdictions.map(function (c) {\n          return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250\n            },\n            __self: this\n          }, c.jurisdiction, \" -- Status: \", c.approvalstatuses.map(function (d) {\n            return React.createElement(\"span\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 252\n              },\n              __self: this\n            }, d.status);\n          }), \"   \");\n        })), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this2.renderDropDown2(),\n          triggerWhenOpen: _this2.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }, _this2.renderMods()), React.createElement(Editor, {\n          editorState: editorState,\n          onEditorStateChange: _this2.onEditorStateChange,\n          toolbar: {\n            image: {\n              uploadCallback: _this2._uploadImageCallBack\n            },\n            inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          style: {\n            backgroundColor: 'black',\n            color: 'green',\n            borderRadius: '20px'\n          },\n          onClick: _this2.saveChanges,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }, \"Save\"));\n      })))), loadingItems && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Vendors;\n}(Component);\n\nexport default Vendors;","map":{"version":3,"sources":["C:\\Users\\aaron_e\\gli\\src\\Components\\Application.js"],"names":["React","Component","Collapsible","Box","Heading","Text","Image","Mask","Card","Button","Container","IconButton","Link","Strapi","Loader","Editor","EditorState","convertToRaw","ContentState","htmlToDraft","draftToHtml","apiUrl","process","env","API_URL","strapi","Vendors","props","saveChanges","state","html","application","replace","console","log","request","data","query","_id","err","onEditorStateChange","editorState","setState","getCurrentContent","_uploadImageCallBack","file","uploadedImages","imageObject","localSrc","URL","createObjectURL","push","Promise","resolve","reject","link","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","submissions","loadingItems","uploadData","bind","match","params","applicationId","response","x","howto","mods","map","a","title","trackerid","moddetails","__style","flexWrap","name","versions","b","version","renderDropDown1","renderHide","jurisdictions","c","jurisdiction","approvalstatuses","d","status","renderDropDown2","renderMods","image","uploadCallback","inputAccept","backgroundColor","color","borderRadius"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Collapsible from 'react-collapsible';\r\nimport { Box,\r\n    Heading,\r\n    Text,\r\n    Image,\r\n    Mask,\r\n    Card,\r\n    Button,\r\n    Container, \r\n    IconButton} from 'gestalt';\r\nimport { Link } from 'react-router-dom';\r\nimport Strapi from 'strapi-sdk-javascript/build/main';\r\nimport Loader from './Loader';\r\nimport { Editor } from 'react-draft-wysiwyg';\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\r\nimport htmlToDraft from 'html-to-draftjs';\r\nimport draftToHtml from 'draftjs-to-html';\r\nconst apiUrl = process.env.API_URL || 'http://nv-dt-534:1337';\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass Vendors extends Component {\r\n    /*state = {\r\n        application: [],\r\n        submissions: [],\r\n        loadingItems: true,\r\n        EditorState,\r\n        ContentState\r\n    }*/\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let html = '<p>Testing 1234 ðŸ˜€</p>';\r\n        let contentBlock = htmlToDraft(html);\r\n        if (contentBlock) {\r\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n            let editorState = EditorState.createWithContent(contentState);\r\n            this.state = {\r\n                application: [],\r\n                submissions: [],\r\n                loadingItems: true,\r\n                editorState,\r\n                uploadData: '',\r\n                html\r\n            }\r\n            this._uploadImageCallBack = this._uploadImageCallBack.bind(this);\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            //console.log(this.props.match.params.itemId);\r\n            let response = await strapi.request('POST', '/graphql', {\r\n            data: {\r\n                query: `query {\r\n                    application (id: \"${this.props.match.params.applicationId}\") {\r\n                    _id\r\n                    name\r\n                    howto\r\n                    mods {\r\n                        _id\r\n                        title\r\n                        moddetails\r\n                        trackerid\r\n                    }\r\n                    submissions {\r\n                        _id\r\n                        file\r\n                        versions {\r\n                            _id\r\n                            version\r\n                        }\r\n                        jurisdictions {\r\n                            _id\r\n                            jurisdiction\r\n                            approvalstatuses {\r\n                                _id\r\n                                status\r\n                            }\r\n                        }\r\n                    }\r\n                  }\r\n                }`\r\n            }\r\n        }\r\n        );\r\n        this.setState({\r\n            application: response.data.application,\r\n            submissions: response.data.application.submissions,\r\n            loadingItems: false\r\n        });\r\n        let x = this.state.application.howto.replace(/'''/g, '\"');\r\n        let contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\r\n        if (contentBlock) {\r\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\r\n            let editorState = EditorState.createWithContent(contentState);\r\n            this.setState({\r\n                editorState,\r\n                html: x.replace(/----/g, '\\\\')\r\n            });\r\n        }\r\n        }catch (err) {\r\n            console.log(err);\r\n            this.setState({ loadingItems: false });\r\n        }\r\n    }\r\n\r\n    saveChanges = () => {\r\n        try {\r\n            let { html, application } = this.state;\r\n            html = html.replace(/\"/g, '\\'\\'\\'');\r\n            html = html.replace(/\\\\/g, '----')\r\n            console.log(html);\r\n            strapi.request('POST', 'graphql', {\r\n                data: {\r\n                    query: `mutation {\r\n                        updateApplication(input: {\r\n                          where: {\r\n                            id: \"${application._id}\"\r\n                          },\r\n                          data: {\r\n                            howto: \"${html}\"\r\n                          }\r\n                        }) {\r\n                          application {\r\n                            howto\r\n                          }\r\n                        }\r\n                      }`\r\n                }\r\n            });\r\n            }catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({\r\n            editorState,\r\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\r\n        });\r\n    }\r\n\r\n    renderMods() {\r\n        let { application } = this.state;\r\n        return (\r\n            <div>\r\n                {application.mods.map(a => {\r\n                    return (\r\n                        <p>\r\n                            <strong>{a.title} | {a.trackerid}</strong><br />\r\n                            {a.moddetails}\r\n                        </p>\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDropDown1() {\r\n        return (\r\n            <span className=\"trigger\">\r\n                Jurisdictions:\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderDropDown2() {\r\n        return (\r\n            <span className=\"trigger\">\r\n                Mods:\r\n            </span>\r\n        );\r\n    }\r\n\r\n    renderHide() {\r\n        return (\r\n            <span className=\"trigger\">\r\n                Hide\r\n            </span>\r\n        );\r\n    }\r\n\r\n    _uploadImageCallBack = (file) => {\r\n        // long story short, every time we upload an image, we\r\n        // need to save it to the state so we can get it's data\r\n        // later when we decide what to do with it.\r\n    \r\n       // Make sure you have a uploadImages: [] as your default state\r\n        let uploadedImages = this.state.uploadedImages;\r\n        console.log(uploadedImages);\r\n        const imageObject = {\r\n          file: file,\r\n          localSrc: URL.createObjectURL(file).replace(/blob:/g, ''),\r\n        }\r\n        console.log(imageObject);\r\n        uploadedImages.push(imageObject);\r\n    \r\n        this.setState({uploadedImages: uploadedImages})\r\n    \r\n        // We need to return a promise with the image src\r\n        // the img src we will use here will be what's needed\r\n        // to preview it in the browser. This will be different than what\r\n        // we will see in the index.md file we generate.\r\n        return new Promise(\r\n          (resolve, reject) => {\r\n            resolve({ data: { link: imageObject.localSrc } });\r\n          }\r\n        );\r\n    }\r\n\r\n\r\n    render() {\r\n        let { loadingItems, application, submissions, editorState } = this.state;\r\n        console.log(this.state);\r\n        return(\r\n            <Container>\r\n            <Box\r\n            marginTop={5}\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"start\"\r\n            dangerouslySetInlineStyle={{\r\n                __style: {\r\n                    flexWrap: \"wrap-reverse\"\r\n                }\r\n            }}\r\n            >\r\n            <Box display=\"flex\" direction=\"column\" alignItems=\"center\">\r\n                <Box marginBottom={5}>\r\n                    <Heading color=\"blue\">{application.name}</Heading>\r\n                    <h3><strong>Submissions:</strong></h3>\r\n                {submissions.map(a => {\r\n                    return (\r\n                        <p>\r\n                            <Link to={`/submission/${a._id}`}>{a.file}</Link> <br />\r\n                            {application.name}\r\n                            {a.versions.map(b => {\r\n                                return (\r\n                                    <span> {b.version}</span>\r\n                                )\r\n                            })}<br />\r\n                            <Collapsible \r\n                            transitionTime=\"250\" \r\n                            trigger={this.renderDropDown1()}\r\n                            triggerWhenOpen={this.renderHide()}\r\n                            >\r\n                                {a.jurisdictions.map(c => {\r\n                                return (\r\n                                    <p>{c.jurisdiction} -- Status: {c.approvalstatuses.map(d => {\r\n                                        return (\r\n                                            <span>{d.status}</span>\r\n                                        )\r\n                                        })}   </p>\r\n                                    )\r\n                                })}\r\n                            </Collapsible>\r\n                            <Collapsible\r\n                            transitionTime=\"250\"\r\n                            trigger={this.renderDropDown2()}\r\n                            triggerWhenOpen={this.renderHide()}\r\n                            >\r\n                            {this.renderMods()}\r\n                            </Collapsible>\r\n                            <Editor \r\n                            editorState={editorState}\r\n                            onEditorStateChange={this.onEditorStateChange}\r\n                            toolbar={{\r\n                                image: { uploadCallback: this._uploadImageCallBack },\r\n                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\r\n                              }}\r\n                            />\r\n                    <button style={{backgroundColor: 'black',color: 'green', borderRadius: '20px'}} onClick={this.saveChanges}>Save</button>\r\n                        </p>\r\n                    )\r\n                })}\r\n                </Box>\r\n            </Box>\r\n            </Box>\r\n            {loadingItems && <Loader />}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Vendors;"]},"metadata":{},"sourceType":"module"}