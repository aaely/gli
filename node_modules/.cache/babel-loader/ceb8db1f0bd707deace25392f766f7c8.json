{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/Submission.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { FaRegEdit } from 'react-icons/fa';\nimport { pdfjs, Document, Page, View } from 'react-pdf';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Collapsible from 'react-collapsible';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Sector } from 'recharts';\npdfjs.GlobalWorkerOptions.workerSrc = \"//cdnjs.cloudflare.com/ajax/libs/pdf.js/\".concat(pdfjs.version, \"/pdf.worker.js\");\nvar apiUrl = process.env.API_URL || 'http://localhost:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar renderActiveShape = function renderActiveShape(props) {\n  var RADIAN = Math.PI / 180;\n  var cx = props.cx,\n      cy = props.cy,\n      midAngle = props.midAngle,\n      innerRadius = props.innerRadius,\n      outerRadius = props.outerRadius,\n      startAngle = props.startAngle,\n      endAngle = props.endAngle,\n      fill = props.fill,\n      payload = props.payload,\n      percent = props.percent;\n  var sin = Math.sin(-RADIAN * midAngle);\n  var cos = Math.cos(-RADIAN * midAngle);\n  var sx = cx + (outerRadius + 10) * cos;\n  var sy = cy + (outerRadius + 10) * sin;\n  var mx = cx + (outerRadius + 30) * cos;\n  var my = cy + (outerRadius + 30) * sin;\n  var ex = mx + (cos >= 0 ? 1 : -1) * 22;\n  var ey = my;\n  var textAnchor = cos >= 0 ? 'start' : 'end';\n  return React.createElement(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    x: cx,\n    y: cy,\n    dy: 8,\n    textAnchor: \"middle\",\n    fill: fill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, payload.name), React.createElement(Sector, {\n    cx: cx,\n    cy: cy,\n    innerRadius: innerRadius,\n    outerRadius: outerRadius,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    fill: fill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(Sector, {\n    cx: cx,\n    cy: cy,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: outerRadius + 6,\n    outerRadius: outerRadius + 10,\n    fill: fill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"path\", {\n    d: \"M\".concat(sx, \",\").concat(sy, \"L\").concat(mx, \",\").concat(my, \"L\").concat(ex, \",\").concat(ey),\n    stroke: fill,\n    fill: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"circle\", {\n    cx: ex,\n    cy: ey,\n    r: 2,\n    fill: fill,\n    stroke: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"text\", {\n    x: ex + (cos >= 0 ? 1 : -1) * 12,\n    y: ey,\n    textAnchor: textAnchor,\n    fill: \"#333\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Count \".concat(payload.value)), React.createElement(\"text\", {\n    x: ex + (cos >= 0 ? 1 : -1) * 12,\n    y: ey,\n    dy: 18,\n    textAnchor: textAnchor,\n    fill: \"#999\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"(percent: \".concat((percent * 100).toFixed(2), \"%)\")));\n};\n\nvar Submission =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Submission, _Component);\n\n  function Submission(props) {\n    var _this;\n\n    _classCallCheck(this, Submission);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Submission).call(this, props));\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this.renderAuditMods = function () {\n      var mods = _this.state.mods;\n      var auditMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('audit'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, auditMods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    _this.renderTestableMods = function () {\n      var mods = _this.state.mods;\n      var testableMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('testable'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, testableMods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    _this.renderJiraMods = function () {\n      var mods = _this.state.mods;\n      var jiraMods = mods.filter(function (prop) {\n        return prop.status.toLowerCase().includes('jira'.toLowerCase());\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, jiraMods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this.renderDropDown4(),\n          triggerWhenOpen: _this.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 338\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    _this.onDocumentLoadSuccess = function (_ref) {\n      var numPages = _ref.numPages;\n\n      _this.setState({\n        numPages: numPages\n      });\n    };\n\n    _this.changePage = function (offset) {\n      return _this.setState(function (prevState) {\n        return {\n          pageNumber: prevState.pageNumber + offset\n        };\n      });\n    };\n\n    _this.previousPage = function () {\n      return _this.changePage(-1);\n    };\n\n    _this.nextPage = function () {\n      return _this.changePage(1);\n    };\n\n    _this.tableOfContents = function () {\n      return _this.setState({\n        pageNumber: 4\n      });\n    };\n\n    _this.onItemClick = function (_ref2) {\n      var pageNumber = _ref2.pageNumber;\n      return _this.setState({\n        pageNumber: pageNumber\n      });\n    };\n\n    _this.removeTextLayerOffset = function () {\n      var textLayers = document.querySelectorAll(\".react-pdf__Page__textContent\");\n      textLayers.forEach(function (layer) {\n        var style = layer.style;\n        style.top = \"0\";\n        style.left = \"0\";\n        style.transform = \"\";\n      });\n    };\n\n    _this.renderURNs = function () {\n      var _this$state = _this.state,\n          urns = _this$state.urns,\n          pageNumber = _this$state.pageNumber,\n          numPages = _this$state.numPages;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }, urns.map(function (a) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 457\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 458\n          },\n          __self: this\n        }, \"Page \", pageNumber || (numPages ? 1 : '--'), \" of \", numPages || '--'), React.createElement(\"button\", {\n          type: \"button\",\n          disabled: pageNumber <= 1,\n          onClick: _this.previousPage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 459\n          },\n          __self: this\n        }, \"Back\"), React.createElement(\"button\", {\n          type: \"button\",\n          disabled: pageNumber >= numPages,\n          onClick: _this.nextPage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466\n          },\n          __self: this\n        }, \"Next\"), React.createElement(\"button\", {\n          type: \"button\",\n          onClick: _this.tableOfContents,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 473\n          },\n          __self: this\n        }, \"Table of Contents\"), React.createElement(Document, {\n          file: \"\".concat(apiUrl).concat(a.url),\n          className: \"canvas\",\n          onLoadSuccess: _this.onDocumentLoadSuccess,\n          onItemClick: _this.onItemClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479\n          },\n          __self: this\n        }, React.createElement(Page, {\n          pageNumber: pageNumber,\n          onLoadSuccess: _this.removeTextLayerOffset,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 485\n          },\n          __self: this\n        })));\n      }));\n    };\n\n    var html = '<p>Testing 1234 😀</p>';\n    var contentBlock = htmlToDraft(html);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      _this.state = {\n        loadingItems: true,\n        submission: '',\n        jurisdictions: [],\n        vendor: '',\n        vendorId: '',\n        numPages: null,\n        pageNumber: 1,\n        urns: [],\n        mods: [],\n        application: [],\n        versions: [],\n        html: '',\n        editorState: editorState,\n        uploadedImages: [],\n        auditModsCount: 0,\n        modsCount: 0,\n        testableModsCount: 0,\n        completeModsCount: 0,\n        jiraModsCount: 0,\n        revokedModsCount: 0\n      };\n    }\n\n    return _this;\n  }\n\n  _createClass(Submission, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    submission (id : \\\"\".concat(this.props.match.params.submissionId, \"\\\") {\\n                        file\\n                        received\\n                        processed\\n                        begin\\n                        vendor {\\n                        _id\\n                        name\\n                        logo {\\n                          _id\\n                          url\\n                        }\\n                      }\\n                        jurisdictions {\\n                        _id\\n                        jurisdiction\\n                      }\\n                      urns {\\n                          _id\\n                          url\\n                      }\\n                      mods {\\n                          _id\\n                          modnumber\\n                          title\\n                          trackerid\\n                          moddetails\\n                          status\\n                          jira\\n                          testingzip {\\n                              _id\\n                              url\\n                          }\\n                      }\\n                      application {\\n                          _id\\n                          name\\n                      }\\n                      versions {\\n                          _id\\n                          version\\n                      }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                this.setState({\n                  submission: response.data.submission.file,\n                  vendor: response.data.submission.vendor.name,\n                  jurisdictions: response.data.submission.jurisdictions,\n                  loadingItems: false,\n                  vendorId: response.data.submission.vendor._id,\n                  urns: response.data.submission.urns,\n                  mods: response.data.submission.mods,\n                  application: response.data.submission.application,\n                  versions: response.data.submission.versions,\n                  modsCount: response.data.submission.mods.length,\n                  auditModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('audit'.toLowerCase());\n                  }).length,\n                  testableModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('testable'.toLowerCase());\n                  }).length,\n                  completeModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('complete'.toLowerCase());\n                  }).length,\n                  jiraModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('jira'.toLowerCase());\n                  }).length,\n                  revokedModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('revoked'.toLowerCase());\n                  }).length\n                });\n                console.log(this.state);\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"renderMods\",\n    value: function renderMods() {\n      var _this2 = this;\n\n      var mods = this.state.mods;\n      mods = mods.sort(function (a, b) {\n        return a.modnumber - b.modnumber;\n      });\n      return mods.map(function (x) {\n        return React.createElement(\"div\", {\n          className: \"card\",\n          key: x._id,\n          style: {\n            marginTop: '10px',\n            backgroundColor: '#eee'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/updatemod/\".concat(x._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(FaRegEdit, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }))), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, \"Mod \", x.modnumber), React.createElement(\"h5\", {\n          style: {\n            color: '#007bff'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, x.title), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, x.trackerid), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, \"Testing Status: \", x.status), x.jira != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: x.jira,\n          style: {\n            backgroundColor: 'black',\n            color: 'orange'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, \"Jira\")), x.testingzip != null && React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"\".concat(apiUrl).concat(x.testingzip.url),\n          style: {\n            backgroundColor: 'black',\n            color: 'hsl(128, 100%, 50%)'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, \"Download Testing Performed\")), React.createElement(Collapsible, {\n          transitionTime: \"250\",\n          trigger: _this2.renderDropDown4(),\n          triggerWhenOpen: _this2.renderHide(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, React.createElement(Editor, {\n          editorState: EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks)),\n          readOnly: \"true\",\n          toolbarHidden: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        })));\n      });\n    }\n  }, {\n    key: \"renderDropDown1\",\n    value: function renderDropDown1() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, \"Jurisdictions:\");\n    }\n  }, {\n    key: \"renderDropDown2\",\n    value: function renderDropDown2() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, \"URNs:\");\n    }\n  }, {\n    key: \"renderDropDown3\",\n    value: function renderDropDown3() {\n      var modsCount = this.state.modsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, \"Mods:  (\", modsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown4\",\n    value: function renderDropDown4() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      }, \"Details:\");\n    }\n  }, {\n    key: \"renderDropDown5\",\n    value: function renderDropDown5() {\n      var auditModsCount = this.state.auditModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \"Audited Mods: (\", auditModsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown6\",\n    value: function renderDropDown6() {\n      var testableModsCount = this.state.testableModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, \"Testable Mods: (\", testableModsCount, \")\");\n    }\n  }, {\n    key: \"renderDropDown7\",\n    value: function renderDropDown7() {\n      var jiraModsCount = this.state.jiraModsCount;\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, \"Mods in JIRA:  (\", jiraModsCount, \")\");\n    }\n  }, {\n    key: \"renderHide\",\n    value: function renderHide() {\n      return React.createElement(\"span\", {\n        className: \"trigger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, \"Hide\");\n    }\n  }, {\n    key: \"onPieEnter\",\n    value: function onPieEnter(data, index, e) {\n      this.setState({\n        activeIndex: index\n      });\n    }\n  }, {\n    key: \"renderPieChart\",\n    value: function renderPieChart() {\n      var _this$state2 = this.state,\n          auditModsCount = _this$state2.auditModsCount,\n          completeModsCount = _this$state2.completeModsCount,\n          jiraModsCount = _this$state2.jiraModsCount,\n          testableModsCount = _this$state2.testableModsCount,\n          revokedModsCount = _this$state2.revokedModsCount,\n          activeIndex = _this$state2.activeIndex;\n      var completeMods = completeModsCount + revokedModsCount;\n      var data = [{\n        name: 'Complete Mods',\n        value: parseInt(\"\".concat(completeMods))\n      }, {\n        name: 'JIRA Mods',\n        value: parseInt(\"\".concat(jiraModsCount))\n      }, {\n        name: 'Audit Mods',\n        value: parseInt(\"\".concat(auditModsCount))\n      }, {\n        name: 'Testable Mods',\n        value: parseInt(\"\".concat(testableModsCount))\n      }];\n      var COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n      return React.createElement(PieChart, {\n        width: 400,\n        height: 400,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      }, React.createElement(Pie, {\n        activeIndex: activeIndex,\n        activeShape: renderActiveShape,\n        data: data,\n        cx: 200,\n        cy: 200,\n        innerRadius: 60,\n        outerRadius: 80,\n        fill: \"#8884d8\",\n        dataKey: \"value\",\n        onMouseEnter: this.onPieEnter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }), data.map(function (entry, index) {\n        return React.createElement(Cell, {\n          key: \"slice-\".concat(index),\n          fill: COLORS[index % COLORS.length],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 527\n          },\n          __self: this\n        });\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          submission = _this$state3.submission,\n          vendor = _this$state3.vendor,\n          jurisdictions = _this$state3.jurisdictions,\n          loadingItems = _this$state3.loadingItems,\n          vendorId = _this$state3.vendorId,\n          application = _this$state3.application,\n          versions = _this$state3.versions,\n          modsCount = _this$state3.modsCount,\n          auditModsCount = _this$state3.auditModsCount,\n          testableModsCount = _this$state3.testableModsCount,\n          jiraModsCount = _this$state3.jiraModsCount,\n          completeModsCount = _this$state3.completeModsCount;\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      }, submission), React.createElement(Link, {\n        to: \"/manufacturer/\".concat(vendorId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539\n        },\n        __self: this\n      }, vendor)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/application/\".concat(application._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, application.name, \" \", versions.map(function (y) {\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 542\n          },\n          __self: this\n        }, y.version);\n      }))), React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown1(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545\n        },\n        __self: this\n      }, jurisdictions.map(function (jurs) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 552\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: \"/jurisdiction/\".concat(jurs._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 553\n          },\n          __self: this\n        }, jurs.jurisdiction));\n      })), React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown2(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558\n        },\n        __self: this\n      }, this.renderURNs()), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565\n        },\n        __self: this\n      }, modsCount > 0 && React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown3(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567\n        },\n        __self: this\n      }, this.renderMods()), auditModsCount > 0 && React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown5(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      }, this.renderAuditMods()), testableModsCount > 0 && React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown6(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583\n        },\n        __self: this\n      }, this.renderTestableMods()), jiraModsCount > 0 && React.createElement(Collapsible, {\n        transitionTime: \"250\",\n        trigger: this.renderDropDown7(),\n        triggerWhenOpen: this.renderHide(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591\n        },\n        __self: this\n      }, this.renderJiraMods())), React.createElement(\"p\", {\n        style: {\n          marginTop: '25px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"fixed-action-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600\n        },\n        __self: this\n      }, React.createElement(Link, {\n        style: {\n          backgroundColor: '#333'\n        },\n        className: \"btn-floating btn-large\",\n        to: \"/newmod/\".concat(this.props.match.params.submissionId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"material-icons\",\n        style: {\n          color: 'rgb(0, 123, 255)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602\n        },\n        __self: this\n      }, \"add\"))), loadingItems && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Submission;\n}(Component);\n\nexport default Submission;","map":{"version":3,"sources":["/home/aely/gli/src/Components/Submission.js"],"names":["React","Component","Link","Strapi","Loader","FaRegEdit","pdfjs","Document","Page","View","Editor","EditorState","convertToRaw","ContentState","htmlToDraft","draftToHtml","Collapsible","PieChart","Pie","Cell","ResponsiveContainer","Sector","GlobalWorkerOptions","workerSrc","version","apiUrl","process","env","API_URL","strapi","renderActiveShape","props","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","payload","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","name","value","toFixed","Submission","onEditorStateChange","editorState","setState","html","getCurrentContent","replace","renderAuditMods","mods","state","auditMods","filter","prop","status","toLowerCase","includes","map","x","_id","marginTop","backgroundColor","modnumber","color","title","trackerid","jira","testingzip","url","renderDropDown4","renderHide","createWithContent","createFromBlockArray","moddetails","contentBlocks","renderTestableMods","testableMods","renderJiraMods","jiraMods","onDocumentLoadSuccess","numPages","changePage","offset","prevState","pageNumber","previousPage","nextPage","tableOfContents","onItemClick","removeTextLayerOffset","textLayers","document","querySelectorAll","forEach","layer","style","top","left","transform","renderURNs","urns","a","contentBlock","contentState","loadingItems","submission","jurisdictions","vendor","vendorId","application","versions","uploadedImages","auditModsCount","modsCount","testableModsCount","completeModsCount","jiraModsCount","revokedModsCount","request","data","query","match","params","submissionId","response","file","length","console","log","sort","b","index","e","activeIndex","completeMods","parseInt","COLORS","onPieEnter","entry","textAlign","y","renderDropDown1","jurs","jurisdiction","renderDropDown2","renderDropDown3","renderMods","renderDropDown5","renderDropDown6","renderDropDown7"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { FaRegEdit } from 'react-icons/fa';\nimport { pdfjs, Document, Page, View } from 'react-pdf';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Collapsible from 'react-collapsible';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Sector } from 'recharts';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nlet renderActiveShape = (props) => {\n    let RADIAN = Math.PI / 180;\n    let { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,\n        fill, payload, percent } = props;\n    let sin = Math.sin(-RADIAN * midAngle);\n    let cos = Math.cos(-RADIAN * midAngle);\n    let sx = cx + (outerRadius + 10) * cos;\n    let sy = cy + (outerRadius + 10) * sin;\n    let mx = cx + (outerRadius + 30) * cos;\n    let my = cy + (outerRadius + 30) * sin;\n    let ex = mx + (cos >= 0 ? 1 : -1) * 22;\n    let ey = my;\n    let textAnchor = cos >= 0 ? 'start' : 'end';\n  \n    return (\n      <g>\n        <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{payload.name}</text>\n        <Sector\n          cx={cx}\n          cy={cy}\n          innerRadius={innerRadius}\n          outerRadius={outerRadius}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          fill={fill}\n        />\n        <Sector\n          cx={cx}\n          cy={cy}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          innerRadius={outerRadius + 6}\n          outerRadius={outerRadius + 10}\n          fill={fill}\n        />\n        <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\"/>\n        <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\"/>\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#333\">\n          {`Count ${payload.value}`}\n        </text>\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\n          {`(percent: ${(percent * 100).toFixed(2)}%)`}\n        </text>\n      </g>\n    );\n  };\n\nclass Submission extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 😀</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                loadingItems: true,\n                submission: '',\n                jurisdictions: [],\n                vendor: '',\n                vendorId: '',\n                numPages: null,\n                pageNumber: 1,\n                urns: [],\n                mods: [],\n                application: [],\n                versions: [],\n                html: '',\n                editorState,\n                uploadedImages: [],\n                auditModsCount: 0,\n                modsCount: 0,\n                testableModsCount: 0,\n                completeModsCount: 0,\n                jiraModsCount: 0,\n                revokedModsCount: 0\n            }\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id : \"${this.props.match.params.submissionId}\") {\n                        file\n                        received\n                        processed\n                        begin\n                        vendor {\n                        _id\n                        name\n                        logo {\n                          _id\n                          url\n                        }\n                      }\n                        jurisdictions {\n                        _id\n                        jurisdiction\n                      }\n                      urns {\n                          _id\n                          url\n                      }\n                      mods {\n                          _id\n                          modnumber\n                          title\n                          trackerid\n                          moddetails\n                          status\n                          jira\n                          testingzip {\n                              _id\n                              url\n                          }\n                      }\n                      application {\n                          _id\n                          name\n                      }\n                      versions {\n                          _id\n                          version\n                      }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            submission: response.data.submission.file,\n            vendor: response.data.submission.vendor.name,\n            jurisdictions: response.data.submission.jurisdictions,\n            loadingItems: false,\n            vendorId: response.data.submission.vendor._id,\n            urns: response.data.submission.urns,\n            mods: response.data.submission.mods,\n            application: response.data.submission.application,\n            versions: response.data.submission.versions,\n            modsCount: response.data.submission.mods.length,\n            auditModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('audit'.toLowerCase())\n            }).length,\n            testableModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('testable'.toLowerCase())\n            }).length,\n            completeModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('complete'.toLowerCase())\n            }).length,\n            jiraModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('jira'.toLowerCase())\n            }).length,\n            revokedModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('revoked'.toLowerCase())\n            }).length\n        });\n        console.log(this.state);\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    renderMods() {\n        let { mods } = this.state;\n        mods = mods.sort((a, b) => (a.modnumber - b.modnumber));\n        return (\n        mods.map(x => {\n        return (\n            <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                <h5><Link to={`/updatemod/${x._id}`}><FaRegEdit /></Link></h5>\n                <h5>Mod {x.modnumber}</h5>\n                <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                <h5>{x.trackerid}</h5>\n                <h5>Testing Status: {x.status}</h5>\n                {x.jira != null &&\n                    <h5>\n                        <a href={x.jira} style={{backgroundColor: 'black', color: 'orange'}}>Jira</a>\n                    </h5>\n                }\n                {x.testingzip != null &&\n                    <h5>\n                        <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                    </h5>\n                }\n                <Collapsible \n                transitionTime=\"250\"\n                trigger={this.renderDropDown4()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    <Editor \n                    editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                    readOnly='true'\n                    toolbarHidden='true'\n                    />\n                </Collapsible>\n            </div>\n            );}\n        ))\n    }\n\n    renderAuditMods = () => {\n        let { mods } = this.state;\n        let auditMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('audit'.toLowerCase())\n        })\n\n        return (\n            <div>\n                {auditMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderTestableMods = () => {\n        let { mods } = this.state;\n        let testableMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('testable'.toLowerCase())\n        })\n        return (\n            <div>\n                {testableMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderJiraMods = () => {\n        let { mods } = this.state;\n        let jiraMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('jira'.toLowerCase())\n        })\n        return (\n            <div>\n                {jiraMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderDropDown1() {\n        return (\n            <span className=\"trigger\">\n                Jurisdictions:\n            </span>\n        );\n    }\n\n    renderDropDown2() {\n        return (\n            <span className=\"trigger\">\n                URNs:\n            </span>\n        );\n    }\n\n    renderDropDown3() {\n        let { modsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Mods:  ({modsCount})\n            </span>\n        );\n    }\n\n    renderDropDown4() {\n        return (\n            <span className=\"trigger\">\n                Details:\n            </span>\n        );\n    }\n\n    renderDropDown5() {\n        let { auditModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Audited Mods: ({auditModsCount})\n            </span>\n        );\n    }\n\n    renderDropDown6() {\n        let { testableModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Testable Mods: ({testableModsCount})\n            </span>\n        );\n    }\n\n    renderDropDown7() {\n        let { jiraModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Mods in JIRA:  ({jiraModsCount})\n            </span>\n        );\n    }\n\n    renderHide() {\n        return (\n            <span className=\"trigger\">\n                Hide\n            </span>\n        );\n    }\n\n    onDocumentLoadSuccess = ({ numPages }) => {\n        this.setState({ numPages });\n      }\n\n      changePage = offset => this.setState(prevState => ({\n        pageNumber: prevState.pageNumber + offset,\n      }));\n    \n      previousPage = () => this.changePage(-1);\n    \n      nextPage = () => this.changePage(1);\n\n      tableOfContents = () => this.setState({ pageNumber: 4});\n\n      onItemClick = ({ pageNumber }) => this.setState({ pageNumber: pageNumber });\n\n      //removes the offset of text from the rendered PDF file\n      removeTextLayerOffset = () => {\n        const textLayers = document.querySelectorAll(\".react-pdf__Page__textContent\");\n          textLayers.forEach(layer => {\n            const { style } = layer;\n            style.top = \"0\";\n            style.left = \"0\";\n            style.transform = \"\";\n        });\n      }\n\n      renderURNs = () => {\n          let { urns, pageNumber, numPages } = this.state;\n          return (\n            <div>\n                {urns.map(a => {\n                    return (\n                        <div>\n                            <p>Page {pageNumber || (numPages ? 1 : '--')} of {numPages || '--'}</p>\n                            <button\n                            type=\"button\"\n                            disabled={pageNumber <= 1}\n                            onClick={this.previousPage}\n                            >\n                                Back\n                            </button>\n                            <button\n                            type=\"button\"\n                            disabled={pageNumber >= numPages}\n                            onClick={this.nextPage}\n                            >\n                                Next\n                            </button>\n                            <button\n                            type=\"button\"\n                            onClick={this.tableOfContents}\n                            >\n                                Table of Contents\n                            </button>\n                            <Document\n                            file={`${apiUrl}${a.url}`}\n                            className='canvas'\n                            onLoadSuccess={this.onDocumentLoadSuccess}\n                            onItemClick={this.onItemClick}\n                            >\n                                <Page pageNumber={pageNumber} onLoadSuccess={this.removeTextLayerOffset}/>\n                            </Document>                        \n                        </div>\n                    )\n                })}\n            </div>\n          );\n      }\n    \n    onPieEnter(data, index, e) {\n        this.setState({\n            activeIndex: index\n        });\n    }\n\n\n    renderPieChart() {\n        let { auditModsCount, completeModsCount, jiraModsCount, testableModsCount, revokedModsCount, activeIndex } = this.state;\n        let completeMods = completeModsCount + revokedModsCount;\n        let data = [\n            { name: 'Complete Mods', value: parseInt(`${completeMods}`) },\n            { name: 'JIRA Mods', value: parseInt(`${jiraModsCount}`) },\n            { name: 'Audit Mods', value: parseInt(`${auditModsCount}`) },\n            { name: 'Testable Mods', value: parseInt(`${testableModsCount}`) },\n          ];\n        let COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        return (\n            <PieChart width={400} height={400}>\n                <Pie\n                activeIndex={activeIndex}\n                activeShape={renderActiveShape}\n                data={data}\n                cx={200}\n                cy={200}\n                innerRadius={60}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                onMouseEnter={this.onPieEnter}\n                />\n                {\n                  data.map((entry, index) => (\n                    <Cell key={`slice-${index}`} fill={COLORS[index % COLORS.length]}/>\n                  ))\n                }\n            </PieChart>\n        )\n    }\n    \n    render() {\n        let { submission, vendor, jurisdictions, loadingItems, vendorId, application, versions, modsCount, auditModsCount, testableModsCount, jiraModsCount, completeModsCount } = this.state;\n        return(\n            <div style={{textAlign: 'center'}}>\n                <h1 style={{textAlign: 'center'}}>{submission}</h1>\n                <Link to={`/manufacturer/${vendorId}`}><h3 style={{textAlign: 'center'}}>{vendor}</h3></Link><br />\n                <h1 style={{textAlign: 'center'}}><Link to={`/application/${application._id}`}>{application.name} {versions.map(y => {\n                    return (\n                        <span>{y.version}</span>\n                    )\n                })}</Link></h1>\n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown1()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                {jurisdictions.map(jurs => {\n                    return(\n                        <div>\n                           <Link to={`/jurisdiction/${jurs._id}`}>{jurs.jurisdiction}</Link>\n                        </div>\n                    );\n                })}\n                </Collapsible>\n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown2()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderURNs()}\n                </Collapsible>\n                <div>\n                {modsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown3()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderMods()}\n                </Collapsible>}\n                {auditModsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown5()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderAuditMods()}\n                </Collapsible>}\n                {testableModsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown6()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderTestableMods()}\n                </Collapsible>}\n                {jiraModsCount > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown7()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderJiraMods()}\n                </Collapsible>}\n                </div>\n                <p style={{marginTop: '25px'}}></p>\n                <div className=\"fixed-action-btn\">\n                <Link style={{backgroundColor: '#333'}} className=\"btn-floating btn-large\" to={`/newmod/${this.props.match.params.submissionId}`}>\n                    <i className=\"material-icons\" style={{color: 'rgb(0, 123, 255)'}}>add</i>\n                </Link>\n                </div>\n                {loadingItems && <Loader />}\n            </div>\n        );\n    }\n}\n\nexport default Submission;"]},"metadata":{},"sourceType":"module"}