{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/RadialBarChart.js\";\nimport React, { Component } from 'react';\nimport { Cell, Sector, Pie, RadialBarChart, Legend, RadialBar, LabelList, Tooltip, PolarAngleAxis } from 'recharts';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nvar apiUrl = process.env.API_URL || 'http://localhost:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar MyRadialBarChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyRadialBarChart, _Component);\n\n  function MyRadialBarChart(props) {\n    var _this;\n\n    _classCallCheck(this, MyRadialBarChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyRadialBarChart).call(this, props));\n\n    _this.onPieEnter = function (data, index) {\n      _this.setState({\n        activeIndex: index\n      });\n    };\n\n    _this.state = {\n      auditModsCount: 0,\n      modsCount: 0,\n      testableModsCount: 0,\n      completeModsCount: 0,\n      jiraModsCount: 0,\n      revokedModsCount: 0,\n      activeIndex: 0\n    };\n    return _this;\n  }\n\n  _createClass(MyRadialBarChart, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, getMods, ModsList, i, j;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    submission (id : \\\"\".concat(this.props.submissionId, \"\\\") {\\n                      versions {\\n                          _id\\n                          version\\n                          mods {\\n                              _id\\n                              status\\n                          }\\n                      }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                getMods = response.data.submission.versions.map(function (a) {\n                  return a.mods;\n                });\n                ModsList = [];\n\n                for (i = 0; i < getMods.length; i++) {\n                  j = 0;\n\n                  while (j < getMods[i].length) {\n                    ModsList.push(getMods[i][j]);\n                    j++;\n                  }\n                }\n\n                this.setState({\n                  loadingItems: false,\n                  modsCount: ModsList.length,\n                  auditModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('audit'.toLowerCase());\n                  }).length,\n                  testableModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('testable'.toLowerCase());\n                  }).length,\n                  completeModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('complete'.toLowerCase());\n                  }).length,\n                  jiraModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('jira'.toLowerCase());\n                  }).length,\n                  revokedModsCount: ModsList.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('revoked'.toLowerCase());\n                  }).length\n                });\n                console.log(this.state);\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          modsCount = _this$state.modsCount,\n          auditModsCount = _this$state.auditModsCount,\n          completeModsCount = _this$state.completeModsCount,\n          jiraModsCount = _this$state.jiraModsCount,\n          testableModsCount = _this$state.testableModsCount,\n          revokedModsCount = _this$state.revokedModsCount,\n          activeIndex = _this$state.activeIndex;\n      var completeMods = completeModsCount + revokedModsCount;\n      var data = [{\n        name: 'Complete Mods',\n        uv: parseInt(\"\".concat(completeMods))\n      }, {\n        name: 'JIRA Mods',\n        uv: parseInt(\"\".concat(jiraModsCount))\n      }, {\n        name: 'Audit Mods',\n        uv: parseInt(\"\".concat(auditModsCount))\n      }, {\n        name: 'Testable Mods',\n        uv: parseInt(\"\".concat(testableModsCount))\n      }];\n      var domain = [0, modsCount];\n      console.log(modsCount);\n      console.log(domain);\n      var COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n      var style = {\n        lineHeight: '24px',\n        left: 300\n      };\n      return React.createElement(\"div\", {\n        className: \"radial-bar-chart-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(RadialBarChart, {\n        width: 500,\n        height: 300,\n        cx: 150,\n        cy: 150,\n        innerRadius: 20,\n        outerRadius: 140,\n        barSize: 10,\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(PolarAngleAxis, {\n        type: \"number\",\n        domain: [0, 8],\n        angleAxisId: 2,\n        tick: false,\n        cx: 150,\n        cy: 150,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(RadialBar, {\n        minPointSize: 15,\n        background: true,\n        angleAxisId: 2,\n        dataKey: \"uv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, data.map(function (entry, index) {\n        return React.createElement(Cell, {\n          key: \"cell-\".concat(index),\n          fill: COLORS[index % COLORS.length],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }), React.createElement(LabelList, {\n        position: \"insideEnd\",\n        fill: \"#fff\",\n        fontSize: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), React.createElement(Legend, {\n        iconSize: 10,\n        width: 120,\n        height: 140,\n        layout: \"vertical\",\n        verticalAlign: \"middle\",\n        wrapperStyle: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MyRadialBarChart;\n}(Component);\n\nexport default MyRadialBarChart;","map":{"version":3,"sources":["/home/aely/gli/src/Components/RadialBarChart.js"],"names":["React","Component","Cell","Sector","Pie","RadialBarChart","Legend","RadialBar","LabelList","Tooltip","PolarAngleAxis","Strapi","apiUrl","process","env","API_URL","strapi","MyRadialBarChart","props","onPieEnter","data","index","setState","activeIndex","state","auditModsCount","modsCount","testableModsCount","completeModsCount","jiraModsCount","revokedModsCount","request","query","submissionId","response","getMods","submission","versions","map","a","mods","ModsList","i","length","j","push","loadingItems","filter","prop","status","toLowerCase","includes","console","log","completeMods","name","uv","parseInt","domain","COLORS","style","lineHeight","left","entry"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Cell, Sector, Pie, RadialBarChart, Legend, RadialBar, LabelList, Tooltip, PolarAngleAxis } from 'recharts';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass MyRadialBarChart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            auditModsCount: 0,\n            modsCount: 0,\n            testableModsCount: 0,\n            completeModsCount: 0,\n            jiraModsCount: 0,\n            revokedModsCount: 0,\n            activeIndex: 0\n        };\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id : \"${this.props.submissionId}\") {\n                      versions {\n                          _id\n                          version\n                          mods {\n                              _id\n                              status\n                          }\n                      }\n                  }\n                }`\n            }\n        }\n        );\n        let getMods = response.data.submission.versions.map(a => {return a.mods});\n        let ModsList = [];\n        for (let i = 0; i < getMods.length; i++) {\n            let j = 0;\n            while (j < getMods[i].length) {\n                ModsList.push(getMods[i][j]);\n                j++;\n            }\n        }\n        this.setState({\n            loadingItems: false,\n            modsCount: ModsList.length,\n            auditModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('audit'.toLowerCase())\n            }).length,\n            testableModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('testable'.toLowerCase())\n            }).length,\n            completeModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('complete'.toLowerCase())\n            }).length,\n            jiraModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('jira'.toLowerCase())\n            }).length,\n            revokedModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('revoked'.toLowerCase())\n            }).length\n        });\n        console.log(this.state);\n        } catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    onPieEnter = (data, index) => {\n        this.setState({\n            activeIndex: index,\n        });\n    }\n\n    render() {\n        let { modsCount, auditModsCount, completeModsCount, jiraModsCount, testableModsCount, revokedModsCount, activeIndex } = this.state;\n        let completeMods = completeModsCount + revokedModsCount;\n        let data = [\n            { name: 'Complete Mods', uv: parseInt(`${completeMods}`) },\n            { name: 'JIRA Mods', uv: parseInt(`${jiraModsCount}`) },\n            { name: 'Audit Mods', uv: parseInt(`${auditModsCount}`) },\n            { name: 'Testable Mods', uv: parseInt(`${testableModsCount}`) },\n          ];\n        let domain = [0,modsCount];\n        console.log(modsCount);\n        console.log(domain);\n        let COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        let style = {\n            lineHeight: '24px',\n            left: 300,\n          };\n        return(\n            <div className=\"radial-bar-chart-wrapper\">\n          <RadialBarChart\n            width={500}\n            height={300}\n            cx={150}\n            cy={150}\n            innerRadius={20}\n            outerRadius={140}\n            barSize={10}\n            data={data}\n          >\n            <PolarAngleAxis type=\"number\" domain={[0, 8]} angleAxisId={2} tick={false} cx={150} cy={150} />\n            <RadialBar minPointSize={15} background angleAxisId={2} dataKey=\"uv\">\n              {\n                data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]}/>\n                ))\n              }\n              <LabelList position=\"insideEnd\" fill=\"#fff\" fontSize={10} />\n            </RadialBar>\n            <Legend iconSize={10} width={120} height={140} layout=\"vertical\" verticalAlign=\"middle\" wrapperStyle={style} />\n            <Tooltip/>\n          </RadialBarChart>\n        </div>\n        );\n    }\n}\n\nexport default MyRadialBarChart;"]},"metadata":{},"sourceType":"module"}