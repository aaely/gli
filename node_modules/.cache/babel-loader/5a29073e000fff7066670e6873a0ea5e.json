{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/UpdateMod.js\";\nimport React, { Component } from 'react';\nimport { Form, FormGroup, Col, Row, Label, Input, FormText, Button, Alert } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nvar apiUrl = process.env.API_URL || 'http://localhost:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar NewMod =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewMod, _Component);\n\n  function NewMod(props) {\n    var _this;\n\n    _classCallCheck(this, NewMod);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewMod).call(this, props));\n    _this.saveChanges =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, application, submission, moddetails, teststeps, trackerid, title, status, errorMessage, successMessage;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this$state = _this.state, application = _this$state.application, submission = _this$state.submission, moddetails = _this$state.moddetails, teststeps = _this$state.teststeps, trackerid = _this$state.trackerid, title = _this$state.title, status = _this$state.status, errorMessage = _this$state.errorMessage, successMessage = _this$state.successMessage;\n              moddetails = moddetails.replace(/\"/g, '\\'\\'\\'');\n              moddetails = moddetails.replace(/\\\\/g, '----');\n              teststeps = teststeps.replace(/\"/g, '\\'\\'\\'');\n              teststeps = teststeps.replace(/\\\\/g, '----');\n              _context.next = 8;\n              return strapi.request('POST', 'graphql', {\n                data: {\n                  query: \"mutation {\\n                        updateMods(input: {\\n                          where: {\\n                            id: \\\"\".concat(_this.props.match.params.modId, \"\\\"\\n                          },\\n                          data: {\\n                            moddetails: \\\"\").concat(moddetails, \"\\\"\\n                            teststeps: \\\"\").concat(teststeps, \"\\\"\\n                            trackerid: \\\"\").concat(trackerid, \"\\\"\\n                            submissions: \\\"\").concat(submission, \"\\\"\\n                            title: \\\"\").concat(title, \"\\\"\\n                            status: \").concat(status, \"\\n                            application: \\\"\").concat(application, \"\\\"\\n                          }\\n                        }) {\\n                          mods {\\n                            moddetails\\n                            teststeps\\n                            trackerid\\n                            submissions\\n                            title\\n                            status\\n                            application\\n                          }\\n                        }\\n                      }\")\n                }\n              });\n\n            case 8:\n              _this.setState({\n                successMessage: true\n              });\n\n              setTimeout(function () {\n                _this.setState({\n                  successMessage: false\n                });\n              }, 3000);\n              _context.next = 17;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n              _this.setState({\n                errorMessage: true\n              });\n\n              setTimeout(function () {\n                _this.setState({\n                  errorMessage: false\n                });\n              }, 3000);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 12]]);\n    }));\n\n    _this.onEditorStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this._uploadImageCallBack = function (file) {\n      // long story short, every time we upload an image, we\n      // need to save it to the state so we can get it's data\n      // later when we decide what to do with it.\n      // Make sure you have a uploadImages: [] as your default state\n      var uploadedImages = _this.state.uploadedImages;\n      console.log(uploadedImages);\n      var imageObject = {\n        file: file,\n        localSrc: URL.createObjectURL(file),\n        dburl: \"\".concat(apiUrl, \"/uploads/\").concat(file.name)\n      };\n      uploadedImages.push(imageObject);\n\n      _this.setState({\n        uploadedImages: uploadedImages\n      }); // We need to return a promise with the image src\n      // the img src we will use here will be what's needed\n      // to preview it in the browser. This will be different than what\n      // we will see in the index.md file we generate.\n\n\n      return new Promise(function (resolve, reject) {\n        resolve({\n          data: {\n            link: imageObject.localSrc\n          }\n        });\n      });\n    };\n\n    _this.handleTrackerID = function (event) {\n      _this.setState({\n        trackerid: event.target.value\n      });\n\n      console.log(_this.state);\n    };\n\n    _this.handleTitle = function (event) {\n      _this.setState({\n        title: event.target.value\n      });\n\n      console.log(_this.state);\n    };\n\n    _this.handleStatus = function (event) {\n      _this.setState({\n        status: event.target.value\n      });\n    };\n\n    _this.onModDetailsStateChange = function (editorState) {\n      _this.setState({\n        editorState: editorState,\n        moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    _this.onTestStepsStateChange = function (editorState1) {\n      _this.setState({\n        editorState1: editorState1,\n        teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\n      });\n    };\n\n    var html = '<p>Testing 1234 ðŸ˜€</p>';\n    var contentBlock = htmlToDraft(html);\n\n    if (contentBlock) {\n      var contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n      var editorState = EditorState.createWithContent(contentState);\n      _this.state = {\n        application: [],\n        submission: [],\n        loadingItems: true,\n        editorState: editorState,\n        uploadedImages: [],\n        moddetails: '',\n        teststeps: '',\n        trackerid: '',\n        successMessage: false,\n        errorMessage: false\n      };\n      _this._uploadImageCallBack = _this._uploadImageCallBack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    }\n\n    _this.handleTrackerID = _this.handleTrackerID.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleTitle = _this.handleTitle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(NewMod, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response, x, y, contentBlock, contentBlock1, contentState, contentState1, editorState, editorState1;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    mod (id: \\\"\".concat(this.props.match.params.modId, \"\\\") {\\n                        title\\n                        moddetails\\n                        trackerid\\n                        teststeps\\n                        application {\\n                            _id\\n                            name\\n                        }\\n                        status\\n                        submissions {\\n                            _id\\n                            file\\n                        }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context2.sent;\n                this.setState({\n                  application: response.data.mod.application._id,\n                  submission: response.data.mod.submissions[0].file,\n                  trackerid: response.data.mod.trackerid,\n                  moddetails: response.data.mod.moddetails,\n                  teststeps: response.data.mod.teststeps,\n                  title: response.data.mod.title,\n                  loadingItems: false\n                });\n\n                if (this.state.moddetails === null && this.state.teststeps !== null) {\n                  this.setState({\n                    moddetails: '<p>Input text here</p>'\n                  });\n                }\n\n                if (this.state.teststeps === null) {\n                  this.setState({\n                    teststeps: '<p>Input Test Steps here</p>'\n                  });\n                }\n\n                x = this.state.moddetails.replace(/'''/g, '\"');\n                y = this.state.teststeps.replace(/'''/g, '\"');\n                contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n                contentBlock1 = htmlToDraft(y.replace(/----/g, '\\\\'));\n\n                if (contentBlock && contentBlock1) {\n                  contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n                  contentState1 = ContentState.createFromBlockArray(contentBlock1.contentBlocks);\n                  editorState = EditorState.createWithContent(contentState);\n                  editorState1 = EditorState.createWithContent(contentState1);\n                  this.setState({\n                    editorState: editorState,\n                    editorState1: editorState1\n                  });\n                }\n\n                _context2.next = 18;\n                break;\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 14]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          loadingItems = _this$state2.loadingItems,\n          application = _this$state2.application,\n          submission = _this$state2.submission,\n          editorState = _this$state2.editorState,\n          editorState1 = _this$state2.editorState1,\n          trackerid = _this$state2.trackerid,\n          title = _this$state2.title,\n          status = _this$state2.status,\n          errorMessage = _this$state2.errorMessage,\n          successMessage = _this$state2.successMessage;\n      console.log(this.state);\n      return React.createElement(Form, {\n        style: {\n          marginLeft: '10px',\n          marginRight: '10px',\n          marginTop: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"file\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"Submission File #\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"file\",\n        id: \"file\",\n        value: submission,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"title\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Title\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"title\",\n        id: \"title\",\n        value: title,\n        onChange: this.handleTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"trackerid\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Tracker ID\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"trackerid\",\n        name: \"trackerid\",\n        id: \"trackerid\",\n        value: trackerid,\n        onChange: this.handleTrackerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleSelect\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        name: \"select\",\n        id: \"exampleSelect\",\n        value: status,\n        onChange: this.handleStatus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"Testable\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"JIRA\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Audit\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"Complete\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, \"Revoked\")))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"moddetails\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Mod Details\"), React.createElement(Editor, {\n        editorState: editorState,\n        onEditorStateChange: this.onModDetailsStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"teststeps\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"Test Steps\"), React.createElement(Editor, {\n        editorState: editorState1,\n        onEditorStateChange: this.onTestStepsStateChange,\n        toolbar: {\n          image: {\n            uploadCallback: this._uploadImageCallBack\n          },\n          inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        check: true,\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: 10,\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.saveChanges,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, \"Submit\"))), errorMessage && React.createElement(Alert, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"Error\"), successMessage && React.createElement(Alert, {\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"Success\"));\n    }\n  }]);\n\n  return NewMod;\n}(Component);\n\nexport default NewMod;","map":{"version":3,"sources":["/home/aely/gli/src/Components/UpdateMod.js"],"names":["React","Component","Form","FormGroup","Col","Row","Label","Input","FormText","Button","Alert","Strapi","Editor","EditorState","convertToRaw","ContentState","htmlToDraft","draftToHtml","apiUrl","process","env","API_URL","strapi","NewMod","props","saveChanges","state","application","submission","moddetails","teststeps","trackerid","title","status","errorMessage","successMessage","replace","request","data","query","match","params","modId","setState","setTimeout","console","log","onEditorStateChange","editorState","html","getCurrentContent","_uploadImageCallBack","file","uploadedImages","imageObject","localSrc","URL","createObjectURL","dburl","name","push","Promise","resolve","reject","link","handleTrackerID","event","target","value","handleTitle","handleStatus","onModDetailsStateChange","onTestStepsStateChange","editorState1","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","loadingItems","bind","response","mod","_id","submissions","x","y","contentBlock1","contentState1","marginLeft","marginRight","marginTop","image","uploadCallback","inputAccept","size","offset"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Form, FormGroup, Col, Row, Label, Input, FormText, Button, Alert } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass NewMod extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 ðŸ˜€</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                application: [],\n                submission: [],\n                loadingItems: true,\n                editorState,\n                uploadedImages: [],\n                moddetails: '',\n                teststeps: '',\n                trackerid: '',\n                successMessage: false,\n                errorMessage: false\n            }\n            this._uploadImageCallBack = this._uploadImageCallBack.bind(this);\n        }\n        this.handleTrackerID = this.handleTrackerID.bind(this);\n        this.handleTitle = this.handleTitle.bind(this);\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    mod (id: \"${this.props.match.params.modId}\") {\n                        title\n                        moddetails\n                        trackerid\n                        teststeps\n                        application {\n                            _id\n                            name\n                        }\n                        status\n                        submissions {\n                            _id\n                            file\n                        }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            application: response.data.mod.application._id,\n            submission: response.data.mod.submissions[0].file,\n            trackerid: response.data.mod.trackerid,\n            moddetails: response.data.mod.moddetails,\n            teststeps: response.data.mod.teststeps,\n            title: response.data.mod.title,\n            loadingItems: false\n        });\n        if (this.state.moddetails === null && this.state.teststeps !== null){\n            this.setState({ moddetails: '<p>Input text here</p>'});}\n        if (this.state.teststeps === null) {\n                this.setState({ teststeps: '<p>Input Test Steps here</p>'});\n            }\n        \n        let x = this.state.moddetails.replace(/'''/g, '\"');\n        let y = this.state.teststeps.replace(/'''/g, '\"');\n        let contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n        let contentBlock1 = htmlToDraft(y.replace(/----/g, '\\\\'));\n        if (contentBlock && contentBlock1) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let contentState1 = ContentState.createFromBlockArray(contentBlock1.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            let editorState1 = EditorState.createWithContent(contentState1);\n            this.setState({\n                editorState,\n                editorState1\n            });\n        }\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    saveChanges =  async () => {\n        try {\n            let { application, submission, moddetails, teststeps, trackerid, title, status, errorMessage, successMessage } = this.state;\n            moddetails = moddetails.replace(/\"/g, '\\'\\'\\'');\n            moddetails = moddetails.replace(/\\\\/g, '----');\n            teststeps = teststeps.replace(/\"/g, '\\'\\'\\'');\n            teststeps = teststeps.replace(/\\\\/g, '----');\n            await strapi.request('POST', 'graphql', {\n                data: {\n                    query: `mutation {\n                        updateMods(input: {\n                          where: {\n                            id: \"${this.props.match.params.modId}\"\n                          },\n                          data: {\n                            moddetails: \"${moddetails}\"\n                            teststeps: \"${teststeps}\"\n                            trackerid: \"${trackerid}\"\n                            submissions: \"${submission}\"\n                            title: \"${title}\"\n                            status: ${status}\n                            application: \"${application}\"\n                          }\n                        }) {\n                          mods {\n                            moddetails\n                            teststeps\n                            trackerid\n                            submissions\n                            title\n                            status\n                            application\n                          }\n                        }\n                      }`\n                }\n            });\n            this.setState({\n                successMessage: true\n            })\n            setTimeout(() => {this.setState({ successMessage: false })}, 3000);\n            }catch (err) {\n                console.log(err);\n                this.setState({\n                    errorMessage: true\n                })\n                setTimeout(() => {this.setState({ errorMessage: false })}, 3000);\n            }\n        }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    _uploadImageCallBack = (file) => {\n       // long story short, every time we upload an image, we\n       // need to save it to the state so we can get it's data\n       // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        let { uploadedImages } = this.state;\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n          dburl: `${apiUrl}/uploads/${file.name}`\n        }\n\n        uploadedImages.push(imageObject);\n    \n        this.setState({uploadedImages: uploadedImages})\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n    handleTrackerID = (event) => {\n        this.setState({\n            trackerid: event.target.value\n        })\n        console.log(this.state);\n    }\n\n    handleTitle = (event) => {\n        this.setState({\n            title: event.target.value\n        })\n        console.log(this.state);\n    }\n\n    handleStatus = (event) => {\n        this.setState({\n            status: event.target.value\n        })\n    }\n\n\n    onModDetailsStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    onTestStepsStateChange = (editorState1) => {\n        this.setState({\n            editorState1,\n            teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    render() {\n        let { loadingItems, application, submission, editorState, editorState1, trackerid, title, status, errorMessage, successMessage } = this.state;\n        console.log(this.state);\n        return(\n            <Form style={{marginLeft: '10px', marginRight: '10px', marginTop: '20px'}}>\n                <FormGroup row>\n                    <Label for=\"file\" sm={2}>Submission File #</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name=\"file\" id=\"file\" value={submission} />\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"title\" sm={2}>Title</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name=\"title\" id=\"title\" value={title} onChange={this.handleTitle}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"trackerid\" sm={2}>Tracker ID</Label>\n                    <Col sm={10}>\n                        <Input type=\"trackerid\" name=\"trackerid\" id=\"trackerid\" value={trackerid} onChange={this.handleTrackerID}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"exampleSelect\" sm={2}>Status</Label>\n                    <Col sm={10}>\n                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\" value={status} onChange={this.handleStatus}>\n                        <option>Testable</option>\n                        <option>JIRA</option>\n                        <option>Audit</option>\n                        <option>Complete</option>\n                        <option>Revoked</option>\n                        </Input>\n                    </Col>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"moddetails\" sm={2}>Mod Details</Label>\n                        <Editor \n                            editorState={editorState}\n                            onEditorStateChange={this.onModDetailsStateChange}\n                        />  \n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"teststeps\" sm={2}>Test Steps</Label>\n                        <Editor \n                            editorState={editorState1}\n                            onEditorStateChange={this.onTestStepsStateChange}\n                            toolbar={{\n                                image: { uploadCallback: this._uploadImageCallBack },\n                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                              }}\n                        />\n                </FormGroup>\n                <FormGroup check row>\n                    <Col sm={{ size: 10, offset: 2 }}>\n                        <Button onClick={this.saveChanges}>Submit</Button>\n                    </Col>\n                </FormGroup>\n                {errorMessage &&\n                <Alert color='danger'>Error</Alert>\n                }\n                {successMessage &&\n                <Alert color='success'>Success</Alert>\n                }\n            </Form>\n        );\n    }\n}\n\nexport default NewMod;"]},"metadata":{},"sourceType":"module"}