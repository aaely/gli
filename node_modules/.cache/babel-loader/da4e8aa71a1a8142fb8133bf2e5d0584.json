{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/PieChart.js\";\nimport React, { Component } from 'react';\nimport { Cell, Sector, Pie, PieChart } from 'recharts';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nvar apiUrl = process.env.API_URL || 'http://localhost:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar renderActiveShape = function renderActiveShape(props) {\n  var RADIAN = Math.PI / 180;\n  var cx = props.cx,\n      cy = props.cy,\n      midAngle = props.midAngle,\n      innerRadius = props.innerRadius,\n      outerRadius = props.outerRadius,\n      startAngle = props.startAngle,\n      endAngle = props.endAngle,\n      fill = props.fill,\n      payload = props.payload,\n      percent = props.percent;\n  var sin = Math.sin(-RADIAN * midAngle);\n  var cos = Math.cos(-RADIAN * midAngle);\n  var sx = cx + (outerRadius + 10) * cos;\n  var sy = cy + (outerRadius + 10) * sin;\n  var mx = cx + (outerRadius + 30) * cos;\n  var my = cy + (outerRadius + 30) * sin;\n  var ex = mx + (cos >= 0 ? 1 : -1) * 22;\n  var ey = my;\n  var textAnchor = cos >= 0 ? 'start' : 'end';\n  return React.createElement(\"g\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"text\", {\n    x: cx,\n    y: cy,\n    dy: 8,\n    textAnchor: \"middle\",\n    fill: fill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, payload.name), React.createElement(Sector, {\n    cx: cx,\n    cy: cy,\n    innerRadius: innerRadius,\n    outerRadius: outerRadius,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    fill: fill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(Sector, {\n    cx: cx,\n    cy: cy,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: outerRadius + 6,\n    outerRadius: outerRadius + 10,\n    fill: fill,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(\"path\", {\n    d: \"M\".concat(sx, \",\").concat(sy, \"L\").concat(mx, \",\").concat(my, \"L\").concat(ex, \",\").concat(ey),\n    stroke: fill,\n    fill: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"circle\", {\n    cx: ex,\n    cy: ey,\n    r: 2,\n    fill: fill,\n    stroke: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(\"text\", {\n    x: ex + (cos >= 0 ? 1 : -1) * 12,\n    y: ey,\n    textAnchor: textAnchor,\n    fill: \"#333\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"\".concat(payload.value)), React.createElement(\"text\", {\n    x: ex + (cos >= 0 ? 1 : -1) * 12,\n    y: ey,\n    dy: 18,\n    textAnchor: textAnchor,\n    fill: \"#999\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"\".concat((percent * 100).toFixed(2), \"%\")));\n};\n\nvar MyPieChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyPieChart, _Component);\n\n  function MyPieChart(props) {\n    var _this;\n\n    _classCallCheck(this, MyPieChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyPieChart).call(this, props));\n\n    _this.onPieEnter = function (data, index) {\n      _this.setState({\n        activeIndex: index\n      });\n    };\n\n    _this.state = {\n      auditModsCount: 0,\n      modsCount: 0,\n      testableModsCount: 0,\n      completeModsCount: 0,\n      jiraModsCount: 0,\n      revokedModsCount: 0,\n      activeIndex: 0\n    };\n    return _this;\n  }\n\n  _createClass(MyPieChart, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var response, getMods, i, j;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    submission (id : \\\"\".concat(this.props.submissionId, \"\\\") {\\n                      versions {\\n                          _id\\n                          version\\n                          mods {\\n                              _id\\n                              status\\n                          }\\n                      }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context.sent;\n                getMods = response.data.submission.versions.map(function (a) {\n                  return a.mods;\n                });\n\n                for (i = 0; i < getMods.length; i++) {\n                  j = 0;\n\n                  while (j < getMods[i].length) {\n                    console.log(getMods[i][j]);\n                  }\n                }\n\n                console.log(getMods);\n                this.setState({\n                  loadingItems: false,\n                  auditModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('audit'.toLowerCase());\n                  }).length,\n                  testableModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('testable'.toLowerCase());\n                  }).length,\n                  completeModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('complete'.toLowerCase());\n                  }).length,\n                  jiraModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('jira'.toLowerCase());\n                  }).length,\n                  revokedModsCount: response.data.submission.mods.filter(function (prop) {\n                    return prop.status.toLowerCase().includes('revoked'.toLowerCase());\n                  }).length\n                });\n                console.log(this.state);\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          auditModsCount = _this$state.auditModsCount,\n          completeModsCount = _this$state.completeModsCount,\n          jiraModsCount = _this$state.jiraModsCount,\n          testableModsCount = _this$state.testableModsCount,\n          revokedModsCount = _this$state.revokedModsCount,\n          activeIndex = _this$state.activeIndex;\n      var completeMods = completeModsCount + revokedModsCount;\n      var data = [{\n        name: 'Complete Mods',\n        value: parseInt(\"\".concat(completeMods))\n      }, {\n        name: 'JIRA Mods',\n        value: parseInt(\"\".concat(jiraModsCount))\n      }, {\n        name: 'Audit Mods',\n        value: parseInt(\"\".concat(auditModsCount))\n      }, {\n        name: 'Testable Mods',\n        value: parseInt(\"\".concat(testableModsCount))\n      }];\n      var COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n      return React.createElement(PieChart, {\n        width: 400,\n        height: 400,\n        style: {\n          margin: '0 auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Pie, {\n        activeIndex: activeIndex,\n        activeShape: renderActiveShape,\n        data: data,\n        cx: 200,\n        cy: 200,\n        innerRadius: 60,\n        outerRadius: 80,\n        fill: \"#8884d8\",\n        dataKey: \"value\",\n        onMouseEnter: this.onPieEnter,\n        nameKey: \"name\",\n        paddingAngle: 5,\n        isAnimationActive: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, data.map(function (entry, index) {\n        return React.createElement(Cell, {\n          key: \"slice-\".concat(index),\n          fill: COLORS[index % COLORS.length],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return MyPieChart;\n}(Component);\n\nexport default MyPieChart;","map":{"version":3,"sources":["/home/aely/gli/src/Components/PieChart.js"],"names":["React","Component","Cell","Sector","Pie","PieChart","Strapi","apiUrl","process","env","API_URL","strapi","renderActiveShape","props","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","payload","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","name","value","toFixed","MyPieChart","onPieEnter","data","index","setState","activeIndex","state","auditModsCount","modsCount","testableModsCount","completeModsCount","jiraModsCount","revokedModsCount","request","query","submissionId","response","getMods","submission","versions","map","a","mods","i","length","j","console","log","loadingItems","filter","prop","status","toLowerCase","includes","completeMods","parseInt","COLORS","margin","entry"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Cell, Sector, Pie, PieChart } from 'recharts';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nlet renderActiveShape = (props) => {\n    let RADIAN = Math.PI / 180;\n    let { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,\n        fill, payload, percent } = props;\n    let sin = Math.sin(-RADIAN * midAngle);\n    let cos = Math.cos(-RADIAN * midAngle);\n    let sx = cx + (outerRadius + 10) * cos;\n    let sy = cy + (outerRadius + 10) * sin;\n    let mx = cx + (outerRadius + 30) * cos;\n    let my = cy + (outerRadius + 30) * sin;\n    let ex = mx + (cos >= 0 ? 1 : -1) * 22;\n    let ey = my;\n    let textAnchor = cos >= 0 ? 'start' : 'end';\n  \n    return (\n      <g>\n        <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{payload.name}</text>\n        <Sector\n          cx={cx}\n          cy={cy}\n          innerRadius={innerRadius}\n          outerRadius={outerRadius}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          fill={fill}\n        />\n        <Sector\n          cx={cx}\n          cy={cy}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          innerRadius={outerRadius + 6}\n          outerRadius={outerRadius + 10}\n          fill={fill}\n        />\n        <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\"/>\n        <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\"/>\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#333\">\n          {`${payload.value}`}\n        </text>\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\n          {`${(percent * 100).toFixed(2)}%`}\n        </text>\n      </g>\n    );\n  };\n\nclass MyPieChart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            auditModsCount: 0,\n            modsCount: 0,\n            testableModsCount: 0,\n            completeModsCount: 0,\n            jiraModsCount: 0,\n            revokedModsCount: 0,\n            activeIndex: 0\n        };\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id : \"${this.props.submissionId}\") {\n                      versions {\n                          _id\n                          version\n                          mods {\n                              _id\n                              status\n                          }\n                      }\n                  }\n                }`\n            }\n        }\n        );\n        let getMods = response.data.submission.versions.map(a => {return a.mods});\n        for (let i = 0; i < getMods.length; i++) {\n            let j = 0;\n            while (j < getMods[i].length) {\n                console.log(getMods[i][j]);\n            }\n        }\n        console.log(getMods);\n        this.setState({\n            loadingItems: false,\n            auditModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('audit'.toLowerCase())\n            }).length,\n            testableModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('testable'.toLowerCase())\n            }).length,\n            completeModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('complete'.toLowerCase())\n            }).length,\n            jiraModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('jira'.toLowerCase())\n            }).length,\n            revokedModsCount: response.data.submission.mods.filter(prop => {\n                return prop.status.toLowerCase().includes('revoked'.toLowerCase())\n            }).length\n        });\n        console.log(this.state);\n        } catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    onPieEnter = (data, index) => {\n        this.setState({\n            activeIndex: index,\n        });\n    }\n\n    render() {\n        let { auditModsCount, completeModsCount, jiraModsCount, testableModsCount, revokedModsCount, activeIndex } = this.state;\n        let completeMods = completeModsCount + revokedModsCount;\n        let data = [\n            { name: 'Complete Mods', value: parseInt(`${completeMods}`) },\n            { name: 'JIRA Mods', value: parseInt(`${jiraModsCount}`) },\n            { name: 'Audit Mods', value: parseInt(`${auditModsCount}`) },\n            { name: 'Testable Mods', value: parseInt(`${testableModsCount}`) },\n          ];\n        let COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        return(\n            <PieChart width={400} height={400} style={{margin: '0 auto'}}>\n                    <Pie\n                        activeIndex={activeIndex}\n                        activeShape={renderActiveShape}\n                        data={data}\n                        cx={200}\n                        cy={200}\n                        innerRadius={60}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        onMouseEnter={this.onPieEnter}\n                        nameKey=\"name\"\n                        paddingAngle={5}\n                        isAnimationActive={true}\n                        >\n                            {\n                            data.map((entry, index) => (\n                                <Cell key={`slice-${index}`} fill={COLORS[index % COLORS.length]}/>\n                            ))\n                            }\n                    </Pie>\n                </PieChart>\n        );\n    }\n}\n\nexport default MyPieChart;"]},"metadata":{},"sourceType":"module"}