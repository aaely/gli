{"ast":null,"code":"import _regeneratorRuntime from \"/home/aely/gli/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/aely/gli/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/aely/gli/src/Components/NewSubmission.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Input, Label, FormGroup, Col, Row } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nvar apiUrl = process.env.API_URL || 'http://192.168.0.248:1337';\nvar strapi = new Strapi(apiUrl);\n\nvar NewSubmission =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewSubmission, _Component);\n\n  function NewSubmission(props) {\n    var _this;\n\n    _classCallCheck(this, NewSubmission);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewSubmission).call(this, props));\n\n    _this.handleVersionChange = function (event) {\n      _this.setState({\n        version: event.target.value\n      });\n    };\n\n    _this.handleFileChange = function (event) {\n      _this.setState({\n        file: event.target.value\n      });\n    };\n\n    _this.handleStatusChange = function (event) {\n      _this.setState({\n        status: event.target.value\n      });\n    };\n\n    _this.createVersion =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _this$state, version, application, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this$state = _this.state, version = _this$state.version, application = _this$state.application;\n              _context.next = 4;\n              return strapi.request('POST', '/graphql', {\n                data: {\n                  query: \"mutation {\\n                        createVersions(input: {\\n                            data: {\\n                                version: \\\"\".concat(version, \"\\\"\\n                                application: \\\"\").concat(application, \"\\\"\\n                            }\\n                        }) {\\n                        version {\\n                            _id\\n                            version\\n                            application {\\n                                _id\\n                            }\\n                            }\\n                        }\\n                    }\")\n                }\n              });\n\n            case 4:\n              response = _context.sent;\n\n              _this.setState({\n                version: response.data.createVersions.version._id,\n                versionCreated: true,\n                activeTab: 2\n              });\n\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n              _this.setState({\n                loadingItems: false\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 8]]);\n    }));\n    _this.createSubmission =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this$state2, file, application, status, version, vendors, response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _this$state2 = _this.state, file = _this$state2.file, application = _this$state2.application, status = _this$state2.status, version = _this$state2.version, vendors = _this$state2.vendors;\n              _context2.next = 4;\n              return strapi.request('POST', 'graphql', {\n                data: {\n                  query: \"mutation {\\n                        createSubmissions(input: {\\n                          data: {\\n                            file: \\\"\".concat(file, \"\\\",\\n                            application: \\\"\").concat(application, \"\\\",\\n                            versions: \\\"\").concat(version, \"\\\",\\n                            vendor: \\\"\").concat(vendors, \"\\\"\\n                          }\\n                        }) {\\n                          submission {\\n                            _id\\n                            file\\n                            status\\n                            application {\\n                                _id\\n                            }\\n                            versions {\\n                                _id\\n                            }\\n                          }\\n                        }\\n                      }\")\n                }\n              });\n\n            case 4:\n              response = _context2.sent;\n\n              _this.props.history.push(\"/submission/\".concat(response.data.createSubmissions.submission._id));\n\n              _context2.next = 12;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n\n              _this.setState({\n                loadingItems: false\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[0, 8]]);\n    }));\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      application: _this.props.match.params.applicationId,\n      loadingItems: true,\n      file: '',\n      version: '',\n      status: '',\n      activeTab: 1,\n      versionCreated: false,\n      vendors: []\n    };\n    return _this;\n  }\n\n  _createClass(NewSubmission, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return strapi.request('POST', '/graphql', {\n                  data: {\n                    query: \"query {\\n                    application (id : \\\"\".concat(this.props.match.params.applicationId, \"\\\") {\\n                        vendors {\\n                        _id\\n                      }\\n                  }\\n                }\")\n                  }\n                });\n\n              case 3:\n                response = _context3.sent;\n                this.setState({\n                  vendors: response.data.application.vendors._id\n                });\n                console.log(this.state.vendors);\n                _context3.next = 12;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0);\n                this.setState({\n                  loadingItems: false\n                });\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 8]]);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"toggle\",\n    value: function toggle(tab) {\n      if (this.state.activeTab !== tab) {\n        this.setState({\n          activeTab: tab\n        });\n      }\n    }\n  }, {\n    key: \"renderVersionForm\",\n    value: function renderVersionForm() {\n      var _this$state3 = this.state,\n          application = _this$state3.application,\n          version = _this$state3.version;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Please enter the version number. It cannot be an empty value or this will break.\"), React.createElement(Form, {\n        style: {\n          marginTop: '40px',\n          marginLeft: '20px',\n          marginRight: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"modTitle\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Version\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"title\",\n        id: \"title\",\n        onChange: this.handleVersionChange,\n        value: version,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }))), version !== null && version !== '' && React.createElement(FormGroup, {\n        check: true,\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: 10,\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.createVersion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }, {\n    key: \"renderSubmissionForm\",\n    value: function renderSubmissionForm() {\n      var _this$state4 = this.state,\n          file = _this$state4.file,\n          status = _this$state4.status;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Form, {\n        style: {\n          marginTop: '20px',\n          marginLeft: '20px',\n          marginRight: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"fileNumber\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Submission #\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"text\",\n        name: \"file\",\n        id: \"file\",\n        value: \"\".concat(file),\n        onChange: this.handleFileChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }))), React.createElement(FormGroup, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"statusSelect\",\n        sm: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Col, {\n        sm: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        name: \"select\",\n        id: \"exampleSelect\",\n        onChange: this.handleStatusChange,\n        value: status,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"In Testing\")))), React.createElement(FormGroup, {\n        check: true,\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: 10,\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.createSubmission,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Submit\")))), \"}\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          activeTab = _this$state5.activeTab,\n          versionCreated = _this$state5.versionCreated;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, activeTab === 1 && this.renderVersionForm(), activeTab === 2 && versionCreated === true && this.renderSubmissionForm());\n    }\n  }]);\n\n  return NewSubmission;\n}(Component);\n\nexport default NewSubmission;","map":{"version":3,"sources":["/home/aely/gli/src/Components/NewSubmission.js"],"names":["React","Component","Button","Form","Input","Label","FormGroup","Col","Row","Strapi","apiUrl","process","env","API_URL","strapi","NewSubmission","props","handleVersionChange","event","setState","version","target","value","handleFileChange","file","handleStatusChange","status","createVersion","state","application","request","data","query","response","createVersions","_id","versionCreated","activeTab","console","log","loadingItems","createSubmission","vendors","history","push","createSubmissions","submission","toggle","bind","match","params","applicationId","tab","textAlign","marginTop","marginLeft","marginRight","size","offset","renderVersionForm","renderSubmissionForm"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, Input, Label, FormGroup, Col, Row } from 'reactstrap';\r\nimport Strapi from 'strapi-sdk-javascript/build/main';\r\nconst apiUrl = process.env.API_URL || 'http://192.168.0.248:1337';\r\nconst strapi = new Strapi(apiUrl);\r\n\r\nclass NewSubmission extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n                application: this.props.match.params.applicationId,\r\n                loadingItems: true,\r\n                file: '',\r\n                version: '',\r\n                status: '',\r\n                activeTab: 1,\r\n                versionCreated: false,\r\n                vendors: []\r\n            }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            let response = await strapi.request('POST', '/graphql', {\r\n            data: {\r\n                query: `query {\r\n                    application (id : \"${this.props.match.params.applicationId}\") {\r\n                        vendors {\r\n                        _id\r\n                      }\r\n                  }\r\n                }`\r\n            }\r\n        }\r\n        );\r\n        this.setState({\r\n            vendors: response.data.application.vendors._id,\r\n        });\r\n        console.log(this.state.vendors);\r\n        }catch (err) {\r\n            console.log(err);\r\n            this.setState({ loadingItems: false });\r\n        }\r\n    }\r\n\r\n    toggle(tab) {\r\n        if (this.state.activeTab !== tab) {\r\n          this.setState({\r\n            activeTab: tab\r\n          });\r\n        }\r\n      }\r\n\r\n    handleVersionChange = (event) => {\r\n        this.setState({\r\n            version: event.target.value\r\n        })\r\n    }\r\n\r\n    handleFileChange = (event) => {\r\n        this.setState({\r\n            file: event.target.value\r\n        })\r\n    }\r\n\r\n    handleStatusChange = (event) => {\r\n        this.setState({\r\n            status: event.target.value\r\n        })\r\n    }\r\n\r\n    createVersion = async () => {\r\n        try {\r\n            let { version, application } = this.state;\r\n            let response = await strapi.request('POST', '/graphql', {\r\n                data: {\r\n                    query: `mutation {\r\n                        createVersions(input: {\r\n                            data: {\r\n                                version: \"${version}\"\r\n                                application: \"${application}\"\r\n                            }\r\n                        }) {\r\n                        version {\r\n                            _id\r\n                            version\r\n                            application {\r\n                                _id\r\n                            }\r\n                            }\r\n                        }\r\n                    }`\r\n                }\r\n            });\r\n            this.setState({\r\n                version: response.data.createVersions.version._id,\r\n                versionCreated: true,\r\n                activeTab: 2\r\n            });\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.setState({\r\n                loadingItems: false\r\n            })\r\n        }\r\n    }\r\n\r\n    createSubmission = async () => {\r\n        try {\r\n            let { file, application,  status, version, vendors } = this.state;\r\n            let response = await strapi.request('POST', 'graphql', {\r\n                data: {\r\n                    query: `mutation {\r\n                        createSubmissions(input: {\r\n                          data: {\r\n                            file: \"${file}\",\r\n                            application: \"${application}\",\r\n                            versions: \"${version}\",\r\n                            vendor: \"${vendors}\"\r\n                          }\r\n                        }) {\r\n                          submission {\r\n                            _id\r\n                            file\r\n                            status\r\n                            application {\r\n                                _id\r\n                            }\r\n                            versions {\r\n                                _id\r\n                            }\r\n                          }\r\n                        }\r\n                      }`\r\n                }\r\n            });\r\n            this.props.history.push(`/submission/${response.data.createSubmissions.submission._id}`);\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({ loadingItems: false });\r\n        }\r\n    }\r\n\r\n    renderVersionForm() {\r\n        let { application, version } = this.state;\r\n        return(\r\n            <div>\r\n                <h3 style={{textAlign: 'center'}}>Please enter the version number. It cannot be an empty value or this will break.</h3>\r\n                <Form style={{marginTop: '40px', marginLeft: '20px', marginRight: '20px'}}>\r\n                    <FormGroup row>\r\n                        <Label for=\"modTitle\" sm={2}>Version</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"text\" name=\"title\" id=\"title\" onChange={this.handleVersionChange} value={version} />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    {version !== null && version !== '' && \r\n                    <FormGroup check row>\r\n                        <Col sm={{ size: 10, offset: 2 }}>\r\n                        <Button onClick={this.createVersion}>Submit</Button>\r\n                        </Col>\r\n                    </FormGroup>}\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderSubmissionForm() {\r\n        let { file, status } = this.state;\r\n        return(\r\n            <div>\r\n                <Form style={{marginTop: '20px', marginLeft: '20px', marginRight: '20px'}}>\r\n                    <FormGroup row>\r\n                        <Label for=\"fileNumber\" sm={2}>Submission #</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"text\" name=\"file\" id=\"file\" value={`${file}`} onChange={this.handleFileChange} />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"statusSelect\" sm={2}>Status</Label>\r\n                        <Col sm={10}>\r\n                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\" onChange={this.handleStatusChange} value={status}>\r\n                            <option>In Testing</option>\r\n                        </Input>\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup check row>\r\n                        <Col sm={{ size: 10, offset: 2 }}>\r\n                        <Button onClick={this.createSubmission}>Submit</Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let { activeTab, versionCreated } = this.state;\r\n        return (\r\n            <div>\r\n                {activeTab === 1 &&\r\n                this.renderVersionForm()\r\n                }\r\n                {activeTab === 2 && versionCreated === true &&\r\n                this.renderSubmissionForm()\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewSubmission;"]},"metadata":{},"sourceType":"module"}