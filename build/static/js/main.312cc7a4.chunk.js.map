{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","Components/Loader.js","Components/Jurisdictions.js","Components/Submissions.js","Components/Manufacturers.js","Components/Dashboard.js","Components/propstest.js","Components/PieChart.js","Components/ModsList.js","Components/Submission.js","Components/Navbar.js","Components/Apps.js","Components/Jurisdiction.js","Components/Application.js","Components/Vendors.js","Components/Appwiki.js","Components/UpdateMod.js","Components/NewMod.js","Components/ModRewrites.js","Components/App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Loader","react_default","a","createElement","gestalt_es","position","dangerouslySetInlineStyle","__style","botom","left","transform","react_spinners","color","size","margin","apiUrl","process","API_URL","strapi","Strapi","Jurisdictions","state","loadingItems","jurisdictions","request","data","query","response","this","setState","console","log","_context","t0","_this$state","style","textAlign","map","jurisdiction","number","submissions","b","file","application","name","versions","c","version","Components_Loader","Component","Submissions","searchTerm","handleChange","_ref","value","_this","filteredItems","_ref2","filter","prop","toLowerCase","includes","error","display","justifyContent","marginTop","marginBottom","accessibilityLabel","onChange","placeholder","icon","wrap","backgroundColor","shape","sub","className","key","_id","Object","defineProperty","width","marginRight","marginLeft","height","src","concat","vendor","logo","url","alt","Link","to","Manufacturers","iframe","Dashboard","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","activeTab","tab","_this2","href","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","Components_Manufacturers","Components_Submissions","Components_Jurisdictions","renderActiveShape","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","payload","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","x","y","dy","es6","d","stroke","r","toFixed","MyPieChart","onPieEnter","index","activeIndex","auditModsCount","modsCount","testableModsCount","completeModsCount","jiraModsCount","revokedModsCount","submissionId","getMods","submission","mods","ModsList","i","length","j","push","status","parseInt","COLORS","activeShape","dataKey","onMouseEnter","nameKey","paddingAngle","isAnimationActive","entry","ModList","renderAuditMods","auditMods","modnumber","title","trackerid","jira","testingzip","Collapsible_default","transitionTime","trigger","renderDropDown4","triggerWhenOpen","renderHide","react_draft_wysiwyg","editorState","EditorState","createWithContent","ContentState","createFromBlockArray","htmlToDraft","moddetails","replace","contentBlocks","readOnly","toolbarHidden","renderTestableMods","testableMods","renderJiraMods","jiraMods","contentBlock","contentState","html","sort","index_esm","renderDropDown3","renderMods","renderDropDown5","renderDropDown6","renderDropDown7","pdfjs","GlobalWorkerOptions","workerSrc","Submission","onEditorStateChange","draftToHtml","convertToRaw","getCurrentContent","onDocumentLoadSuccess","numPages","changePage","offset","prevState","pageNumber","previousPage","nextPage","tableOfContents","onItemClick","removeTextLayerOffset","document","querySelectorAll","forEach","layer","top","renderURNs","urns","type","disabled","dist_entry","onLoadSuccess","vendorId","uploadedImages","match","params","_this$state2","renderDropDown1","jurs","renderDropDown2","PieChart","Components_ModsList","Navbar","alignItems","padding","es_NavLink","activeClassName","fontSize","exact","naturalHeight","naturalWidth","Apps","applications","app","vendors","marginBotom","properties","Jurisdiction","approvalstatuses","jurisdictionId","Vendors","saveChanges","asyncToGenerator","regenerator_default","mark","_callee","prev","next","successMessage","setTimeout","errorMessage","stop","_uploadImageCallBack","imageObject","localSrc","URL","createObjectURL","dburl","Promise","reject","link","applicationId","howto","_context2","flexWrap","direction","toolbar","image","uploadCallback","inputAccept","borderRadius","Alert","Appwiki","NewMod","rewrite","teststeps","modId","history","goBack","handleTrackerID","event","target","handleTitle","handleStatus","handleRewrite","onModDetailsStateChange","onTestStepsStateChange","editorState1","mod","contentBlock1","contentState1","Form","FormGroup","row","Label","for","sm","Col","Input","check","Button","ModRewrites","App","BrowserRouter","Fragment","Components_Navbar","Switch","Route","component","path","Applications","Application","UpdateMod","Boolean","window","location","hostname","navigator","serviceWorker","ready","then","registration","unregister","ReactDOM","render","Components_App","getElementById"],"mappings":"2EAAA,SAAAA,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAS,GAAA,0dCiBeC,EArBA,WACX,OACAC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAC,SAAS,QACTC,0BAA2B,CACvBC,QAAS,CACLC,MAAO,IACPC,KAAM,MACNC,UAAW,sBAInBT,EAAAC,EAAAC,cAACQ,EAAA,WAAD,CACAC,MAAM,QACNC,KAAQ,IACRC,OAAS,UCfPC,EAASC,8CAAYC,SAAW,wBAChCC,EAAS,IAAIC,IAAOJ,GAmFXK,6MAhFXC,MAAQ,CACJC,cAAc,EACdC,cAAe,8NAMYL,EAAOM,QAAQ,OAAQ,WAAY,CAC1DC,KAAM,CACFC,MAAK,+lBAFHC,SAwBVC,KAAKC,SAAS,CACVN,cAAeI,EAASF,KAAKF,cAC7BD,cAAc,IAElBQ,QAAQC,IAAIH,KAAKP,uDAEbS,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAe7B,IAAAY,EACiCN,KAAKP,MAArCE,EADDW,EACCX,cAAeD,EADhBY,EACgBZ,aACrB,OACIrB,EAAAC,EAAAC,cAAA,OAAKgC,MAAO,CAACC,UAAW,WACnBb,EAAcc,IAAI,SAAAnC,GACnB,OAAQD,EAAAC,EAAAC,cAAA,SACRF,EAAAC,EAAAC,cAAA,UAAKD,EAAEoC,aAAP,KAAuBpC,EAAEqC,OAAzB,KADQ,IAC+BtC,EAAAC,EAAAC,cAAA,WACvCF,EAAAC,EAAAC,cAAA,6BAAqBD,EAAEoC,cACtBpC,EAAEsC,YAAYH,IAAI,SAAAI,GACf,OACIxC,EAAAC,EAAAC,cAAA,SAAIsC,EAAEC,KAAN,IAAYzC,EAAAC,EAAAC,cAAA,WACXsC,EAAEE,YAAYC,KADf,IACsBH,EAAEI,SAASR,IAAI,SAAAS,GACjC,OACI7C,EAAAC,EAAAC,cAAA,YAAO2C,EAAEC,iBAOxBzB,GAAgBrB,EAAAC,EAAAC,cAAC6C,EAAD,cA3ELC,+BCKtBlC,EAASC,8CAAYC,SAAW,wBAChCC,EAAS,IAAIC,IAAOJ,GAyIXmC,6MAtIX7B,MAAQ,CACJmB,YAAa,GACbW,WAAY,GACZ7B,cAAc,KAoDlB8B,aAAe,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACdC,EAAK1B,SAAS,CAAEsB,WAAYG,OAGhCE,cAAgB,SAAAC,GAAiC,IAA9BN,EAA8BM,EAA9BN,WACf,OAD6CM,EAAlBjB,YACRkB,OAAO,SAAAC,GACtB,OAAOA,EAAKjB,KAAKkB,cAAcC,SAASV,EAAWS,gBAAkBD,EAAKhB,YAAYC,KAAKgB,cAAcC,SAASV,EAAWS,4OArDtG1C,EAAOM,QAAQ,OAAQ,WAAY,CACtDC,KAAM,CACFC,MAAK,2jCAFPC,SAkCNG,QAAQC,IAAIJ,GACZC,KAAKC,SAAS,CACVW,YAAab,EAASF,KAAKe,YAE3BlB,cAAc,IAElBQ,QAAQC,IAAIH,KAAKP,MAAMmB,6DAEvBV,QAAQgC,MAAR9B,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAc7B,IAAAY,EAC8BN,KAAKP,MAAlCC,EADDY,EACCZ,aAAc6B,EADfjB,EACeiB,WACpB,OACAlD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACQH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2D,QAAQ,OAAOC,eAAe,SAASC,UAAW,EAAGC,aAAc,GACxEjE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAL,GAAG,cACHoE,mBAAmB,qBACnBC,SAAUxC,KAAKwB,aACfiB,YAAY,4BACZf,MAAOH,IAEPlD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAU,OAAQ,GAEJb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAkE,KAAK,SACL1D,MAAOuC,EAAa,SAAW,OAC/BtC,KAAM,GACNsD,mBAAmB,aAIvBlE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKmE,MAAI,EAACR,QAAS,OACnBC,eAAe,SACf1D,0BAA2B,CACvBC,QAAS,CACLiE,gBAAiB,YAGzBC,MAAO,WAEV7C,KAAK4B,cAAc5B,KAAKP,OAAOgB,IAAI,SAAAqC,GAEhC,OADA5C,QAAQC,IAAI2C,GAERzE,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OAAOC,IAAKF,EAAIG,IAAK1C,MAAK2C,OAAAC,EAAA,EAAAD,CAAA,CAAGb,UAAW,OAAQe,MAAO,OAAQjB,QAAS,eAAgBkB,YAAa,MAAOC,WAAY,OAA9F,UAA8G,gBACvJjF,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,aAAaxC,MAAO,CAACC,UAAW,WAAYsC,EAAIhC,MAC/DzC,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,aAAaxC,MAAO,CAACgD,OAAQ,MAAOH,MAAO,QACtD/E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOgF,IAAG,GAAAC,OAAKtE,GAALsE,OAAcX,EAAIY,OAAOC,KAAKC,KAAOC,IAAG,GAAAJ,OAAKX,EAAIY,OAAOC,KAAKV,KAAOF,UAAU,cAAcxC,MAAO,CAAC6C,MAAO,MAAOG,OAAQ,UAExIlF,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,eAAexC,MAAO,CAACqC,gBAAgB,YAClDvE,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,2BAAkBF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMf,UAAU,QAAQxC,MAAO,CAACvB,MAAO,WAAY+E,GAAE,iBAAAN,OAAmBX,EAAIY,OAAOT,MAAQH,EAAIY,OAAO1C,OACxH3C,EAAAC,EAAAC,cAAA,2BAAkBF,EAAAC,EAAAC,cAAA,WAAOuE,EAAInD,cAAcc,IAAI,SAAAnC,GAC3C,OACID,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,SAChB1E,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMvD,MAAO,CAACvB,MAAO,UAAU+E,GAAE,iBAAAN,OAAmBnF,EAAE2E,MAAQ3E,EAAEoC,aAAhE,IAA+E,WAHvF,KAOArC,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMf,UAAU,QAAQxC,MAAO,CAACvB,MAAO,WAAY+E,GAAE,gBAAAN,OAAkBX,EAAI/B,YAAYkC,MAAQH,EAAI/B,YAAYC,OAC/H3C,EAAAC,EAAAC,cAAA,qBAAauE,EAAI7B,SAASR,IAAI,SAAAnC,GAC1B,OACID,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,QAAQxC,MAAO,CAACvB,MAAO,WAAYV,EAAE6C,aAIjE9C,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,cAAcxC,MAAO,CAACC,UAAW,SAAUoC,gBAAgB,YACtEvE,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,eAAAN,OAAiBX,EAAIG,MAAQH,EAAIhC,UAIpDpB,GAAgBrB,EAAAC,EAAAC,cAAC6C,EAAD,eAhIHC,sBCFpBlC,EAASC,8CAAYC,SAAW,wBAoJvB2E,GAnJA,IAAIzE,IAAOJ,oLAsElB,OACAd,EAAAC,EAAAC,cAAA,WA+DYF,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAQL,IAAI,kHACZR,MAAM,OACNG,OAAO,OACPpF,GAAG,OACH4E,UAAU,cACVZ,QAAQ,UACR1D,SAAS,qBA1ID4C,cCuDb6C,cA/Db,SAAAA,EAAYC,GAAO,IAAAxC,EAAA,OAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAAkE,IACjBvC,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAgB,GAAAK,KAAAvE,KAAMmE,KAEDK,OAAS7C,EAAK6C,OAAOC,KAAZvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAvB,KACdA,EAAKlC,MAAQ,CACXkF,UAAW,KALIhD,sEASZiD,GACD5E,KAAKP,MAAMkF,YAAcC,GAC3B5E,KAAKC,SAAS,CACZ0E,UAAWC,qCAKR,IAAAC,EAAA7E,KACP,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGgC,MAAO,CAAEqC,gBAAiB,QAAS5D,MAAO,QAASwB,UAAW,WAAWnC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAK,oGAAR,oBAChFzG,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CAAKC,MAAI,EAACzE,MAAO,CAACqC,gBAAiB,QAAS5D,MAAO,QAASqD,UAAW,MAAOC,aAAc,QAC1FjE,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,KACE5G,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,CACEnC,UAAWoC,IAAW,CAAEC,OAAiC,MAAzBpF,KAAKP,MAAMkF,YAC3CU,QAAS,WAAQR,EAAKL,OAAO,OAF/B,iBAOFnG,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,KACE5G,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,CACEnC,UAAWoC,IAAW,CAAEC,OAAiC,MAAzBpF,KAAKP,MAAMkF,YAC3CU,QAAS,WAAQR,EAAKL,OAAO,OAF/B,2BAOFnG,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,KACE5G,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,CACAnC,UAAWoC,IAAW,CAAEC,OAAiC,MAAzBpF,KAAKP,MAAMkF,YAC3CU,QAAS,WAAQR,EAAKL,OAAO,OAF7B,mBAQJnG,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAYX,UAAW3E,KAAKP,MAAMkF,WAChCtG,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAASC,MAAM,KACbnH,EAAAC,EAAAC,cAACkH,EAAD,OAEFpH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAASC,MAAM,KACbnH,EAAAC,EAAAC,cAACmH,EAAD,OAEFrH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAASC,MAAM,KACbnH,EAAAC,EAAAC,cAACoH,EAAD,gBAxDYtE,gBCLLA,mBCCblC,EAASC,8CAAYC,SAAW,wBAChCC,EAAS,IAAIC,IAAOJ,GAEtByG,EAAoB,SAACzB,GACrB,IAAI0B,EAASC,KAAKC,GAAK,IACjBC,EACyB7B,EADzB6B,GAAIC,EACqB9B,EADrB8B,GAAIC,EACiB/B,EADjB+B,SAAUC,EACOhC,EADPgC,YAAaC,EACNjC,EADMiC,YAAaC,EACnBlC,EADmBkC,WAAYC,EAC/BnC,EAD+BmC,SAC1DC,EAA2BpC,EAA3BoC,KAAMC,EAAqBrC,EAArBqC,QAASC,EAAYtC,EAAZsC,QACfC,EAAMZ,KAAKY,KAAKb,EAASK,GACzBS,EAAMb,KAAKa,KAAKd,EAASK,GACzBU,EAAKZ,GAAMI,EAAc,IAAMO,EAC/BE,EAAKZ,GAAMG,EAAc,IAAMM,EAC/BI,EAAKd,GAAMI,EAAc,IAAMO,EAC/BI,EAAKd,GAAMG,EAAc,IAAMM,EAC/BM,EAAKF,EAA2B,IAArBH,GAAO,EAAI,GAAK,GAC3BM,EAAKF,EACLG,EAAaP,GAAO,EAAI,QAAU,MAEtC,OACEtI,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAM4I,EAAGnB,EAAIoB,EAAGnB,EAAIoB,GAAI,EAAGH,WAAW,SAASX,KAAMA,GAAOC,EAAQxF,MACpE3C,EAAAC,EAAAC,cAAC+I,EAAA,EAAD,CACEtB,GAAIA,EACJC,GAAIA,EACJE,YAAaA,EACbC,YAAaA,EACbC,WAAYA,EACZC,SAAUA,EACVC,KAAMA,IAERlI,EAAAC,EAAAC,cAAC+I,EAAA,EAAD,CACEtB,GAAIA,EACJC,GAAIA,EACJI,WAAYA,EACZC,SAAUA,EACVH,YAAaC,EAAc,EAC3BA,YAAaA,EAAc,GAC3BG,KAAMA,IAERlI,EAAAC,EAAAC,cAAA,QAAMgJ,EAAC,IAAA9D,OAAMmD,EAAN,KAAAnD,OAAYoD,EAAZ,KAAApD,OAAkBqD,EAAlB,KAAArD,OAAwBsD,EAAxB,KAAAtD,OAA8BuD,EAA9B,KAAAvD,OAAoCwD,GAAMO,OAAQjB,EAAMA,KAAK,SACpElI,EAAAC,EAAAC,cAAA,UAAQyH,GAAIgB,EAAIf,GAAIgB,EAAIQ,EAAG,EAAGlB,KAAMA,EAAMiB,OAAO,SACjDnJ,EAAAC,EAAAC,cAAA,QAAM4I,EAAGH,EAA2B,IAArBL,GAAO,EAAI,GAAK,GAASS,EAAGH,EAAIC,WAAYA,EAAYX,KAAK,QAA5E,GAAA9C,OACM+C,EAAQ9E,QAEdrD,EAAAC,EAAAC,cAAA,QAAM4I,EAAGH,EAA2B,IAArBL,GAAO,EAAI,GAAK,GAASS,EAAGH,EAAII,GAAI,GAAIH,WAAYA,EAAYX,KAAK,QAApF,GAAA9C,QACiB,IAAVgD,GAAeiB,QAAQ,GAD9B,QAuHOC,cA9GX,SAAAA,EAAYxD,GAAO,IAAAxC,EAAA,OAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAA2H,IACfhG,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAyE,GAAApD,KAAAvE,KAAMmE,KAiEVyD,WAAa,SAAC/H,EAAMgI,GAChBlG,EAAK1B,SAAS,CACV6H,YAAaD,KAlEjBlG,EAAKlC,MAAQ,CACTsI,eAAgB,EAChBC,UAAW,EACXC,kBAAmB,EACnBC,kBAAmB,EACnBC,cAAe,EACfC,iBAAkB,EAClBN,YAAa,GATFnG,kOAeUrC,EAAOM,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACFC,MAAK,kDAAA2D,OACmBzD,KAAKmE,MAAMkE,aAD9B,+TAiBb,IAnBQtI,SAiBJuI,EAAUvI,EAASF,KAAK0I,WAAWtH,SAASR,IAAI,SAAAnC,GAAM,OAAOA,EAAEkK,OAC/DC,EAAW,GACNC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAEhC,IADIE,EAAI,EACDA,EAAIN,EAAQI,GAAGC,QAClBF,EAASI,KAAKP,EAAQI,GAAGE,IACzBA,IAGR5I,KAAKC,SAAS,CACVP,cAAc,EACdqI,eAAgBU,EAAS3G,OAAO,SAAAC,GAC5B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,QAAQD,iBACnD2G,OACHV,kBAAmBQ,EAAS3G,OAAO,SAAAC,GAC/B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,WAAWD,iBACtD2G,OACHT,kBAAmBO,EAAS3G,OAAO,SAAAC,GAC/B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,WAAWD,iBACtD2G,OACHR,cAAeM,EAAS3G,OAAO,SAAAC,GAC3B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,OAAOD,iBAClD2G,OACHP,iBAAkBK,EAAS3G,OAAO,SAAAC,GAC9B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,UAAUD,iBACrD2G,SAEPzI,QAAQC,IAAIH,KAAKP,yDAEbS,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,iJAU7B,IAAAY,EACwGN,KAAKP,MAA5GsI,EADDzH,EACCyH,eAAgBG,EADjB5H,EACiB4H,kBAAmBC,EADpC7H,EACoC6H,cAAeF,EADnD3H,EACmD2H,kBAAmBG,EADtE9H,EACsE8H,iBAAkBN,EADxFxH,EACwFwH,YAEzFjI,EAAO,CACP,CAAEmB,KAAM,gBAAiBU,MAAOqH,SAAQ,GAAAtF,OAFzByE,EAAoBE,KAGnC,CAAEpH,KAAM,YAAaU,MAAOqH,SAAQ,GAAAtF,OAAI0E,KACxC,CAAEnH,KAAM,aAAcU,MAAOqH,SAAQ,GAAAtF,OAAIsE,KACzC,CAAE/G,KAAM,gBAAiBU,MAAOqH,SAAQ,GAAAtF,OAAIwE,MAE5Ce,EAAS,CAAC,UAAW,UAAW,UAAW,WAC/C,OACI3K,EAAAC,EAAAC,cAAC+I,EAAA,EAAD,CAAUlE,MAAO,IAAKG,OAAQ,IAAKhD,MAAO,CAACrB,OAAQ,WAC3Cb,EAAAC,EAAAC,cAAC+I,EAAA,EAAD,CACIQ,YAAaA,EACbmB,YAAarD,EACb/F,KAAMA,EACNmG,GAAI,IACJC,GAAI,IACJE,YAAa,GACbC,YAAa,GACbG,KAAK,UACL2C,QAAQ,QACRC,aAAcnJ,KAAK4H,WACnBwB,QAAQ,OACRC,aAAc,EACdC,mBAAmB,GAGfzJ,EAAKY,IAAI,SAAC8I,EAAO1B,GAAR,OACLxJ,EAAAC,EAAAC,cAAC+I,EAAA,EAAD,CAAMtE,IAAG,SAAAS,OAAWoE,GAAStB,KAAMyC,EAAOnB,EAAQmB,EAAOL,qBAvGhEtH,sGC3CnBlC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAgYXqK,eA5XX,SAAAA,EAAYrF,GAAO,IAAAxC,EAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAAwJ,IACf7H,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAsG,GAAAjF,KAAAvE,KAAMmE,KAyJVsF,gBAAkB,WAAM,IAEhBC,EADW/H,EAAKlC,MAAd+I,KACe1G,OAAO,SAAAC,GACxB,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,QAAQD,iBAGtD,OACI3D,EAAAC,EAAAC,cAAA,WACKmL,EAAUjJ,IAAI,SAAA0G,GACf,OACI9I,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OAAOC,IAAKmE,EAAElE,IAAK1C,MAAO,CAAC8B,UAAW,OAAQO,gBAAiB,SAC9EvE,EAAAC,EAAAC,cAAA,iBAAS4I,EAAEwC,WACXtL,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACvB,MAAO,YAAamI,EAAEyC,OAClCvL,EAAAC,EAAAC,cAAA,UAAK4I,EAAE0C,WACPxL,EAAAC,EAAAC,cAAA,6BAAqB4I,EAAE2B,QACZ,MAAV3B,EAAE2C,MACCzL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAMqC,EAAE2C,MAAX,SAGS,MAAhB3C,EAAE4C,YACC1L,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAI,GAAArB,OAAKtE,IAALsE,OAAc0D,EAAE4C,WAAWnG,KAAOrD,MAAO,CAACqC,gBAAiB,QAAS5D,MAAO,wBAAlF,+BAGRX,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASvI,EAAKwI,kBACdC,gBAAiBzI,EAAK0I,cAElBhM,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACAC,YAAaC,cAAYC,kBAAkBC,eAAaC,qBAAqBC,IAAYzD,EAAE0D,WAAWC,QAAQ,OAAQ,MAAMC,gBAC5HC,SAAS,OACTC,cAAc,eA3LftJ,EAqMnBuJ,mBAAqB,WAAM,IAEnBC,EADWxJ,EAAKlC,MAAd+I,KACkB1G,OAAO,SAAAC,GAC3B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,WAAWD,iBAEzD,OACI3D,EAAAC,EAAAC,cAAA,WACK4M,EAAa1K,IAAI,SAAA0G,GAClB,OACI9I,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OAAOC,IAAKmE,EAAElE,IAAK1C,MAAO,CAAC8B,UAAW,OAAQO,gBAAiB,SAC9EvE,EAAAC,EAAAC,cAAA,iBAAS4I,EAAEwC,WACXtL,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACvB,MAAO,YAAamI,EAAEyC,OAClCvL,EAAAC,EAAAC,cAAA,UAAK4I,EAAE0C,WACPxL,EAAAC,EAAAC,cAAA,6BAAqB4I,EAAE2B,QACZ,MAAV3B,EAAE2C,MACCzL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAMqC,EAAE2C,MAAX,SAGS,MAAhB3C,EAAE4C,YACC1L,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAI,GAAArB,OAAKtE,IAALsE,OAAc0D,EAAE4C,WAAWnG,KAAOrD,MAAO,CAACqC,gBAAiB,QAAS5D,MAAO,wBAAlF,+BAGRX,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASvI,EAAKwI,kBACdC,gBAAiBzI,EAAK0I,cAElBhM,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACAC,YAAaC,cAAYC,kBAAkBC,eAAaC,qBAAqBC,IAAYzD,EAAE0D,WAAWC,QAAQ,OAAQ,MAAMC,gBAC5HC,SAAS,OACTC,cAAc,eArOftJ,EA+OnByJ,eAAiB,WAAM,IAEfC,EADW1J,EAAKlC,MAAd+I,KACc1G,OAAO,SAAAC,GACvB,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,OAAOD,iBAErD,OACI3D,EAAAC,EAAAC,cAAA,WACK8M,EAAS5K,IAAI,SAAA0G,GACd,OACI9I,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OAAOC,IAAKmE,EAAElE,IAAK1C,MAAO,CAAC8B,UAAW,OAAQO,gBAAiB,SAC9EvE,EAAAC,EAAAC,cAAA,iBAAS4I,EAAEwC,WACXtL,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACvB,MAAO,YAAamI,EAAEyC,OAClCvL,EAAAC,EAAAC,cAAA,UAAK4I,EAAE0C,WACPxL,EAAAC,EAAAC,cAAA,6BAAqB4I,EAAE2B,QACZ,MAAV3B,EAAE2C,MACCzL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAMqC,EAAE2C,MAAX,SAGS,MAAhB3C,EAAE4C,YACC1L,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAI,GAAArB,OAAKtE,IAALsE,OAAc0D,EAAE4C,WAAWnG,KAAOrD,MAAO,CAACqC,gBAAiB,QAAS5D,MAAO,wBAAlF,+BAGRX,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASvI,EAAKwI,kBACdC,gBAAiBzI,EAAK0I,cAElBhM,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACAC,YAAaC,cAAYC,kBAAkBC,eAAaC,qBAAqBC,IAAYzD,EAAE0D,WAAWC,QAAQ,OAAQ,MAAMC,gBAC5HC,SAAS,OACTC,cAAc,eA7Q9B,IACIK,EAAeV,IADR,oCAEX,GAAIU,EAAc,CACd,IAAIC,EAAeb,eAAaC,qBAAqBW,EAAaP,eAC9DR,EAAcC,cAAYC,kBAAkBc,GAChD5J,EAAKlC,MAAQ,CACTC,cAAc,EACd6I,WAAY,GACZC,KAAM,GACNzH,YAAa,GACbyK,KAAM,GACNjB,cACAxC,eAAgB,EAChBC,UAAW,EACXC,kBAAmB,EACnBC,kBAAmB,EACnBC,cAAe,EACfC,iBAAkB,GAnBX,OAAAzG,kOA0BUrC,GAAOM,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACFC,MAAK,kDAAA2D,OACmBzD,KAAKmE,MAAMkE,aAD9B,u6CAmDb,IArDQtI,SAmDJuI,EAAUvI,EAASF,KAAK0I,WAAWtH,SAASR,IAAI,SAAAnC,GAAM,OAAOA,EAAEkK,KAAKiD,KAAK,SAACnN,EAAGuC,GAAJ,OAAWvC,EAAEqL,UAAY9I,EAAE8I,cACpGlB,EAAW,GACNC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAEhC,IADIE,EAAI,EACDA,EAAIN,EAAQI,GAAGC,QAClBF,EAASI,KAAKP,EAAQI,GAAGE,IACzBA,IAGR1I,QAAQC,IAAIsI,GACZzI,KAAKC,SAAS,CACVsI,WAAYxI,EAASF,KAAK0I,WAAWzH,KACrCpB,cAAc,EACd8I,KAAMC,EACN1H,YAAahB,EAASF,KAAK0I,WAAWxH,YACtCiH,UAAWS,EAASE,OACpBZ,eAAgBU,EAAS3G,OAAO,SAAAC,GAC5B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,QAAQD,iBACnD2G,OACHV,kBAAmBQ,EAAS3G,OAAO,SAAAC,GAC/B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,WAAWD,iBACtD2G,OACHT,kBAAmBO,EAAS3G,OAAO,SAAAC,GAC/B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,WAAWD,iBACtD2G,OACHR,cAAeM,EAAS3G,OAAO,SAAAC,GAC3B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,OAAOD,iBAClD2G,OACHP,iBAAkBK,EAAS3G,OAAO,SAAAC,GAC9B,OAAOA,EAAK+G,OAAO9G,cAAcC,SAAS,UAAUD,iBACrD2G,SAEPzI,QAAQC,IAAIH,KAAKP,yDAEbS,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,qJAIzB,IAAAmF,EAAA7E,KACHwI,EAASxI,KAAKP,MAAd+I,KAEN,OADAA,EAAOA,EAAKiD,KAAK,SAACnN,EAAGuC,GAAJ,OAAWvC,EAAEqL,UAAY9I,EAAE8I,aAEvClJ,IAAI,SAAC0G,EAAGU,GACb,OACIxJ,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OAAOC,IAAKmE,EAAElE,IAAK1C,MAAO,CAAC8B,UAAW,OAAQO,gBAAiB,SAC1EvE,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,cAAAN,OAAgB0D,EAAElE,MAAO5E,EAAAC,EAAAC,cAACmN,GAAA,EAAD,QACrCrN,EAAAC,EAAAC,cAAA,iBAASsJ,EAAQ,GACjBxJ,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACvB,MAAO,YAAamI,EAAEyC,OAClCvL,EAAAC,EAAAC,cAAA,UAAK4I,EAAE0C,WACPxL,EAAAC,EAAAC,cAAA,6BAAqB4I,EAAE2B,QACZ,MAAV3B,EAAE2C,MACCzL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAMqC,EAAE2C,KAAMvJ,MAAO,CAACqC,gBAAiB,QAAS5D,MAAO,WAA1D,SAGS,MAAhBmI,EAAE4C,YACC1L,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGuG,KAAI,GAAArB,OAAKtE,IAALsE,OAAc0D,EAAE4C,WAAWnG,KAAOrD,MAAO,CAACqC,gBAAiB,QAAS5D,MAAO,wBAAlF,+BAGRX,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASrF,EAAKsF,kBACdC,gBAAiBvF,EAAKwF,cAElBhM,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACAC,YAAaC,cAAYC,kBAAkBC,eAAaC,qBAAqBC,IAAYzD,EAAE0D,WAAWC,QAAQ,OAAQ,MAAMC,gBAC5HC,SAAS,OACTC,cAAc,uDAuIZ,IACRjD,EAAchI,KAAKP,MAAnBuI,UACN,OACI3J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,WACaiF,EADb,+CAOJ,OACI3J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,sDAMU,IACRgF,EAAmB/H,KAAKP,MAAxBsI,eACN,OACI1J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,kBACoBgF,EADpB,+CAMU,IACRE,EAAsBjI,KAAKP,MAA3BwI,kBACN,OACI5J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,mBACqBkF,EADrB,+CAMU,IACRE,EAAkBnI,KAAKP,MAAvB0I,cACN,OACI9J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,mBACqBoF,EADrB,0CAOJ,OACI9J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,yCAMC,IACCrD,EAAiBM,KAAKP,MAAtBC,aACN,OACIrB,EAAAC,EAAAC,cAAA,YACsB,IAAjBmB,GACDrB,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASlK,KAAK2L,kBACdvB,gBAAiBpK,KAAKqK,cAEjBrK,KAAK4L,eAEQ,IAAjBlM,GACDrB,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASlK,KAAK6L,kBACdzB,gBAAiBpK,KAAKqK,cAEjBrK,KAAKyJ,oBAEQ,IAAjB/J,GACDrB,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASlK,KAAK8L,kBACd1B,gBAAiBpK,KAAKqK,cAEjBrK,KAAKkL,uBAEQ,IAAjBxL,GACDrB,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASlK,KAAK+L,kBACd3B,gBAAiBpK,KAAKqK,cAEjBrK,KAAKoL,kBAEV/M,EAAAC,EAAAC,cAAA,KAAGgC,MAAO,CAAC8B,UAAW,UACtBhE,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,oBACf1E,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMvD,MAAO,CAACqC,gBAAiB,QAASG,UAAU,yBAAyBgB,GAAE,WAAAN,OAAazD,KAAKmE,MAAMkE,eACjGhK,EAAAC,EAAAC,cAAA,KAAGwE,UAAU,iBAAiBxC,MAAO,CAACvB,MAAO,qBAA7C,iBAtXEqC,aCCtB2K,QAAMC,oBAAoBC,UAA1B,2CAAAzI,OAAiFuI,QAAM7K,QAAvF,kBACA,IAAMhC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAsQXgN,eAlQX,SAAAA,EAAYhI,GAAO,IAAAxC,EAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAAmM,IACfxK,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAiJ,GAAA5H,KAAAvE,KAAMmE,KAsGViI,oBAAsB,SAAC7B,GACnB5I,EAAK1B,SAAS,CACVsK,cACAiB,KAAMa,KAAYC,uBAAa/B,EAAYgC,sBAAsBzB,QAAQ,QAAS,OA1GvEnJ,EAgJnB6K,sBAAwB,SAAA/K,GAAkB,IAAfgL,EAAehL,EAAfgL,SACvB9K,EAAK1B,SAAS,CAAEwM,cAjJD9K,EAoJjB+K,WAAa,SAAAC,GAAM,OAAIhL,EAAK1B,SAAS,SAAA2M,GAAS,MAAK,CACjDC,WAAYD,EAAUC,WAAaF,MArJpBhL,EAwJjBmL,aAAe,kBAAMnL,EAAK+K,YAAY,IAxJrB/K,EA0JjBoL,SAAW,kBAAMpL,EAAK+K,WAAW,IA1JhB/K,EA4JjBqL,gBAAkB,kBAAMrL,EAAK1B,SAAS,CAAE4M,WAAY,KA5JnClL,EA8JjBsL,YAAc,SAAApL,GAAA,IAAGgL,EAAHhL,EAAGgL,WAAH,OAAoBlL,EAAK1B,SAAS,CAAE4M,WAAYA,KA9J7ClL,EAiKjBuL,sBAAwB,WACHC,SAASC,iBAAiB,iCAChCC,QAAQ,SAAAC,GAAS,IAClB/M,EAAU+M,EAAV/M,MACRA,EAAMgN,IAAM,IACZhN,EAAM1B,KAAO,IACb0B,EAAMzB,UAAY,MAvKP6C,EA2KjB6L,WAAa,WAAM,IAAAlN,EACsBqB,EAAKlC,MAApCgO,EADSnN,EACTmN,KAAMZ,EADGvM,EACHuM,WAAYJ,EADTnM,EACSmM,SACxB,OACEpO,EAAAC,EAAAC,cAAA,WACKkP,EAAKhN,IAAI,SAAAnC,GACN,OACID,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iBAASsO,IAAeJ,EAAW,EAAI,MAAvC,OAAkDA,GAAY,MAC9DpO,EAAAC,EAAAC,cAAA,UACAmP,KAAK,SACLC,SAAUd,GAAc,EACxBxH,QAAS1D,EAAKmL,cAHd,QAOAzO,EAAAC,EAAAC,cAAA,UACAmP,KAAK,SACLC,SAAUd,GAAcJ,EACxBpH,QAAS1D,EAAKoL,UAHd,QAOA1O,EAAAC,EAAAC,cAAA,UACAmP,KAAK,SACLrI,QAAS1D,EAAKqL,iBAFd,qBAMA3O,EAAAC,EAAAC,cAACqP,EAAA,SAAD,CACA9M,KAAI,GAAA2C,OAAKtE,IAALsE,OAAcnF,EAAEsF,KACpBb,UAAU,SACV8K,cAAelM,EAAK6K,sBACpBS,YAAatL,EAAKsL,aAEd5O,EAAAC,EAAAC,cAACqP,EAAA,KAAD,CAAMf,WAAYA,EAAYgB,cAAelM,EAAKuL,8BA3M1E,IACI5B,EAAeV,IADR,oCAEX,GAAIU,EAAc,CACd,IAAIC,EAAeb,eAAaC,qBAAqBW,EAAaP,eAC9DR,EAAcC,cAAYC,kBAAkBc,GAChD5J,EAAKlC,MAAQ,CACTC,cAAc,EACd6I,WAAY,GACZ5I,cAAe,GACf+D,OAAQ,GACRoK,SAAU,GACVrB,SAAU,KACVI,WAAY,EACZY,KAAM,GACNjF,KAAM,GACNzH,YAAa,GACbE,SAAU,GACVuK,KAAM,GACNjB,cACAwD,eAAgB,GAChBhG,eAAgB,EAChBC,UAAW,EACXC,kBAAmB,EACnBC,kBAAmB,EACnBC,cAAe,EACfC,iBAAkB,EAClBN,YAAa,GA5BN,OAAAnG,0NAmCUrC,GAAOM,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACFC,MAAK,kDAAA2D,OACmBzD,KAAKmE,MAAM6J,MAAMC,OAAO5F,aAD3C,w3CAFLtI,SAmDRC,KAAKC,SAAS,CACVsI,WAAYxI,EAASF,KAAK0I,WAAWzH,KACrC4C,OAAQ3D,EAASF,KAAK0I,WAAW7E,OAAO1C,KACxCrB,cAAeI,EAASF,KAAK0I,WAAW5I,cACxCD,cAAc,EACdoO,SAAU/N,EAASF,KAAK0I,WAAW7E,OAAOT,IAC1CwK,KAAM1N,EAASF,KAAK0I,WAAWkF,KAC/B1M,YAAahB,EAASF,KAAK0I,WAAWxH,YACtCE,SAAUlB,EAASF,KAAK0I,WAAWtH,WAEvCf,QAAQC,IAAIH,KAAKP,uDAEbS,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,yJAYlC,OACIrB,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,4DAOJ,OACI1E,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,mDAMU,IACRiF,EAAchI,KAAKP,MAAnBuI,UACN,OACI3J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,WACaiF,EADb,0CAOJ,OACI3J,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,yCA6EC,IAAAmL,EAC4FlO,KAAKP,MAAhGgO,EADDS,EACCT,KAAMlF,EADP2F,EACO3F,WAAY7E,EADnBwK,EACmBxK,OAAQ/D,EAD3BuO,EAC2BvO,cAAeD,EAD1CwO,EAC0CxO,aAAcoO,EADxDI,EACwDJ,SAAU/M,EADlEmN,EACkEnN,YAAaE,EAD/EiN,EAC+EjN,SACpF,OACI5C,EAAAC,EAAAC,cAAA,OAAKgC,MAAO,CAACC,UAAW,WACpBnC,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACC,UAAW,WAAY+H,GACnClK,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,iBAAAN,OAAmBqK,IAAYzP,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACC,UAAW,WAAYkD,IAAmBrF,EAAAC,EAAAC,cAAA,WAC7FF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,gBAAAN,OAAkBzD,KAAKmE,MAAM6J,MAAMC,OAAO5F,eAAgBhK,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACC,UAAW,WAAvB,iBAA0DnC,EAAAC,EAAAC,cAAA,WAC5HF,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACC,UAAW,WAAWnC,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,gBAAAN,OAAkB1C,EAAYkC,MAAQlC,EAAYC,KAA1D,MAClC3C,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACC,UAAW,WAAvB,aACCS,EAASR,IAAI,SAAA2G,GACV,OACI/I,EAAAC,EAAAC,cAAA,iBAAS6I,EAAEjG,QAAX,KAAsB,OAAtB,QAGU,IAAjBzB,GACDrB,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASlK,KAAKmO,kBACd/D,gBAAiBpK,KAAKqK,cAErB1K,EAAcc,IAAI,SAAA2N,GACf,OACI/P,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,iBAAAN,OAAmB2K,EAAKnL,MAAQmL,EAAK1N,kBAKvD+M,EAAK9E,OAAS,GACftK,EAAAC,EAAAC,cAACyL,GAAA1L,EAAD,CACA2L,eAAe,MACfC,QAASlK,KAAKqO,kBACdjE,gBAAiBpK,KAAKqK,cAEjBrK,KAAKwN,eAEQ,IAAjB9N,GAA0BrB,EAAAC,EAAAC,cAAC+P,EAAD,CAAYjG,aAAcrI,KAAKmE,MAAM6J,MAAMC,OAAO5F,gBAC3D,IAAjB3I,GAA0BrB,EAAAC,EAAAC,cAACgQ,GAAD,CAAUlG,aAAcrI,KAAKmE,MAAM6J,MAAMC,OAAO5F,eAC1E3I,GAAgBrB,EAAAC,EAAAC,cAAC6C,EAAD,cA9PRC,uBCgCVmN,oLA5CP,OACInQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACA2D,QAAQ,OACRsM,WAAW,SACXrM,eAAe,SACfmB,OAAQ,GACRvE,MAAM,WACN0P,QAAS,EACT7L,MAAM,iBAGFxE,EAAAC,EAAAC,cAACoQ,GAAA,EAAD,CAAS5K,GAAG,IAAI6K,gBAAgB,UAC5BvQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMS,KAAK,KAAKD,MAAM,SAAtB,gBAEJX,EAAAC,EAAAC,cAAA,KAAGgC,MAAQ,CAACvB,MAAO,QAAS6P,SAAU,QAAS/J,KAAK,4EAApD,mBACAzG,EAAAC,EAAAC,cAACoQ,GAAA,EAAD,CAASG,OAAK,EAAC/K,GAAG,IAAI6K,gBAAgB,UACtCvQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2D,QAAQ,OAAOsM,WAAW,UAC3BpQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKU,OAAQ,EAAGqE,OAAQ,GAAIH,MAAO,GAAIP,MAAM,iBAC7CxE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACCqF,IAAI,cACJkL,cAAe,EACfC,aAAc,EACdxL,IAAI,6BAGLnF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASS,KAAK,KAAKD,MAAM,UAAzB,uBAMAX,EAAAC,EAAAC,cAAA,KAAGgC,MAAQ,CAACvB,MAAO,QAAS6P,SAAU,QAAS/J,KAAK,iRAApD,cAGAzG,EAAAC,EAAAC,cAAA,KAAGgC,MAAQ,CAACvB,MAAO,QAAS6P,SAAU,QAAS/J,KAAK,kEAApD,gBApCCzD,aCCflC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAgGX8P,8MA7FXxP,MAAQ,CACJyP,aAAc,GACd3N,WAAY,GACZ7B,cAAc,KAkClB8B,aAAe,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACdC,EAAK1B,SAAS,CAAEsB,WAAYG,OAGhCE,cAAgB,SAAAC,GAAkC,IAA/BN,EAA+BM,EAA/BN,WACf,OAD8CM,EAAnBqN,aACPpN,OAAO,SAAAqN,GACvB,OAAOA,EAAInO,KAAKgB,cAAcC,SAASV,EAAWS,gBAClDmN,EAAIC,QAAQpO,KAAKgB,cAAcC,SAASV,EAAWS,4OApC5B1C,GAAOM,QAAQ,OAAQ,WAAY,CACtDC,KAAM,CACFC,MAAK,gcAFPC,SAkBNG,QAAQC,IAAIJ,GACZC,KAAKC,SAAS,CACViP,aAAcnP,EAASF,KAAKqP,aAC5BxP,cAAc,oDAGlBQ,QAAQgC,MAAR9B,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAgB7B,IAAAY,EAC8BN,KAAKP,MAAlCC,EADDY,EACCZ,aAAc6B,EADfjB,EACeiB,WACpB,OACAlD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACQH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2D,QAAQ,OAAOC,eAAe,SAASC,UAAW,GACvDhE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAL,GAAG,cACHoE,mBAAmB,qBACnBC,SAAUxC,KAAKwB,aACfiB,YAAY,0BACZf,MAAOH,IAEPlD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAU,OAAQ,GAEJb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACAkE,KAAK,SACL1D,MAAOuC,EAAa,SAAW,OAC/BtC,KAAM,GACNsD,mBAAmB,aAI1BvC,KAAK4B,cAAc5B,KAAKP,OAAOgB,IAAI,SAAA0O,GAChC,OACI9Q,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK6D,UAAW,EAAGgN,YAAa,GAC5BhR,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,SAAAN,OAAW0L,EAAIlM,MAAQkM,EAAInO,MADvC,IACoD3C,EAAAC,EAAAC,cAAA,WAChDF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,YAAAN,OAAc0L,EAAIC,QAAQnM,MAAQkM,EAAIC,QAAQpO,MAF1D,IAEuE3C,EAAAC,EAAAC,cAAA,WAClE4Q,EAAIG,WAAW7O,IAAI,SAAAsB,GAChB,OACI1D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,SAAAN,OAAW1B,EAAKkB,MAAQlB,EAAKf,YAO5DtB,GAAgBrB,EAAAC,EAAAC,cAAC6C,EAAD,cAxFVC,aCJblC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAmFXoQ,8MAhFX9P,MAAQ,CACJC,cAAc,EACdgB,aAAc,GACdE,YAAa,GACb4O,iBAAkB,8NAMSlQ,GAAOM,QAAQ,OAAQ,WAAY,CAC1DC,KAAM,CACFC,MAAK,oDAAA2D,OACqBzD,KAAKmE,MAAM6J,MAAMC,OAAOwB,eAD7C,qrBAFH1P,SA2BVC,KAAKC,SAAS,CACVS,aAAcX,EAASF,KAAKa,aAAaA,aACzC8O,iBAAkBzP,EAASF,KAAKa,aAAa8O,iBAC7C9P,cAAc,oDAGdQ,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAI7B,IAAAY,EACkDN,KAAKP,MAAtDiB,EADDJ,EACCI,aAAc8O,EADflP,EACekP,iBAAkB9P,EADjCY,EACiCZ,aAEtC,OADAQ,QAAQC,IAAIqP,GAERnR,EAAAC,EAAAC,cAAA,OAAKgC,MAAO,CAACC,UAAW,WACpBnC,EAAAC,EAAAC,cAAA,0BADJ,IAC0BF,EAAAC,EAAAC,cAAA,WACtBF,EAAAC,EAAAC,cAAA,UAAKmC,GAFT,IAE4BrC,EAAAC,EAAAC,cAAA,WACxBF,EAAAC,EAAAC,cAAA,6BAAqBmC,GACpB8O,EAAiB/O,IAAI,SAAA0O,GAClB,OACI9Q,EAAAC,EAAAC,cAAA,WACK4Q,EAAIrG,OADT,IACiBzK,EAAAC,EAAAC,cAAA,WACZ4Q,EAAIvO,YAAYH,IAAI,SAAAqC,GACjB,OACAzE,EAAAC,EAAAC,cAAA,SACAF,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,eAAAN,OAAiBX,EAAIG,MAAQH,EAAIhC,MAAYzC,EAAAC,EAAAC,cAAA,WACpDuE,EAAI/B,YAAYC,KAFjB,IAEwB8B,EAAI7B,SAASR,IAAI,SAAAnC,GACrC,OACID,EAAAC,EAAAC,cAAA,YAAOD,EAAE6C,iBAQhCzB,GAAgBrB,EAAAC,EAAAC,cAAC6C,EAAD,cA3ENC,uBCYrBlC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAgQXuQ,eA5PX,SAAAA,EAAYvL,GAAO,IAAAxC,EAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAA0P,IACf/N,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAwM,GAAAnL,KAAAvE,KAAMmE,KAuEVwL,YAxEmBzM,OAAA0M,EAAA,EAAA1M,CAAA2M,EAAAvR,EAAAwR,KAwEL,SAAAC,IAAA,IAAAzP,EAAAkL,EAAAzK,EAAA,OAAA8O,EAAAvR,EAAAqE,KAAA,SAAAvC,GAAA,cAAAA,EAAA4P,KAAA5P,EAAA6P,MAAA,cAAA7P,EAAA4P,KAAA,EAAA1P,EAEsBqB,EAAKlC,MAA3B+L,EAFAlL,EAEAkL,KAAMzK,EAFNT,EAEMS,YAEZyK,GADAA,EAAOA,EAAKV,QAAQ,KAAM,QACdA,QAAQ,MAAO,QAC3B5K,QAAQC,IAAIqL,GALNpL,EAAA6P,KAAA,EAMA3Q,GAAOM,QAAQ,OAAQ,UAAW,CACpCC,KAAM,CACFC,MAAK,wIAAA2D,OAGU1C,EAAYkC,IAHtB,4GAAAQ,OAMa+H,EANb,gOARP,OAwBN7J,EAAK1B,SAAS,CACViQ,gBAAgB,IAEpBC,WAAW,WAAOxO,EAAK1B,SAAS,CAAEiQ,gBAAgB,KAAW,KA3BvD9P,EAAA6P,KAAA,iBAAA7P,EAAA4P,KAAA,GAAA5P,EAAAC,GAAAD,EAAA,SA6BFF,QAAQC,IAARC,EAAAC,IACAsB,EAAK1B,SAAS,CACVmQ,cAAc,IAElBD,WAAW,WAAOxO,EAAK1B,SAAS,CAAEmQ,cAAc,KAAW,KAjCzD,yBAAAhQ,EAAAiQ,SAAAN,EAAA/P,KAAA,aAxEK2B,EA6GnByK,oBAAsB,SAAC7B,GACnB5I,EAAK1B,SAAS,CACVsK,cACAiB,KAAMa,KAAYC,uBAAa/B,EAAYgC,sBAAsBzB,QAAQ,QAAS,OAhHvEnJ,EA4InB2O,qBAAuB,SAACxP,GAAS,IAMvBiN,EAAmBpM,EAAKlC,MAAxBsO,eACN7N,QAAQC,IAAI4N,GACZ,IAAMwC,EAAc,CAClBzP,KAAMA,EACN0P,SAAUC,IAAIC,gBAAgB5P,GAC9B6P,MAAK,GAAAlN,OAAKtE,GAAL,aAAAsE,OAAuB3C,EAAKE,OAWnC,OARA+M,EAAelF,KAAK0H,GAEpB5O,EAAK1B,SAAS,CAAC8N,eAAgBA,IAMxB,IAAI6C,QACT,SAAC5S,EAAS6S,GACR7S,EAAQ,CAAE6B,KAAM,CAAEiR,KAAMP,EAAYC,eAlKxC,IAAIhF,EAAO,mCACPF,EAAeV,IAAYY,GAC/B,GAAIF,EAAc,CACd,IAAIC,EAAeb,eAAaC,qBAAqBW,EAAaP,eAC9DR,EAAcC,cAAYC,kBAAkBc,GAChD5J,EAAKlC,MAAQ,CACTsB,YAAa,GACbH,YAAa,GACblB,cAAc,EACd6K,cACAwD,eAAgB,GAChBvC,OACA4E,cAAc,EACdF,gBAAgB,GAEpBvO,EAAK2O,qBAAuB3O,EAAK2O,qBAAqB7L,KAA1BvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAvB,KAjBjB,OAAAA,kOAuBUrC,GAAOM,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACFC,MAAK,kDAAA2D,OACmBzD,KAAKmE,MAAM6J,MAAMC,OAAO8C,cAD3C,0sBAFLhR,SA4BRC,KAAKC,SAAS,CACVc,YAAahB,EAASF,KAAKkB,YAC3BH,YAAab,EAASF,KAAKkB,YAAYH,YACvClB,cAAc,IAEdyH,EAAInH,KAAKP,MAAMsB,YAAYiQ,MAAMlG,QAAQ,OAAQ,MACjDQ,EAAeV,IAAYzD,EAAE2D,QAAQ,QAAS,UAE1CS,EAAeb,eAAaC,qBAAqBW,EAAaP,eAC9DR,EAAcC,cAAYC,kBAAkBc,GAChDvL,KAAKC,SAAS,CACVsK,cACAiB,KAAMrE,EAAE2D,QAAQ,QAAS,2DAI7B5K,QAAQC,IAAR8Q,EAAA5Q,IACAL,KAAKC,SAAS,CAAEP,cAAc,0JAiDlC,OACIrB,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,4DAOJ,OACI1E,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,8CAOJ,OACI1E,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,WAAhB,yCAoCC,IAAAmL,EACuFlO,KAAKP,MAA3FC,EADDwO,EACCxO,aAAcqB,EADfmN,EACenN,YAA0BwJ,GADzC2D,EAC4BtN,YAD5BsN,EACyC3D,aAAa2F,EADtDhC,EACsDgC,eAAgBE,EADtElC,EACsEkC,aAE3E,OADAlQ,QAAQC,IAAIH,KAAKP,OAEbpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACA6D,UAAW,EACXF,QAAQ,OACRC,eAAe,SACfqM,WAAW,QACX/P,0BAA2B,CACvBC,QAAS,CACLuS,SAAU,kBAIlB7S,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2D,QAAQ,OAAOgP,UAAU,SAAS1C,WAAW,UAC9CpQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK8D,aAAc,GACfjE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASQ,MAAM,QAAQ+B,EAAYC,MACnC3C,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,+BAuCRF,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACIC,YAAaA,EACb6B,oBAAqBpM,KAAKoM,oBAC1BgF,QAAS,CACLC,MAAO,CAAEC,eAAgBtR,KAAKsQ,sBAC9BiB,YAAa,sMAGrBlT,EAAAC,EAAAC,cAAA,UAAQgC,MAAO,CAACqC,gBAAiB,QAAQ5D,MAAO,QAASwS,aAAc,QAASnM,QAASrF,KAAK2P,aAA9F,QAjDA,IAiDyHtR,EAAAC,EAAAC,cAAA,WACxH2R,GACD7R,EAAAC,EAAAC,cAACkT,GAAA,EAAD,CAAOzS,MAAM,WAAb,uBAECoR,GACD/R,EAAAC,EAAAC,cAACkT,GAAA,EAAD,CAAOzS,MAAM,SAASuB,MAAO,CAACmO,QAAS,SAAvC,4CAKHhP,GAAgBrB,EAAAC,EAAAC,cAAC6C,EAAD,cAxPPC,aCThBlC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAyEXuQ,8MAtEXjQ,MAAQ,CACJyP,aAAc,GACdxL,OAAQ,GACRhE,cAAc,EACd6B,WAAY,8NAMejC,GAAOM,QAAQ,OAAQ,WAAY,CAC1DC,KAAM,CACFC,MAAK,6CAAA2D,OACczD,KAAKmE,MAAM6J,MAAMC,OAAOH,SADtC,mOAFH/N,SAeVC,KAAKC,SAAS,CACViP,aAAcnP,EAASF,KAAK6D,OAAOwL,aACnCxL,OAAQ3D,EAASF,KAAK6D,OAAO1C,KAC7BtB,cAAc,oDAGdQ,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAG7B,IAAAY,EAC0BN,KAAKP,MAA9BiE,EADDpD,EACCoD,OAAQwL,EADT5O,EACS4O,aACd,OACI7Q,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACA6D,UAAW,EACXF,QAAQ,OACRC,eAAe,SACfqM,WAAW,QACX/P,0BAA2B,CACvBC,QAAS,CACLuS,SAAU,kBAIlB7S,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2D,QAAQ,OAAOgP,UAAU,SAAS1C,WAAW,UAC9CpQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK8D,aAAc,GACfjE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASQ,MAAM,QAAQ0E,GAC3BrF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACK0Q,EAAazO,IAAI,SAAA0O,GACd,OACI9Q,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACuF,EAAA,EAAD,CAAMC,GAAE,gBAAAN,OAAkB0L,EAAIlM,MAAQkM,EAAInO,qBA1DpDK,aCHhBlC,GAASC,8CAAYC,SAAW,4BAChCC,GAAS,IAAIC,IAAOJ,IAqGXuS,8MAlGXjS,MAAQ,CACJsB,YAAa,GACbH,YAAa,GACblB,cAAc,6NAMaJ,GAAOM,QAAQ,OAAQ,WAAY,CAC1DC,KAAM,CACFC,MAAK,kDAAA2D,OACmBzD,KAAKmE,MAAM6J,MAAMC,OAAO8C,cAD3C,kpBAFHhR,SA2BVC,KAAKC,SAAS,CACVc,YAAahB,EAASF,KAAKkB,YAC3BH,YAAab,EAASF,KAAKkB,YAAYH,YACvClB,cAAc,oDAGdQ,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAI7B,IAAAY,EAC4CN,KAAKP,MAAhDC,EADDY,EACCZ,aAAcqB,EADfT,EACeS,YAAaH,EAD5BN,EAC4BM,YAEjC,OADAV,QAAQC,IAAIH,KAAKP,OAEbpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACA6D,UAAW,EACXF,QAAQ,OACRC,eAAe,SACfqM,WAAW,QACX/P,0BAA2B,CACvBC,QAAS,CACLuS,SAAU,kBAIlB7S,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2D,QAAQ,OAAOgP,UAAU,SAAS1C,WAAW,UAC9CpQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK8D,aAAc,GACfjE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASQ,MAAM,QAAQ+B,EAAYC,MACnC3C,EAAAC,EAAAC,cAAA,4BACHqC,EAAYH,IAAI,SAAAnC,GACb,OACID,EAAAC,EAAAC,cAAA,SACKD,EAAEwC,KADP,IACazC,EAAAC,EAAAC,cAAA,WACRD,EAAE2C,SAASR,IAAI,SAAAI,GACZ,OACIxC,EAAAC,EAAAC,cAAA,YAAOsC,EAAEM,WAEd9C,EAAAC,EAAAC,cAAA,WACFD,EAAEqB,cAAcc,IAAI,SAAAS,GACjB,OACI7C,EAAAC,EAAAC,cAAA,SAAI2C,EAAER,aAAN,eAAgCQ,EAAEsO,iBAAiB/O,IAAI,SAAA8G,GACnD,OACIlJ,EAAAC,EAAAC,cAAA,YAAOgJ,EAAEuB,UAFjB,YAUpBzK,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iCAINmB,GAAgBrB,EAAAC,EAAAC,cAAC6C,EAAD,cA7FPC,yECThBlC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAoSXwS,eAhSX,SAAAA,EAAYxN,GAAO,IAAAxC,EAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAA2R,IACfhQ,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAyO,GAAApN,KAAAvE,KAAMmE,KAuFVwL,YAxFmBzM,OAAA0M,EAAA,EAAA1M,CAAA2M,EAAAvR,EAAAwR,KAwFJ,SAAAC,IAAA,IAAAzP,EAAAsR,EAAA/G,EAAAgH,EAAAhI,EAAAD,EAAAd,EAAA,OAAA+G,EAAAvR,EAAAqE,KAAA,SAAAvC,GAAA,cAAAA,EAAA4P,KAAA5P,EAAA6P,MAAA,cAAA7P,EAAA4P,KAAA,EAAA1P,EAEmHqB,EAAKlC,MAAzHmS,EAFCtR,EAEDsR,QAFCtR,EAEQS,YAFRT,EAEqBiI,WAAYsC,EAFjCvK,EAEiCuK,WAAYgH,EAF7CvR,EAE6CuR,UAAWhI,EAFxDvJ,EAEwDuJ,UAAWD,EAFnEtJ,EAEmEsJ,MAAOd,EAF1ExI,EAE0EwI,OAF1ExI,EAEkF8P,aAFlF9P,EAEgG4P,eAEvGrF,GADAA,EAAaA,EAAWC,QAAQ,KAAM,QACdA,QAAQ,MAAO,QAEvC+G,GADAA,EAAYA,EAAU/G,QAAQ,KAAM,QACdA,QAAQ,MAAO,QAN9B1K,EAAA6P,KAAA,EAOD3Q,GAAOM,QAAQ,OAAQ,UAAW,CACpCC,KAAM,CACFC,MAAK,iIAAA2D,OAGU9B,EAAKwC,MAAM6J,MAAMC,OAAO6D,MAHlC,iHAAArO,OAMkBoH,EANlB,+CAAApH,OAOiBoO,EAPjB,+CAAApO,OAQiBoG,EARjB,2CAAApG,OASamG,EATb,2CAAAnG,OAUaqF,EAVb,4CAAArF,OAWemO,EAXf,kXATN,OAkCPjQ,EAAK1B,SAAS,CACViQ,gBAAgB,IAEpBC,WAAW,WAAOxO,EAAK1B,SAAS,CAAEiQ,gBAAgB,KAAW,KAC7DvO,EAAKwC,MAAM4N,QAAQC,SAtCZ5R,EAAA6P,KAAA,iBAAA7P,EAAA4P,KAAA,GAAA5P,EAAAC,GAAAD,EAAA,SAwCHF,QAAQC,IAARC,EAAAC,IACAsB,EAAK1B,SAAS,CACVmQ,cAAc,IAElBD,WAAW,WAAOxO,EAAK1B,SAAS,CAAEmQ,cAAc,KAAW,KA5CxD,yBAAAhQ,EAAAiQ,SAAAN,EAAA/P,KAAA,aAxFI2B,EAwInByK,oBAAsB,SAAC7B,GACnB5I,EAAK1B,SAAS,CACVsK,cACAiB,KAAMa,KAAYC,uBAAa/B,EAAYgC,sBAAsBzB,QAAQ,QAAS,OA3IvEnJ,EA+InB2O,qBAAuB,SAACxP,GAAS,IAMvBiN,EAAmBpM,EAAKlC,MAAxBsO,eACN7N,QAAQC,IAAI4N,GACZ,IAAMwC,EAAc,CAClBzP,KAAMA,EACN0P,SAAUC,IAAIC,gBAAgB5P,GAC9B6P,MAAK,GAAAlN,OAAKtE,GAAL,aAAAsE,OAAuB3C,EAAKE,OAWnC,OARA+M,EAAelF,KAAK0H,GAEpB5O,EAAK1B,SAAS,CAAC8N,eAAgBA,IAMxB,IAAI6C,QACT,SAAC5S,EAAS6S,GACR7S,EAAQ,CAAE6B,KAAM,CAAEiR,KAAMP,EAAYC,eAvKzB7O,EA4KnBsQ,gBAAkB,SAACC,GACfvQ,EAAK1B,SAAS,CACV4J,UAAWqI,EAAMC,OAAOzQ,QAE5BxB,QAAQC,IAAIwB,EAAKlC,QAhLFkC,EAmLnByQ,YAAc,SAACF,GACXvQ,EAAK1B,SAAS,CACV2J,MAAOsI,EAAMC,OAAOzQ,QAExBxB,QAAQC,IAAIwB,EAAKlC,QAvLFkC,EA0LnB0Q,aAAe,SAACH,GACZvQ,EAAK1B,SAAS,CACV6I,OAAQoJ,EAAMC,OAAOzQ,SA5LVC,EAgMnB2Q,cAAgB,SAACJ,GACbvQ,EAAK1B,SAAS,CACV2R,QAASM,EAAMC,OAAOzQ,SAlMXC,EAuMnB4Q,wBAA0B,SAAChI,GACvB5I,EAAK1B,SAAS,CACVsK,cACAM,WAAYwB,KAAYC,uBAAa/B,EAAYgC,sBAAsBzB,QAAQ,QAAS,OA1M7EnJ,EA8MnB6Q,uBAAyB,SAACC,GACtB9Q,EAAK1B,SAAS,CACVwS,eACAZ,UAAWxF,KAAYC,uBAAamG,EAAalG,sBAAsBzB,QAAQ,QAAS,OA/M5F,IACIQ,EAAeV,IADR,oCAEX,GAAIU,EAAc,CACd,IAAIC,EAAeb,eAAaC,qBAAqBW,EAAaP,eAC9DR,EAAcC,cAAYC,kBAAkBc,GAChD5J,EAAKlC,MAAQ,CACTsB,YAAa,GACbwH,WAAY,GACZ7I,cAAc,EACd6K,cACAwD,eAAgB,GAChBlD,WAAY,GACZgH,UAAW,GACXhI,UAAW,GACXqG,gBAAgB,EAChBE,cAAc,EACdwB,QAAS,IAEbjQ,EAAK2O,qBAAuB3O,EAAK2O,qBAAqB7L,KAA1BvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAvB,KApBjB,OAsBfA,EAAKsQ,gBAAkBtQ,EAAKsQ,gBAAgBxN,KAArBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAvB,KACvBA,EAAKyQ,YAAczQ,EAAKyQ,YAAY3N,KAAjBvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAvB,KAvBJA,0OA4BUrC,GAAOM,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACFC,MAAK,0CAAA2D,OACWzD,KAAKmE,MAAM6J,MAAMC,OAAO6D,MADnC,8gBAFL/R,SAuBRC,KAAKC,SAAS,CACVc,YAAahB,EAASF,KAAK6S,IAAI3R,YAAYkC,IAC3CsF,WAAYxI,EAASF,KAAK6S,IAAI9R,YAAY,GAAGE,KAC7C+I,UAAW9J,EAASF,KAAK6S,IAAI7I,UAC7BgB,WAAY9K,EAASF,KAAK6S,IAAI7H,WAC9BgH,UAAW9R,EAASF,KAAK6S,IAAIb,UAC7BjI,MAAO7J,EAASF,KAAK6S,IAAI9I,MACzBlK,cAAc,EACdoJ,OAAQ/I,EAASF,KAAK6S,IAAI5J,OAC1B8I,QAAS7R,EAASF,KAAK6S,IAAId,UAED,OAA1B5R,KAAKP,MAAMoL,YAAgD,OAAzB7K,KAAKP,MAAMoS,WAC7C7R,KAAKC,SAAS,CAAE4K,WAAY,2BACH,OAAzB7K,KAAKP,MAAMoS,WACP7R,KAAKC,SAAS,CAAE4R,UAAW,iCAG/B1K,EAAInH,KAAKP,MAAMoL,WAAWC,QAAQ,OAAQ,KAC1C1D,EAAIpH,KAAKP,MAAMoS,UAAU/G,QAAQ,OAAQ,KACzCQ,EAAeV,IAAYzD,EAAE2D,QAAQ,QAAS,OAC9C6H,EAAgB/H,IAAYxD,EAAE0D,QAAQ,QAAS,OAC/CQ,GAAgBqH,IACZpH,EAAeb,eAAaC,qBAAqBW,EAAaP,eAC9D6H,EAAgBlI,eAAaC,qBAAqBgI,EAAc5H,eAChER,EAAcC,cAAYC,kBAAkBc,GAC5CkH,EAAejI,cAAYC,kBAAkBmI,GACjD5S,KAAKC,SAAS,CACVsK,cACAkI,oEAIJvS,QAAQC,IAAR8Q,EAAA5Q,IACAL,KAAKC,SAAS,CAAEP,cAAc,iJAiI7B,IAAAwO,EACuIlO,KAAKP,MAA3ImS,EADD1D,EACC0D,QAAoCrJ,GADrC2F,EACUxO,aADVwO,EACwBnN,YADxBmN,EACqC3F,YAAYgC,EADjD2D,EACiD3D,YAAakI,EAD9DvE,EAC8DuE,aAAc5I,EAD5EqE,EAC4ErE,UAAWD,EADvFsE,EACuFtE,MAAOd,EAD9FoF,EAC8FpF,OAAQsH,EADtGlC,EACsGkC,aAAcF,EADpHhC,EACoHgC,eAEzH,OADAhQ,QAAQC,IAAIH,KAAKP,OAEbpB,EAAAC,EAAAC,cAACsU,GAAA,EAAD,CAAMtS,MAAO,CAAC+C,WAAY,OAAQD,YAAa,OAAQhB,UAAW,SAC9DhE,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,OAAOC,GAAI,GAAtB,qBACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,OAAO1M,KAAK,OAAO7C,GAAG,OAAOuD,MAAO6G,MAGxDlK,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,QAAQC,GAAI,GAAvB,SACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,OAAO1M,KAAK,QAAQ7C,GAAG,QAAQuD,MAAOkI,EAAOpH,SAAUxC,KAAKoS,gBAGhF/T,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,YAAYC,GAAI,GAA3B,cACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,YAAY1M,KAAK,YAAY7C,GAAG,YAAYuD,MAAOmI,EAAWrH,SAAUxC,KAAKiS,oBAGjG5T,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,gBAAgBC,GAAI,GAA/B,UACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,SAAS1M,KAAK,SAAS7C,GAAG,gBAAgBuD,MAAOoH,EAAQtG,SAAUxC,KAAKqS,cACpFhU,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BAIRF,EAAAC,EAAAC,cAACuU,GAAA,EAAD,KACIzU,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,aAAaC,GAAI,GAA5B,eACI7U,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACIC,YAAaA,EACb6B,oBAAqBpM,KAAKuS,2BAGtClU,EAAAC,EAAAC,cAACuU,GAAA,EAAD,KACIzU,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,YAAYC,GAAI,GAA3B,cACI7U,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACIC,YAAakI,EACbrG,oBAAqBpM,KAAKwS,uBAC1BpB,QAAS,CACLC,MAAO,CAAEC,eAAgBtR,KAAKsQ,sBAC9BiB,YAAa,uMAI7BlT,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,UAAUC,GAAI,GAAzB,WACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,WAAW1M,KAAK,UAAU7C,GAAG,UAAUuD,MAAOkQ,EAASpP,SAAUxC,KAAKsS,kBAG1FjU,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWO,OAAK,EAACN,KAAG,GAChB1U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,CAAEjU,KAAM,GAAI0N,OAAQ,IACzBtO,EAAAC,EAAAC,cAAC+U,GAAA,EAAD,CAAQjO,QAASrF,KAAK2P,aAAtB,YAGPS,GACD/R,EAAAC,EAAAC,cAACkT,GAAA,EAAD,CAAOzS,MAAM,UAAb,SAECkR,GACD7R,EAAAC,EAAAC,cAACkT,GAAA,EAAD,CAAOzS,MAAM,WAAb,mBA3RKqC,aCHflC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IA6LXwS,eAzLX,SAAAA,EAAYxN,GAAO,IAAAxC,EAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAA2R,IACfhQ,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAyO,GAAApN,KAAAvE,KAAMmE,KA+CVwL,YAhDmBzM,OAAA0M,EAAA,EAAA1M,CAAA2M,EAAAvR,EAAAwR,KAgDJ,SAAAC,IAAA,IAAAzP,EAAAkL,EAAAzK,EAAA,OAAA8O,EAAAvR,EAAAqE,KAAA,SAAAvC,GAAA,cAAAA,EAAA4P,KAAA5P,EAAA6P,MAAA,cAAA7P,EAAA4P,KAAA,EAAA1P,EAEqBqB,EAAKlC,MAA3B+L,EAFClL,EAEDkL,KAAMzK,EAFLT,EAEKS,YAEZyK,GADAA,EAAOA,EAAKV,QAAQ,KAAM,QACdA,QAAQ,MAAO,QAC3B5K,QAAQC,IAAIqL,GALLpL,EAAA6P,KAAA,EAMD3Q,GAAOM,QAAQ,OAAQ,UAAW,CACpCC,KAAM,CACFC,MAAK,8HAAA2D,OAGU1C,EAAYkC,IAHtB,4GAAAQ,OAMa+H,EANb,gOARN,OAAApL,EAAA6P,KAAA,gBAAA7P,EAAA4P,KAAA,EAAA5P,EAAAC,GAAAD,EAAA,SAyBHF,QAAQC,IAARC,EAAAC,IAzBG,yBAAAD,EAAAiQ,SAAAN,EAAA/P,KAAA,YAhDI2B,EA6EnB2O,qBAAuB,SAACxP,GAAS,IAMvBiN,EAAmBpM,EAAKlC,MAAxBsO,eACN7N,QAAQC,IAAI4N,GACZ,IAAMwC,EAAc,CAClBzP,KAAMA,EACN0P,SAAUC,IAAIC,gBAAgB5P,GAC9B6P,MAAK,GAAAlN,OAAKtE,GAAL,aAAAsE,OAAuB3C,EAAKE,OAWnC,OARA+M,EAAelF,KAAK0H,GAEpB5O,EAAK1B,SAAS,CAAC8N,eAAgBA,IAMxB,IAAI6C,QACT,SAAC5S,EAAS6S,GACR7S,EAAQ,CAAE6B,KAAM,CAAEiR,KAAMP,EAAYC,eArGzB7O,EA0GnBsQ,gBAAkB,SAACC,GACfvQ,EAAK1B,SAAS,CACV4J,UAAWqI,EAAMC,OAAOzQ,SA5GbC,EAiHnB4Q,wBAA0B,SAAChI,GACvB5I,EAAK1B,SAAS,CACVsK,cACAM,WAAYwB,KAAYC,uBAAa/B,EAAYgC,sBAAsBzB,QAAQ,QAAS,MAE5F5K,QAAQC,IAAIwB,EAAKlC,QAtHFkC,EAyHnB6Q,uBAAyB,SAACC,GACtB9Q,EAAK1B,SAAS,CACVwS,eACAZ,UAAWxF,KAAYC,uBAAamG,EAAalG,sBAAsBzB,QAAQ,QAAS,MAE5F5K,QAAQC,IAAIwB,EAAKlC,QA5HjB,IACI6L,EAAeV,IADR,oCAEX,GAAIU,EAAc,CACd,IAAIC,EAAeb,eAAaC,qBAAqBW,EAAaP,eAC9DR,EAAcC,cAAYC,kBAAkBc,GAChD5J,EAAKlC,MAAQ,CACTsB,YAAa,GACbwH,WAAY,GACZ7I,cAAc,EACd6K,cACAwD,eAAgB,GAChBlD,WAAY,GACZgH,UAAW,GACXhI,UAAW,IAEflI,EAAK2O,qBAAuB3O,EAAK2O,qBAAqB7L,KAA1BvB,OAAAwB,EAAA,EAAAxB,QAAAwB,EAAA,EAAAxB,CAAAvB,KAjBjB,OAAAA,0NAuBUrC,GAAOM,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACFC,MAAK,iDAAA2D,OACkBzD,KAAKmE,MAAM6J,MAAMC,OAAO5F,aAD1C,kOAFLtI,SAeRC,KAAKC,SAAS,CACVsI,WAAYxI,EAASF,KAAK0I,WAC1B7I,cAAc,oDAGdQ,QAAQC,IAAR8Q,EAAA5Q,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAqF7B,IAAAwO,EACiFlO,KAAKP,MAA1D8I,GAD5B2F,EACCxO,aADDwO,EACenN,YADfmN,EAC4B3F,YAAYgC,EADxC2D,EACwC3D,YAAaV,EADrDqE,EACqDrE,UAAW4I,EADhEvE,EACgEuE,aACrE,OACIpU,EAAAC,EAAAC,cAACsU,GAAA,EAAD,CAAMtS,MAAO,CAAC+C,WAAY,OAAQD,YAAa,OAAQhB,UAAW,SAC9DhE,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,OAAOC,GAAI,GAAtB,qBACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,OAAO1M,KAAK,OAAO7C,GAAG,OAAOuD,MAAO6G,EAAWzH,SAGnEzC,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,YAAYC,GAAI,GAA3B,cACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,YAAY1M,KAAK,YAAY7C,GAAG,YAAYuD,MAAOmI,EAAWrH,SAAUxC,KAAKiS,oBAGjG5T,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWC,KAAG,GACV1U,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,gBAAgBC,GAAI,GAA/B,UACA7U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,IACL7U,EAAAC,EAAAC,cAAC6U,GAAA,EAAD,CAAO1F,KAAK,SAAS1M,KAAK,SAAS7C,GAAG,iBACtCE,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BAIRF,EAAAC,EAAAC,cAACuU,GAAA,EAAD,KACIzU,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,aAAaC,GAAI,GAA5B,eACI7U,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACIC,YAAaA,EACb6B,oBAAqBpM,KAAKuS,2BAGtClU,EAAAC,EAAAC,cAACuU,GAAA,EAAD,KACIzU,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAOC,IAAI,YAAYC,GAAI,GAA3B,cACI7U,EAAAC,EAAAC,cAAC+L,EAAA,OAAD,CACIC,YAAakI,EACbrG,oBAAqBpM,KAAKwS,uBAC1BpB,QAAS,CACLC,MAAO,CAAEC,eAAgBtR,KAAKsQ,sBAC9BiB,YAAa,uMAI7BlT,EAAAC,EAAAC,cAACuU,GAAA,EAAD,CAAWO,OAAK,EAACN,KAAG,GAChB1U,EAAAC,EAAAC,cAAC4U,GAAA,EAAD,CAAKD,GAAI,CAAEjU,KAAM,GAAI0N,OAAQ,IACzBtO,EAAAC,EAAAC,cAAC+U,GAAA,EAAD,yBAnLHjS,aCPflC,GAASC,8CAAYC,SAAW,wBAChCC,GAAS,IAAIC,IAAOJ,IAiEXoU,eA7DX,SAAAA,EAAYpP,GAAO,IAAAxC,EAAA,OAAAuB,OAAAkB,EAAA,EAAAlB,CAAAlD,KAAAuT,IACf5R,EAAAuB,OAAAmB,EAAA,EAAAnB,CAAAlD,KAAAkD,OAAAoB,EAAA,EAAApB,CAAAqQ,GAAAhP,KAAAvE,KAAMmE,KACD1E,MAAQ,CACTwB,SAAU,IAHCU,iNASXzB,QAAQC,IAAIH,KAAKmE,MAAM6J,MAAMC,OAAO5F,uBACf/I,GAAOM,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACFC,MAAK,iDAAA2D,OACkBzD,KAAKmE,MAAM6J,MAAMC,OAAO5F,aAD1C,gVAFLtI,SAiBRC,KAAKC,SAAS,CACVgB,SAAUlB,EAASF,KAAK0I,WAAWtH,2DAGnCf,QAAQC,IAARC,EAAAC,IACAL,KAAKC,SAAS,CAAEP,cAAc,gJAI7B,IACCuB,EAAajB,KAAKP,MAAlBwB,SAEN,OADAf,QAAQC,IAAIc,GAER5C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACK0C,EAASR,IAAI,SAAAnC,GACV,OACID,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIgC,MAAO,CAACC,UAAW,WAAWnC,EAAAC,EAAAC,cAAA,SAAID,EAAE6C,UACvC7C,EAAEkK,KAAK/H,IAAI,SAAAI,GACR,OACIxC,EAAAC,EAAAC,cAAA,UAAKsC,EAAE+Q,QAAP,mBAlDVvQ,aCsCXmS,oLAxBX,OACEnV,EAAAC,EAAAC,cAACkV,EAAA,EAAD,KACEpV,EAAAC,EAAAC,cAACF,EAAAC,EAAMoV,SAAP,KACArV,EAAAC,EAAAC,cAACoV,GAAD,MACAtV,EAAAC,EAAAC,cAACqV,EAAA,EAAD,KACEvV,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAW5P,EAAW4K,OAAK,EAACiF,KAAK,MACxC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAW3H,GAAY4H,KAAK,8BACnC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWE,GAAcD,KAAK,iBACrC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWvE,GAAcwE,KAAK,kCACrC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWtU,EAAeuU,KAAK,mBACtC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWG,GAAaF,KAAK,gCACpC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWpC,GAASqC,KAAK,sCAChC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAW7E,GAAM8E,KAAK,mBAC7B1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWpE,GAASqE,KAAK,4BAChC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWnC,GAAQoC,KAAK,0BAC/B1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWI,GAAWH,KAAK,sBAClC1V,EAAAC,EAAAC,cAACsV,EAAA,EAAD,CAAOC,UAAWP,GAAaQ,KAAK,yCAlB5B1S,aCRE8S,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStG,MACvB,uFAyGA,kBAAmBuG,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,eC9GnBC,IAASC,OAAOzW,EAAAC,EAAAC,cAACwW,GAAD,MAAS5H,SAAS6H,eAAe","file":"static/js/main.312cc7a4.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 116;","import React from 'react';\nimport { RingLoader } from 'react-spinners';\nimport { Box } from 'gestalt';\n\nconst Loader = () => {\n    return (\n    <Box\n    position=\"fixed\"\n    dangerouslySetInlineStyle={{\n        __style: {\n            botom: 300,\n            left: '50%',\n            transform: \"translateX(-50%)\"\n        }\n    }}\n    >\n    <RingLoader \n    color=\"green\"\n    size = {200}\n    margin = \"3px\"\n    />\n    </Box>\n    );\n}\n\nexport default Loader;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Jurisdictions extends Component {\n    state = {\n        loadingItems: true,\n        jurisdictions: []\n    }\n\n    async componentDidMount() {\n        try {\n            //console.log(this.props.match.params.itemId);\n            const response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    jurisdictions {\n                        _id\n                        jurisdiction\n                        submissions {\n                          _id\n                          file\n                          application {\n                              _id\n                              name\n                          }\n                          versions {\n                              _id\n                              version\n                          }\n                        }\n                        number\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            jurisdictions: response.data.jurisdictions,\n            loadingItems: false\n        });\n        console.log(this.state);\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    /*renderSubmissions() {\n        let { jurisdictions } = this.state;\n        return (\n            <div>\n                {jurisdictions.submissions.map(a => {\n                   return ( <p>{a.file}</p>)\n                })}\n            </div>\n        )\n    }*/\n\n    render() {\n        let { jurisdictions, loadingItems } = this.state;\n        return(\n            <div style={{textAlign: 'center'}}>\n                {jurisdictions.map(a => {\n                return (<p>\n                <h1>{a.jurisdiction} ({a.number})</h1> <br />\n                <h3>Submissions for {a.jurisdiction}</h3>\n                {a.submissions.map(b => {\n                    return (\n                        <p>{b.file} <br />\n                        {b.application.name} {b.versions.map(c => {\n                            return (\n                                <span>{c.version}</span>\n                            )\n                        })}</p>\n                    )\n                })}\n                </p>)\n                })}\n                {loadingItems && <Loader />}\n            </div>\n        );\n    }\n}\n\nexport default Jurisdictions;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from \"strapi-sdk-javascript/build/main\";\nimport {Box, \n        SearchField, \n        Icon,\n        Image,\n        Text,\n        Card,\n        Button,\n        Container } from 'gestalt';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Submissions extends Component {\n    state = {\n        submissions: [],\n        searchTerm: '',\n        loadingItems: true\n    }\n\n    async componentDidMount() {\n        try {\n            const response = await strapi.request('POST', '/graphql', {\n                data: {\n                    query: `query {\n                        submissions{\n                            _id\n                            file\n                            received\n                            processed\n                            begin\n                            vendor {\n                                _id\n                                name\n                                logo {\n                                  _id\n                                  url\n                                }\n                              }                              \n                            jurisdictions {\n                              _id\n                              jurisdiction\n                              number\n                            }\n                          application {\n                            _id\n                            name\n                          }\n                          versions {\n                            _id\n                            version\n                          }\n                        }\n                    }`\n                }\n            });\n            console.log(response);\n            this.setState({ \n                submissions: response.data.submissions,\n\n                loadingItems: false\n            });\n            console.log(this.state.submissions);\n        } catch(err) {\n            console.error(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    handleChange = ({ value }) => {\n        this.setState({ searchTerm: value});\n    };\n\n    filteredItems = ({ searchTerm, submissions }) => {\n        return submissions.filter(prop => {\n            return prop.file.toLowerCase().includes(searchTerm.toLowerCase()) || prop.application.name.toLowerCase().includes(searchTerm.toLowerCase())\n        });\n    };\n\n    render() {\n        let { loadingItems, searchTerm } = this.state;\n        return(\n        <Container>\n                <Box display=\"flex\" justifyContent=\"center\" marginTop={4} marginBottom={4}>\n                <SearchField \n                id=\"searchField\" \n                accessibilityLabel=\"Items search field\" \n                onChange={this.handleChange} \n                placeholder=\"Search Subissions or Apps\" \n                value={searchTerm}\n                />\n                <Box\n                margin={2}\n                >\n                    <Icon \n                    icon=\"filter\"\n                    color={searchTerm ? 'orange' : 'gray'}\n                    size={20}\n                    accessibilityLabel=\"Filter\"\n                    />\n                </Box>\n                </Box>\n                <Box wrap display =\"flex\" \n                justifyContent=\"around\"\n                dangerouslySetInlineStyle={{\n                    __style: {\n                        backgroundColor: '#d6e5ff'\n                    }\n                }}\n                shape= \"rounded\"\n                >\n            {this.filteredItems(this.state).map(sub => {\n                console.log(sub);\n                return(\n                    <div className=\"card\" key={sub._id} style={{marginTop: '30px', width: '100%', display: 'inline-block', marginRight: '3px', marginLeft: '3px', display: 'inline-grid'}}>\n                    <div className=\"card-title\" style={{textAlign: 'center'}}>{sub.file}</div>\n                    <div className=\"card-image\" style={{height: '50%', width: '50%'}}>\n                        <Image src={`${apiUrl}${sub.vendor.logo.url}`} alt={`${sub.vendor.logo._id}`} className='coffeeimage' style={{width: '10%', height: '10%'}}/>\n                    </div>\n                    <div className=\"card-content\" style={{backgroundColor:'#686c72'}}>    \n                        <p></p>\n                        <p>Manufacturer : <Link className=\"right\" style={{color: '#7FFF00'}} to={`/manufacturer/${sub.vendor._id}`}>{sub.vendor.name}</Link></p>\n                        <p>Jurisdictions: <br />{sub.jurisdictions.map(a => {\n                            return (\n                                <span className=\"right\">\n                                <Link style={{color: 'orange'}}to={`/jurisdiction/${a._id}`}>{a.jurisdiction} {'\\u00A0'}</Link>\n                                </span>\n                            )\n                        })} </p> \n                        <p>Application: <Link className=\"right\" style={{color: '#7FFF00'}} to={`/application/${sub.application._id}`}>{sub.application.name}</Link></p>\n                        <p>Version: {sub.versions.map(a => {\n                            return (\n                                <span className=\"right\" style={{color: 'yellow'}}>{a.version}</span>\n                            )\n                        })}</p>\n                    </div>\n                    <div className=\"card-action\" style={{textAlign: 'center', backgroundColor:'#686c72'}}>\n                        <Link to={`/submission/${sub._id}`}>{sub.file}</Link>\n                    </div>\n                    </div>\n            )})}\n            {loadingItems && <Loader />}\n            </Box>\n        </Container>\n        );\n    }\n}\n\nexport default Submissions;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from \"strapi-sdk-javascript/build/main\";\nimport Iframe from 'react-iframe';\nimport {Box, \n        SearchField, \n        Icon,\n        Image,\n        Text,\n        Card,\n        Button,\n        Container } from 'gestalt';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Manufacturers extends Component {\n    /*state = {\n        submissions: [],\n        searchTerm: '',\n        loadingItems: true\n    }\n\n    async componentDidMount() {\n        try {\n            const response = await strapi.request('POST', '/graphql', {\n                data: {\n                    query: `query {\n                        submissions{\n                            _id\n                            file\n                            received\n                            processed\n                            begin\n                            vendor {\n                                _id\n                                name\n                                logo {\n                                  _id\n                                  url\n                                }\n                              }                              \n                            jurisdictions {\n                              _id\n                              jurisdiction\n                              number\n                            }\n                          application {\n                            _id\n                            name\n                          }\n                          versions {\n                            _id\n                            version\n                          }\n                        }\n                    }`\n                }\n            });\n            console.log(response);\n            this.setState({ \n                submissions: response.data.submissions,\n\n                loadingItems: false\n            });\n            console.log(this.state.submissions);\n        } catch(err) {\n            console.error(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    handleChange = ({ value }) => {\n        this.setState({ searchTerm: value});\n    };\n\n    filteredItems = ({ searchTerm, submissions }) => {\n        return submissions.filter(prop => {\n            return prop.vendor.name.toLowerCase().includes(searchTerm.toLowerCase());\n        });\n    };*/\n\n    render() {\n        //let { loadingItems, searchTerm } = this.state;\n        return(\n        <div>\n            {/*<Container>\n                <Box display=\"flex\" justifyContent=\"center\" marginTop={4} marginBottom={4}>\n                <SearchField \n                id=\"searchField\" \n                accessibilityLabel=\"Items search field\" \n                onChange={this.handleChange} \n                placeholder=\"Search by Manufacturer\" \n                value={searchTerm}\n                />\n                <Box\n                margin={2}\n                >\n                    <Icon \n                    icon=\"filter\"\n                    color={searchTerm ? 'orange' : 'gray'}\n                    size={20}\n                    accessibilityLabel=\"Filter\"\n                    />\n                </Box>\n                </Box>\n                <Box wrap display =\"flex\" \n                justifyContent=\"around\"\n                dangerouslySetInlineStyle={{\n                    __style: {\n                        backgroundColor: '#d6e5ff'\n                    }\n                }}\n                shape= \"rounded\"\n            >\n            this.filteredItems(this.state).map(sub => {\n                console.log(sub);\n                return(\n                    <div className=\"card\" key={sub._id} style={{marginTop: '30px', width: '100%', display: 'inline-block', marginRight: '3px', marginLeft: '3px'}}>\n                    <div className=\"card-title\" style={{textAlign: 'center'}}>{sub.file}</div>\n                    <div className=\"card-image\" style={{height: '50%', width: '50%'}}>\n                        <Image src={`${apiUrl}${sub.vendor.logo.url}`} alt={`${sub.vendor.logo._id}`} className='coffeeimage' style={{width: '10%', height: '10%'}}/>\n                    </div>\n                    <div className=\"card-content\" style={{backgroundColor:'#686c72'}}>    \n                        <p></p>\n                        <p>Manufacturer : <span className=\"right\">{sub.vendor.name}</span></p>\n                        <p>Jurisdictions: {sub.jurisdictions.map(a => {\n                            return (\n                                <span>\n                                <Link style={{color: 'orange'}}to={`/jurisdiction/${a._id}`}>{a.jurisdiction} </Link>\n                                </span>\n                            )\n                        })} </p> \n                        <p>Application: <Link style={{color: '#7FFF00'}} to={`/application/${sub.application._id}`}>{sub.application.name}</Link></p>\n                        <p>Version: {sub.versions.map(a => {\n                            return (\n                                <span style={{textAlign: 'yellow'}}>{a.version}</span>\n                            )\n                        })}</p>\n                    </div>\n                    <div className=\"card-action\" style={{textAlign: 'center', backgroundColor:'#686c72'}}>\n                        <Link to={`/submission/${sub._id}`}>{sub.file}</Link>\n                    </div>\n                    </div>\n                    )})\n                    </Box>\n            </Container>*/}\n            \n                    <Iframe url=\"http://njintranet5.gaminglabs.net/sites/engineering/LVSystems/wiki/Wiki%20Pages/Current%20Network%20Layout.aspx\"\n                    width=\"100%\"\n                    height=\"100%\"\n                    id=\"myId\"\n                    className=\"myClassname\"\n                    display=\"initial\"\n                    position=\"absolute\"/>\n\n            </div>\n        );\n    }\n}\n\nexport default Manufacturers;","import React, { Component } from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\nimport classnames from 'classnames';\nimport Jurisdictions from './Jurisdictions';\nimport Submissions from './Submissions';\nimport Manufacturers from './Manufacturers';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      activeTab: '2'\n    };\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <p style={{ backgroundColor: 'black', color: 'green', textAlign: 'center'}}><h1><a href=\"http://njintranet5/sites/engineering/LVSystems/wiki/Wiki%20Pages/Current%20Network%20Layout.aspx\">Network Layout</a></h1></p>\n        <Nav tabs style={{backgroundColor: 'black', color: 'green', marginTop: '5px', marginBottom: '5px'}}>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '1' })}\n              onClick={() => { this.toggle('1'); }}\n            >\n              Manufacturer\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: this.state.activeTab === '2' })}\n              onClick={() => { this.toggle('2'); }}\n            >\n              Submission File Number\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n            className={classnames({ active: this.state.activeTab === '3' })}\n            onClick={() => { this.toggle('3'); }}\n            >\n            Jurisdictions\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"1\">\n            <Manufacturers />\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Submissions />\n          </TabPane>\n          <TabPane tabId=\"3\">\n            <Jurisdictions />\n          </TabPane>\n        </TabContent>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;","import React, { Component } from 'react';\n\nclass Test extends Component {\n\n    render() {\n        console.log(this.props);\n        return(\n            <div>\n                <h1>The data from parent is: {this.props.submissionId} </h1>\n            </div>\n        );\n    }\n}\n\nexport default Test;","import React, { Component } from 'react';\nimport { Cell, Sector, Pie, PieChart } from 'recharts';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nlet renderActiveShape = (props) => {\n    let RADIAN = Math.PI / 180;\n    let { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,\n        fill, payload, percent } = props;\n    let sin = Math.sin(-RADIAN * midAngle);\n    let cos = Math.cos(-RADIAN * midAngle);\n    let sx = cx + (outerRadius + 10) * cos;\n    let sy = cy + (outerRadius + 10) * sin;\n    let mx = cx + (outerRadius + 30) * cos;\n    let my = cy + (outerRadius + 30) * sin;\n    let ex = mx + (cos >= 0 ? 1 : -1) * 22;\n    let ey = my;\n    let textAnchor = cos >= 0 ? 'start' : 'end';\n  \n    return (\n      <g>\n        <text x={cx} y={cy} dy={8} textAnchor=\"middle\" fill={fill}>{payload.name}</text>\n        <Sector\n          cx={cx}\n          cy={cy}\n          innerRadius={innerRadius}\n          outerRadius={outerRadius}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          fill={fill}\n        />\n        <Sector\n          cx={cx}\n          cy={cy}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          innerRadius={outerRadius + 6}\n          outerRadius={outerRadius + 10}\n          fill={fill}\n        />\n        <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill=\"none\"/>\n        <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\"/>\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill=\"#333\">\n          {`${payload.value}`}\n        </text>\n        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill=\"#999\">\n          {`${(percent * 100).toFixed(2)}%`}\n        </text>\n      </g>\n    );\n  };\n\nclass MyPieChart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            auditModsCount: 0,\n            modsCount: 0,\n            testableModsCount: 0,\n            completeModsCount: 0,\n            jiraModsCount: 0,\n            revokedModsCount: 0,\n            activeIndex: 0\n        };\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id : \"${this.props.submissionId}\") {\n                      versions {\n                          _id\n                          version\n                          mods {\n                              _id\n                              status\n                          }\n                      }\n                  }\n                }`\n            }\n        }\n        );\n        let getMods = response.data.submission.versions.map(a => {return a.mods});\n        let ModsList = [];\n        for (let i = 0; i < getMods.length; i++) {\n            let j = 0;\n            while (j < getMods[i].length) {\n                ModsList.push(getMods[i][j]);\n                j++;\n            }\n        }\n        this.setState({\n            loadingItems: false,\n            auditModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('audit'.toLowerCase())\n            }).length,\n            testableModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('testable'.toLowerCase())\n            }).length,\n            completeModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('complete'.toLowerCase())\n            }).length,\n            jiraModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('jira'.toLowerCase())\n            }).length,\n            revokedModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('revoked'.toLowerCase())\n            }).length\n        });\n        console.log(this.state);\n        } catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    onPieEnter = (data, index) => {\n        this.setState({\n            activeIndex: index,\n        });\n    }\n\n    render() {\n        let { auditModsCount, completeModsCount, jiraModsCount, testableModsCount, revokedModsCount, activeIndex } = this.state;\n        let completeMods = completeModsCount + revokedModsCount;\n        let data = [\n            { name: 'Complete Mods', value: parseInt(`${completeMods}`) },\n            { name: 'JIRA Mods', value: parseInt(`${jiraModsCount}`) },\n            { name: 'Audit Mods', value: parseInt(`${auditModsCount}`) },\n            { name: 'Testable Mods', value: parseInt(`${testableModsCount}`) },\n          ];\n        let COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        return(\n            <PieChart width={400} height={400} style={{margin: '0 auto'}}>\n                    <Pie\n                        activeIndex={activeIndex}\n                        activeShape={renderActiveShape}\n                        data={data}\n                        cx={200}\n                        cy={200}\n                        innerRadius={60}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        onMouseEnter={this.onPieEnter}\n                        nameKey=\"name\"\n                        paddingAngle={5}\n                        isAnimationActive={true}\n                        >\n                            {\n                            data.map((entry, index) => (\n                                <Cell key={`slice-${index}`} fill={COLORS[index % COLORS.length]}/>\n                            ))\n                            }\n                    </Pie>\n                </PieChart>\n        );\n    }\n}\n\nexport default MyPieChart;","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { FaRegEdit } from 'react-icons/fa';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Collapsible from 'react-collapsible';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass ModList extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 😀</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                loadingItems: true,\n                submission: '',\n                mods: [],\n                application: [],\n                html: '',\n                editorState,\n                auditModsCount: 0,\n                modsCount: 0,\n                testableModsCount: 0,\n                completeModsCount: 0,\n                jiraModsCount: 0,\n                revokedModsCount: 0\n            }\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id : \"${this.props.submissionId}\") {\n                        file\n                        received\n                        processed\n                        begin\n                        jurisdictions {\n                        _id\n                        jurisdiction\n                      }\n                      mods {\n                        _id\n                        modnumber\n                        title\n                        trackerid\n                        moddetails\n                        status\n                        jira\n                        testingzip {\n                            _id\n                            url\n                        }\n                    }\n                      versions {\n                          _id\n                          version\n                          mods {\n                            _id\n                            modnumber\n                            title\n                            trackerid\n                            moddetails\n                            status\n                            jira\n                            testingzip {\n                                _id\n                                url\n                            }\n                        }\n                      }\n                      application {\n                          _id\n                          name\n                      }\n                  }\n                }`\n            }\n        }\n        );\n        let getMods = response.data.submission.versions.map(a => {return a.mods.sort((a, b) => (a.modnumber - b.modnumber))});\n        let ModsList = [];\n        for (let i = 0; i < getMods.length; i++){\n            let j = 0;\n            while (j < getMods[i].length) {\n                ModsList.push(getMods[i][j])\n                j++\n            }\n        }\n        console.log(ModsList);\n        this.setState({\n            submission: response.data.submission.file,\n            loadingItems: false,\n            mods: ModsList,\n            application: response.data.submission.application,\n            modsCount: ModsList.length,\n            auditModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('audit'.toLowerCase())\n            }).length,\n            testableModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('testable'.toLowerCase())\n            }).length,\n            completeModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('complete'.toLowerCase())\n            }).length,\n            jiraModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('jira'.toLowerCase())\n            }).length,\n            revokedModsCount: ModsList.filter(prop => {\n                return prop.status.toLowerCase().includes('revoked'.toLowerCase())\n            }).length\n        });\n        console.log(this.state);\n        } catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n    \n    renderMods() {\n        let { mods } = this.state;\n        mods = mods.sort((a, b) => (a.modnumber - b.modnumber));\n        return (\n        mods.map((x, index) => {\n        return (\n            <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                <h5><Link to={`/updatemod/${x._id}`}><FaRegEdit /></Link></h5>\n                <h5>Mod {index + 1}</h5>\n                <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                <h5>{x.trackerid}</h5>\n                <h5>Testing Status: {x.status}</h5>\n                {x.jira != null &&\n                    <h5>\n                        <a href={x.jira} style={{backgroundColor: 'black', color: 'orange'}}>Jira</a>\n                    </h5>\n                }\n                {x.testingzip != null &&\n                    <h5>\n                        <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                    </h5>\n                }\n                <Collapsible \n                transitionTime=\"250\"\n                trigger={this.renderDropDown4()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    <Editor \n                    editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                    readOnly='true'\n                    toolbarHidden='true'\n                    />\n                </Collapsible>\n            </div>\n            );}\n        ))\n    }\n\n    renderAuditMods = () => {\n        let { mods } = this.state;\n        let auditMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('audit'.toLowerCase())\n        })\n\n        return (\n            <div>\n                {auditMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderTestableMods = () => {\n        let { mods } = this.state;\n        let testableMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('testable'.toLowerCase())\n        })\n        return (\n            <div>\n                {testableMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderJiraMods = () => {\n        let { mods } = this.state;\n        let jiraMods = mods.filter(prop => {\n            return prop.status.toLowerCase().includes('jira'.toLowerCase())\n        })\n        return (\n            <div>\n                {jiraMods.map(x => {\n                return (\n                    <div className=\"card\" key={x._id} style={{marginTop: '10px', backgroundColor: '#eee'}}>\n                    <h5>Mod {x.modnumber}</h5>\n                    <h5 style={{color: '#007bff'}}>{x.title}</h5>\n                    <h5>{x.trackerid}</h5>\n                    <h5>Testing Status: {x.status}</h5>\n                    {x.jira != null &&\n                        <h5>\n                            <a href={x.jira}>Jira</a>\n                        </h5>\n                    }\n                    {x.testingzip != null &&\n                        <h5>\n                            <a href={`${apiUrl}${x.testingzip.url}`} style={{backgroundColor: 'black', color: 'hsl(128, 100%, 50%)'}}>Download Testing Performed</a>\n                        </h5>\n                    }\n                    <Collapsible \n                    transitionTime=\"250\"\n                    trigger={this.renderDropDown4()}\n                    triggerWhenOpen={this.renderHide()}\n                    >\n                        <Editor \n                        editorState={EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(x.moddetails.replace(/'''/g, '\"')).contentBlocks))}\n                        readOnly='true'\n                        toolbarHidden='true'\n                        />\n                    </Collapsible>\n                </div>\n                )\n                })}\n            </div>\n        )\n    }\n\n    renderDropDown3() {\n        let { modsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Mods:  ({modsCount})\n            </span>\n        );\n    }\n\n    renderDropDown4() {\n        return (\n            <span className=\"trigger\">\n                Details:\n            </span>\n        );\n    }\n\n    renderDropDown5() {\n        let { auditModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Audited Mods: ({auditModsCount})\n            </span>\n        );\n    }\n\n    renderDropDown6() {\n        let { testableModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Testable Mods: ({testableModsCount})\n            </span>\n        );\n    }\n\n    renderDropDown7() {\n        let { jiraModsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Mods in JIRA:  ({jiraModsCount})\n            </span>\n        );\n    }\n\n    renderHide() {\n        return (\n            <span className=\"trigger\">\n                Hide\n            </span>\n        );\n    }\n\n    render() {\n        let { loadingItems } = this.state;\n        return(\n            <div>\n                {loadingItems === false && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown3()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderMods()}\n                </Collapsible>}\n                {loadingItems === false && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown5()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderAuditMods()}\n                </Collapsible>}\n                {loadingItems === false && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown6()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderTestableMods()}\n                </Collapsible>}\n                {loadingItems === false && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown7()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderJiraMods()}\n                </Collapsible>}\n                <p style={{marginTop: '25px'}}></p>\n                <div className=\"fixed-action-btn\">\n                <Link style={{backgroundColor: '#333'}} className=\"btn-floating btn-large\" to={`/newmod/${this.props.submissionId}`}>\n                    <i className=\"material-icons\" style={{color: 'rgb(0, 123, 255)'}}>add</i>\n                </Link>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ModList;","import React, { Component } from 'react';\nimport Test from './propstest';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport MyPieChart from './PieChart';\nimport { FaRegEdit } from 'react-icons/fa';\nimport { pdfjs, Document, Page, View } from 'react-pdf';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport Collapsible from 'react-collapsible';\nimport ModsList from './ModsList';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Submission extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 😀</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                loadingItems: true,\n                submission: '',\n                jurisdictions: [],\n                vendor: '',\n                vendorId: '',\n                numPages: null,\n                pageNumber: 1,\n                urns: [],\n                mods: [],\n                application: [],\n                versions: [],\n                html: '',\n                editorState,\n                uploadedImages: [],\n                auditModsCount: 0,\n                modsCount: 0,\n                testableModsCount: 0,\n                completeModsCount: 0,\n                jiraModsCount: 0,\n                revokedModsCount: 0,\n                activeIndex: 0\n            }\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id : \"${this.props.match.params.submissionId}\") {\n                        file\n                        received\n                        processed\n                        begin\n                        vendor {\n                        _id\n                        name\n                        logo {\n                          _id\n                          url\n                        }\n                      }\n                        jurisdictions {\n                        _id\n                        jurisdiction\n                      }\n                      urns {\n                          _id\n                          url\n                      }\n                      mods {\n                          _id\n                          modnumber\n                          title\n                          trackerid\n                          moddetails\n                          status\n                          jira\n                          teststeps\n                          testingzip {\n                              _id\n                              url\n                          }\n                      }\n                      application {\n                          _id\n                          name\n                      }\n                      versions {\n                          _id\n                          version\n                      }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            submission: response.data.submission.file,\n            vendor: response.data.submission.vendor.name,\n            jurisdictions: response.data.submission.jurisdictions,\n            loadingItems: false,\n            vendorId: response.data.submission.vendor._id,\n            urns: response.data.submission.urns,\n            application: response.data.submission.application,\n            versions: response.data.submission.versions,\n        });\n        console.log(this.state);\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    renderDropDown1() {\n        return (\n            <span className=\"trigger\">\n                Jurisdictions:\n            </span>\n        );\n    }\n\n    renderDropDown2() {\n        return (\n            <span className=\"trigger\">\n                URNs:\n            </span>\n        );\n    }\n\n    renderDropDown3() {\n        let { modsCount } = this.state;\n        return (\n            <span className=\"trigger\">\n                Mods:  ({modsCount})\n            </span>\n        );\n    }\n\n    renderHide() {\n        return (\n            <span className=\"trigger\">\n                Hide\n            </span>\n        );\n    }\n\n\n    onDocumentLoadSuccess = ({ numPages }) => {\n        this.setState({ numPages });\n      }\n\n      changePage = offset => this.setState(prevState => ({\n        pageNumber: prevState.pageNumber + offset,\n      }));\n    \n      previousPage = () => this.changePage(-1);\n    \n      nextPage = () => this.changePage(1);\n\n      tableOfContents = () => this.setState({ pageNumber: 4});\n\n      onItemClick = ({ pageNumber }) => this.setState({ pageNumber: pageNumber });\n\n      //removes the offset of text from the rendered PDF file\n      removeTextLayerOffset = () => {\n        const textLayers = document.querySelectorAll(\".react-pdf__Page__textContent\");\n          textLayers.forEach(layer => {\n            const { style } = layer;\n            style.top = \"0\";\n            style.left = \"0\";\n            style.transform = \"\";\n        });\n      }\n\n      renderURNs = () => {\n          let { urns, pageNumber, numPages } = this.state;\n          return (\n            <div>\n                {urns.map(a => {\n                    return (\n                        <div>\n                            <p>Page {pageNumber || (numPages ? 1 : '--')} of {numPages || '--'}</p>\n                            <button\n                            type=\"button\"\n                            disabled={pageNumber <= 1}\n                            onClick={this.previousPage}\n                            >\n                                Back\n                            </button>\n                            <button\n                            type=\"button\"\n                            disabled={pageNumber >= numPages}\n                            onClick={this.nextPage}\n                            >\n                                Next\n                            </button>\n                            <button\n                            type=\"button\"\n                            onClick={this.tableOfContents}\n                            >\n                                Table of Contents\n                            </button>\n                            <Document\n                            file={`${apiUrl}${a.url}`}\n                            className='canvas'\n                            onLoadSuccess={this.onDocumentLoadSuccess}\n                            onItemClick={this.onItemClick}\n                            >\n                                <Page pageNumber={pageNumber} onLoadSuccess={this.removeTextLayerOffset}/>\n                            </Document>                        \n                        </div>\n                    )\n                })}\n            </div>\n          );\n      }\n    \n    render() {\n        let { urns, submission, vendor, jurisdictions, loadingItems, vendorId, application, versions } = this.state;\n        return(\n            <div style={{textAlign: 'center'}}>\n                <h1 style={{textAlign: 'center'}}>{submission}</h1>\n                <Link to={`/manufacturer/${vendorId}`}><h3 style={{textAlign: 'center'}}>{vendor}</h3></Link><br />\n                <Link to={`/modrewrites/${this.props.match.params.submissionId}`}><h3 style={{textAlign: 'center'}}>Mod Rewrites</h3></Link><br />\n                <h1 style={{textAlign: 'center'}}><Link to={`/application/${application._id}`}>{application.name} </Link></h1>\n                <h3 style={{textAlign: 'center'}}>Versions:</h3>\n                {versions.map(y => {\n                    return (\n                        <span>| {y.version} |{'\\u00A0'} </span>\n                    )\n                })}\n                {loadingItems === false && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown1()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                {jurisdictions.map(jurs => {\n                    return(\n                        <div>\n                           <Link to={`/jurisdiction/${jurs._id}`}>{jurs.jurisdiction}</Link>\n                        </div>\n                    );\n                })}\n                </Collapsible>}\n                {urns.length > 0 && \n                <Collapsible \n                transitionTime=\"250\" \n                trigger={this.renderDropDown2()}\n                triggerWhenOpen={this.renderHide()}\n                >\n                    {this.renderURNs()}\n                </Collapsible>}\n                {loadingItems === false && <MyPieChart submissionId={this.props.match.params.submissionId}/>}\n                {loadingItems === false && <ModsList submissionId={this.props.match.params.submissionId}/>}\n                {loadingItems && <Loader />}\n            </div>\n        );\n    }\n}\n\nexport default Submission;","import React, { Component } from 'react';\nimport { Box, Text, Heading, Image, Avatar } from 'gestalt';\nimport { NavLink } from 'react-router-dom';\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"around\"\n            height={70}\n            color=\"midnight\"\n            padding={1}\n            shape=\"roundedBottom\"\n        >       \n                \n                <NavLink to=\"/\" activeClassName=\"active\">\n                    <Text size=\"xl\" color=\"white\">Submissions</Text>\n                </NavLink>\n                <a style ={{color: 'White', fontSize: '21px'}} href=\"http://njintranet5/sites/qms/GLI%20Document%20Library/Forms/cpcojur.aspx\">Paper Checkoffs</a>\n                <NavLink exact to=\"/\" activeClassName=\"active\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Box margin={2} height={50} width={50} shape=\"roundedBottom\">\n                    <Avatar\n                     alt=\"PeptideLogo\"\n                     naturalHeight={1}\n                     naturalWidth={1}\n                     src=\"../../icons/glilogo.png\"\n                    />\n                    </Box>\n                    <Heading size=\"xs\" color=\"orange\">\n                        GLI Internal Wiki\n                    </Heading>\n                </Box>                    \n                </NavLink>\n\n                    <a style ={{color: 'White', fontSize: '21px'}} href=\"http://njintranet5/sites/qms/GLI%20Document%20Library/Forms/AllItems.aspx?RootFolder=%2Fsites%2Fqms%2FGLI%20Document%20Library%2FCompliance%2FNV%20Test%20Scripts&FolderCTID=0x01200040B21164CAE9884D89C3863D8C3F3795&View=%7B954970DD%2DF263%2D4040%2D9706%2D0C6F98F7B90F%7D\">\n                        Test Cases\n                    </a>\n                    <a style ={{color: 'White', fontSize: '21px'}} href=\"https://tracker.gaminglabs.com:8443/browse/IGT-23715?filter=-4\">\n                    JIRA\n                    </a>\n                \n\n            </Box>\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from \"strapi-sdk-javascript/build/main\";\nimport {Box, SearchField, Icon} from 'gestalt';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Apps extends Component {\n    state = {\n        applications: [],\n        searchTerm: '',\n        loadingItems: true\n    }\n\n    async componentDidMount() {\n        try {\n            const response = await strapi.request('POST', '/graphql', {\n                data: {\n                    query: `query {\n                        applications {\n                          _id\n                          name\n                          vendors {\n                            _id\n                            name\n                          }\n                          properties {\n                              _id\n                              name\n                          }\n                        }\n                      }`\n                }\n            });\n            console.log(response);\n            this.setState({ \n                applications: response.data.applications,\n                loadingItems: false\n            });\n        } catch(err) {\n            console.error(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    handleChange = ({ value }) => {\n        this.setState({ searchTerm: value});\n    };\n\n    filteredItems = ({ searchTerm, applications }) => {\n        return applications.filter(app => {\n            return app.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            app.vendors.name.toLowerCase().includes(searchTerm.toLowerCase()); /*||\n            app.properties.name.toLowerCase().includes(searchTerm.toLowerCase());*/\n        });\n    };\n\n    render() {\n        let { loadingItems, searchTerm } = this.state;\n        return(\n        <Box>\n                <Box display=\"flex\" justifyContent=\"center\" marginTop={4}>\n                <SearchField \n                id=\"searchField\" \n                accessibilityLabel=\"Items search field\" \n                onChange={this.handleChange} \n                placeholder=\"Search Application Name\" \n                value={searchTerm}\n                />\n                <Box\n                margin={2}\n                >\n                    <Icon \n                    icon=\"filter\"\n                    color={searchTerm ? 'orange' : 'gray'}\n                    size={20}\n                    accessibilityLabel=\"Filter\"\n                    />\n                </Box>\n                </Box>\n            {this.filteredItems(this.state).map(app => {\n                return(\n                    <Box marginTop={5} marginBotom={5}>\n                        <Link to={`/apps/${app._id}`}>{app.name}</Link> <br />\n                        <Link to={`/vendors/${app.vendors._id}`}>{app.vendors.name}</Link> <br />\n                        {app.properties.map(prop => {\n                            return(\n                                <div>\n                                    <Link to={`/apps/${prop._id}`}>{prop.name}</Link>\n                                </div>\n                            );\n                        })}\n                    </Box>\n                )\n            })}\n            {loadingItems && <Loader />}\n        </Box>\n        );\n    }\n}\n\nexport default Apps;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Jurisdiction extends Component {\n    state = {\n        loadingItems: true,\n        jurisdiction: '',\n        submissions: [],\n        approvalstatuses: []\n    }\n\n    async componentDidMount() {\n        try {\n            //console.log(this.props.match.params.itemId);\n            const response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    jurisdiction (id : \"${this.props.match.params.jurisdictionId}\") {\n                        jurisdiction\n                        approvalstatuses {\n                            _id\n                            status\n                            submissions {\n                            _id\n                            file\n                            application {\n                                _id\n                                name\n                            }\n                            versions {\n                                _id\n                                version\n                            }\n                        }\n                    }\n                        \n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            jurisdiction: response.data.jurisdiction.jurisdiction,\n            approvalstatuses: response.data.jurisdiction.approvalstatuses,\n            loadingItems: false\n        });\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    render() {\n        let { jurisdiction, approvalstatuses, loadingItems } = this.state;\n        console.log(approvalstatuses);\n        return(\n            <div style={{textAlign: 'center'}}>\n                <h1>Jurisdiction</h1> <br />\n                <h4>{jurisdiction}</h4> <br />\n                <h3>Submissions for {jurisdiction}</h3>\n                {approvalstatuses.map(app => {\n                    return(\n                        <div>\n                            {app.status} <br />\n                            {app.submissions.map(sub => {\n                                return (\n                                <p>\n                                <Link to={`/submission/${sub._id}`}>{sub.file}</Link><br />\n                                {sub.application.name} {sub.versions.map(a => {\n                                    return (\n                                        <span>{a.version}</span>\n                                    )\n                                })}\n                            \n                            </p>)\n                        })}</div>\n                    );\n                })}\n                {loadingItems && <Loader />}\n            </div>\n        );\n    }\n}\n\nexport default Jurisdiction;","import React, { Component } from 'react';\nimport Collapsible from 'react-collapsible';\nimport { Box,\n    Heading,\n    Text,\n    Image,\n    Mask,\n    Card,\n    Button,\n    Container, \n    IconButton} from 'gestalt';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nimport { Alert } from 'reactstrap';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Vendors extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 😀</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                application: [],\n                submissions: [],\n                loadingItems: true,\n                editorState,\n                uploadedImages: [],\n                html,\n                errorMessage: false,\n                successMessage: false\n            }\n            this._uploadImageCallBack = this._uploadImageCallBack.bind(this);\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    application (id: \"${this.props.match.params.applicationId}\") {\n                    _id\n                    name\n                    howto\n                    submissions {\n                        _id\n                        file\n                        versions {\n                            _id\n                            version\n                            jurisdictions {\n                                _id\n                                status\n                                jurisdictions {\n                                    _id\n                                    jurisdiction\n                                }\n                            }\n                        }\n                    }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            application: response.data.application,\n            submissions: response.data.application.submissions,\n            loadingItems: false\n        });\n        let x = this.state.application.howto.replace(/'''/g, '\"');\n        let contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.setState({\n                editorState,\n                html: x.replace(/----/g, '\\\\')\n            });\n        }\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    saveChanges = async () => {\n        try {\n            let { html, application } = this.state;\n            html = html.replace(/\"/g, '\\'\\'\\'');\n            html = html.replace(/\\\\/g, '----')\n            console.log(html);\n            await strapi.request('POST', 'graphql', {\n                data: {\n                    query: `mutation {\n                        updateApplication(input: {\n                          where: {\n                            id: \"${application._id}\"\n                          },\n                          data: {\n                            howto: \"${html}\"\n                          }\n                        }) {\n                          application {\n                            howto\n                          }\n                        }\n                      }`\n                }\n            });\n            this.setState({\n                successMessage: true\n            })\n            setTimeout(() => {this.setState({ successMessage: false })}, 3000);\n            }catch (err) {\n                console.log(err);\n                this.setState({\n                    errorMessage: true\n                });\n                setTimeout(() => {this.setState({ errorMessage: false })}, 3000);\n            }\n        }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    renderDropDown1() {\n        return (\n            <span className=\"trigger\">\n                Jurisdictions:\n            </span>\n        );\n    }\n\n    renderDropDown2() {\n        return (\n            <span className=\"trigger\">\n                Mods:\n            </span>\n        );\n    }\n\n    renderHide() {\n        return (\n            <span className=\"trigger\">\n                Hide\n            </span>\n        );\n    }\n\n    _uploadImageCallBack = (file) => {\n        // long story short, every time we upload an image, we\n        // need to save it to the state so we can get it's data\n        // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        let { uploadedImages } = this.state;\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n          dburl: `${apiUrl}/uploads/${file.name}`\n        }\n\n        uploadedImages.push(imageObject);\n    \n        this.setState({uploadedImages: uploadedImages})\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n\n    render() {\n        let { loadingItems, application, submissions, editorState, successMessage, errorMessage } = this.state;\n        console.log(this.state);\n        return(\n            <Container>\n            <Box\n            marginTop={5}\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"start\"\n            dangerouslySetInlineStyle={{\n                __style: {\n                    flexWrap: \"wrap-reverse\"\n                }\n            }}\n            >\n            <Box display=\"flex\" direction=\"column\" alignItems=\"center\">\n                <Box marginBottom={5}>\n                    <Heading color=\"blue\">{application.name}</Heading>\n                    <h3><strong>Submissions:</strong></h3>\n                {/*submissions.map(a => {\n                    return (\n                        <p>\n                            <Link to={`/submission/${a._id}`}>{a.file}</Link> <br />\n                            {application.name}\n                            {a.versions.map(b => {\n                                return (\n                                    <span> {b.version}</span>\n                                )\n                            })}<br />\n                            <Collapsible \n                            transitionTime=\"250\" \n                            trigger={this.renderDropDown1()}\n                            triggerWhenOpen={this.renderHide()}\n                            >\n                                {a.versions.map(v => {\n                                    v.approvalstatuses.map(d => {\n                                        return(\n                                            <p>{c.jurisdiction} -- Status: {d.approvalstatuses.map(d => {\n                                                return(\n                                                    <span>\n                                                {d.status}</span>\n                                                )})}   </p>\n                                        )\n                                    })\n                                    return(<p>\n                                    {v.jurisdictions.map(c => {\n                                        return (\n                                            <span>{c.jurisdiction}</span>\n                                            )\n                                        })}\n                                        )\n                                    })\n                                }\n                            </Collapsible>\n                        </p>\n                    )\n                })*/}\n                <Editor \n                    editorState={editorState}\n                    onEditorStateChange={this.onEditorStateChange}\n                    toolbar={{\n                        image: { uploadCallback: this._uploadImageCallBack },\n                        inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                        }}\n                    />\n                <button style={{backgroundColor: 'black',color: 'green', borderRadius: '20px'}} onClick={this.saveChanges}>Save</button> <br />\n                {successMessage && \n                <Alert color='success'>Successfully Saved!</Alert>\n                }\n                {errorMessage &&\n                <Alert color='danger' style={{padding: '20px'}}>There was an issue saving to database</Alert>\n                }\n                </Box>\n            </Box>\n            </Box>\n            {loadingItems && <Loader />}\n            </Container>\n        );\n    }\n}\n\nexport default Vendors;","import React, { Component } from 'react';\nimport { Box,\n    Heading,\n    Text,\n    Image,\n    Mask,\n    Card,\n    Button,\n    Container, \n    IconButton} from 'gestalt';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://nv-dt-534:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Vendors extends Component {\n    state = {\n        applications: [],\n        vendor: '',\n        loadingItems: true,\n        searchTerm: ''\n    }\n\n    async componentDidMount() {\n        try {\n            //console.log(this.props.match.params.itemId);\n            const response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    vendor (id: \"${this.props.match.params.vendorId}\") {\n                    _id\n                    name\n                    applications {\n                        _id\n                        name\n                    }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            applications: response.data.vendor.applications,\n            vendor: response.data.vendor.name,\n            loadingItems: false\n        });\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n    render() {\n        let { vendor, applications } = this.state;\n        return(\n            <Container>\n            <Box\n            marginTop={5}\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"start\"\n            dangerouslySetInlineStyle={{\n                __style: {\n                    flexWrap: \"wrap-reverse\"\n                }\n            }}\n            >\n            <Box display=\"flex\" direction=\"column\" alignItems=\"center\">\n                <Box marginBottom={5}>\n                    <Heading color=\"blue\">{vendor}</Heading>\n                <Text>\n                    {applications.map(app => {\n                        return(\n                            <Box>\n                                <Link to={`/application/${app._id}`}>{app.name}</Link>\n                            </Box>\n                        );\n                    })}\n                </Text>\n                </Box>\n            </Box>\n            </Box>\n            </Container>\n        );\n    }\n}\n\nexport default Vendors;","import React, { Component } from 'react';\nimport { Box,\n    Heading,\n    Text,\n    Image,\n    Mask,\n    Card,\n    Button,\n    Container, \n    IconButton} from 'gestalt';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://192.168.0.178:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass Appwiki extends Component {\n    state = {\n        application: [],\n        submissions: [],\n        loadingItems: true\n    }\n\n    async componentDidMount() {\n        try {\n            //console.log(this.props.match.params.itemId);\n            const response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    application (id: \"${this.props.match.params.applicationId}\") {\n                    _id\n                    name\n                    submissions {\n                        _id\n                        file\n                        versions {\n                            _id\n                            version\n                        }\n                        jurisdictions {\n                            _id\n                            jurisdiction\n                            approvalstatuses {\n                                _id\n                                status\n                            }\n                        }\n                    }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            application: response.data.application,\n            submissions: response.data.application.submissions,\n            loadingItems: false\n        });\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    render() {\n        let { loadingItems, application, submissions } = this.state;\n        console.log(this.state);\n        return(\n            <Container>\n            <Box\n            marginTop={5}\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"start\"\n            dangerouslySetInlineStyle={{\n                __style: {\n                    flexWrap: \"wrap-reverse\"\n                }\n            }}\n            >\n            <Box display=\"flex\" direction=\"column\" alignItems=\"center\">\n                <Box marginBottom={5}>\n                    <Heading color=\"blue\">{application.name}</Heading>\n                    <p>this is working</p>\n                {submissions.map(a => {\n                    return (\n                        <p>\n                            {a.file} <br />\n                            {a.versions.map(b => {\n                                return (\n                                    <span>{b.version}</span>\n                                )\n                            })}<br />\n                            {a.jurisdictions.map(c => {\n                                return (\n                                    <p>{c.jurisdiction} -- Status: {c.approvalstatuses.map(d => {\n                                        return (\n                                            <span>{d.status}</span>\n                                        )\n                                    })}   </p>\n                                )\n                            })}\n                        </p>\n                    )\n                })}\n                <p><h1>This is working</h1></p>\n                </Box>\n            </Box>\n            </Box>\n            {loadingItems && <Loader />}\n            </Container>\n        );\n    }\n}\n\nexport default Appwiki;","import React, { Component } from 'react';\nimport { Form, FormGroup, Col, Row, Label, Input, FormText, Button, Alert } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass NewMod extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 😀</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                application: [],\n                submission: [],\n                loadingItems: true,\n                editorState,\n                uploadedImages: [],\n                moddetails: '',\n                teststeps: '',\n                trackerid: '',\n                successMessage: false,\n                errorMessage: false,\n                rewrite: []\n            }\n            this._uploadImageCallBack = this._uploadImageCallBack.bind(this);\n        }\n        this.handleTrackerID = this.handleTrackerID.bind(this);\n        this.handleTitle = this.handleTitle.bind(this);\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    mod (id: \"${this.props.match.params.modId}\") {\n                        title\n                        moddetails\n                        trackerid\n                        teststeps\n                        rewrite\n                        application {\n                            _id\n                            name\n                        }\n                        status\n                        submissions {\n                            _id\n                            file\n                        }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            application: response.data.mod.application._id,\n            submission: response.data.mod.submissions[0].file,\n            trackerid: response.data.mod.trackerid,\n            moddetails: response.data.mod.moddetails,\n            teststeps: response.data.mod.teststeps,\n            title: response.data.mod.title,\n            loadingItems: false,\n            status: response.data.mod.status,\n            rewrite: response.data.mod.rewrite\n        });\n        if (this.state.moddetails === null && this.state.teststeps !== null){\n            this.setState({ moddetails: '<p>Input text here</p>'});}\n        if (this.state.teststeps === null) {\n                this.setState({ teststeps: '<p>Input Test Steps here</p>'});\n            }\n        \n        let x = this.state.moddetails.replace(/'''/g, '\"');\n        let y = this.state.teststeps.replace(/'''/g, '\"');\n        let contentBlock = htmlToDraft(x.replace(/----/g, '\\\\'));\n        let contentBlock1 = htmlToDraft(y.replace(/----/g, '\\\\'));\n        if (contentBlock && contentBlock1) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let contentState1 = ContentState.createFromBlockArray(contentBlock1.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            let editorState1 = EditorState.createWithContent(contentState1);\n            this.setState({\n                editorState,\n                editorState1\n            });\n        }\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    saveChanges =  async () => {\n        try {\n            let { rewrite, application, submission, moddetails, teststeps, trackerid, title, status, errorMessage, successMessage } = this.state;\n            moddetails = moddetails.replace(/\"/g, '\\'\\'\\'');\n            moddetails = moddetails.replace(/\\\\/g, '----');\n            teststeps = teststeps.replace(/\"/g, '\\'\\'\\'');\n            teststeps = teststeps.replace(/\\\\/g, '----');\n            await strapi.request('POST', 'graphql', {\n                data: {\n                    query: `mutation {\n                        updateMods(input: {\n                          where: {\n                            id: \"${this.props.match.params.modId}\"\n                          },\n                          data: {\n                            moddetails: \"${moddetails}\"\n                            teststeps: \"${teststeps}\"\n                            trackerid: \"${trackerid}\"\n                            title: \"${title}\"\n                            status: ${status}\n                            rewrite: \"${rewrite}\"\n                          }\n                        }) {\n                          mod {\n                            moddetails\n                            teststeps\n                            trackerid\n                            title\n                            status\n                          }\n                        }\n                      }`\n                }\n            });\n            this.setState({\n                successMessage: true\n            })\n            setTimeout(() => {this.setState({ successMessage: false })}, 3000);\n            this.props.history.goBack();\n            }catch (err) {\n                console.log(err);\n                this.setState({\n                    errorMessage: true\n                })\n                setTimeout(() => {this.setState({ errorMessage: false })}, 3000);\n            }\n        }\n\n    onEditorStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            html: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    _uploadImageCallBack = (file) => {\n       // long story short, every time we upload an image, we\n       // need to save it to the state so we can get it's data\n       // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        let { uploadedImages } = this.state;\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n          dburl: `${apiUrl}/uploads/${file.name}`\n        }\n\n        uploadedImages.push(imageObject);\n    \n        this.setState({uploadedImages: uploadedImages})\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n    handleTrackerID = (event) => {\n        this.setState({\n            trackerid: event.target.value\n        })\n        console.log(this.state);\n    }\n\n    handleTitle = (event) => {\n        this.setState({\n            title: event.target.value\n        })\n        console.log(this.state);\n    }\n\n    handleStatus = (event) => {\n        this.setState({\n            status: event.target.value\n        })\n    }\n\n    handleRewrite = (event) => {\n        this.setState({\n            rewrite: event.target.value\n        })\n    }\n\n\n    onModDetailsStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    onTestStepsStateChange = (editorState1) => {\n        this.setState({\n            editorState1,\n            teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n    }\n\n    render() {\n        let { rewrite, loadingItems, application, submission, editorState, editorState1, trackerid, title, status, errorMessage, successMessage } = this.state;\n        console.log(this.state);\n        return(\n            <Form style={{marginLeft: '10px', marginRight: '10px', marginTop: '20px'}}>\n                <FormGroup row>\n                    <Label for=\"file\" sm={2}>Submission File #</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name=\"file\" id=\"file\" value={submission} />\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"title\" sm={2}>Title</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name=\"title\" id=\"title\" value={title} onChange={this.handleTitle}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"trackerid\" sm={2}>Tracker ID</Label>\n                    <Col sm={10}>\n                        <Input type=\"trackerid\" name=\"trackerid\" id=\"trackerid\" value={trackerid} onChange={this.handleTrackerID}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"exampleSelect\" sm={2}>Status</Label>\n                    <Col sm={10}>\n                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\" value={status} onChange={this.handleStatus}>\n                        <option>Testable</option>\n                        <option>JIRA</option>\n                        <option>Audit</option>\n                        <option>Complete</option>\n                        <option>Revoked</option>\n                        </Input>\n                    </Col>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"moddetails\" sm={2}>Mod Details</Label>\n                        <Editor \n                            editorState={editorState}\n                            onEditorStateChange={this.onModDetailsStateChange}\n                        />  \n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"teststeps\" sm={2}>Test Steps</Label>\n                        <Editor \n                            editorState={editorState1}\n                            onEditorStateChange={this.onTestStepsStateChange}\n                            toolbar={{\n                                image: { uploadCallback: this._uploadImageCallBack },\n                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                              }}\n                        />\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"rewrite\" sm={2}>Rewrite</Label>\n                    <Col sm={10}>\n                        <Input type=\"textarea\" name=\"rewrite\" id=\"rewrite\" value={rewrite} onChange={this.handleRewrite}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup check row>\n                    <Col sm={{ size: 10, offset: 2 }}>\n                        <Button onClick={this.saveChanges}>Submit</Button>\n                    </Col>\n                </FormGroup>\n                {errorMessage &&\n                <Alert color='danger'>Error</Alert>\n                }\n                {successMessage &&\n                <Alert color='success'>Success</Alert>\n                }\n            </Form>\n        );\n    }\n}\n\nexport default NewMod;","import React, { Component } from 'react';\nimport { Form, FormGroup, Col, Row, Label, Input, FormText, Button } from 'reactstrap';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport { Editor } from 'react-draft-wysiwyg';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport htmlToDraft from 'html-to-draftjs';\nimport draftToHtml from 'draftjs-to-html';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass NewMod extends Component {\n\n    constructor(props) {\n        super(props);\n        let html = '<p>Testing 1234 😀</p>';\n        let contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n            let contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n            let editorState = EditorState.createWithContent(contentState);\n            this.state = {\n                application: [],\n                submission: [],\n                loadingItems: true,\n                editorState,\n                uploadedImages: [],\n                moddetails: '',\n                teststeps: '',\n                trackerid: ''\n            }\n            this._uploadImageCallBack = this._uploadImageCallBack.bind(this);\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id: \"${this.props.match.params.submissionId}\") {\n                    _id\n                    file\n                    application {\n                        _id\n                        name\n                    }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            submission: response.data.submission,\n            loadingItems: false\n        });\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    saveChanges =  async () => {\n        try {\n            let { html, application } = this.state;\n            html = html.replace(/\"/g, '\\'\\'\\'');\n            html = html.replace(/\\\\/g, '----')\n            console.log(html);\n            await strapi.request('POST', 'graphql', {\n                data: {\n                    query: `mutation {\n                        NewMods(input: {\n                          where: {\n                            id: \"${application._id}\"\n                          },\n                          data: {\n                            howto: \"${html}\"\n                          }\n                        }) {\n                          application {\n                            howto\n                          }\n                        }\n                      }`\n                }\n            });\n            }catch (err) {\n                console.log(err);\n            }\n        }\n\n    _uploadImageCallBack = (file) => {\n       // long story short, every time we upload an image, we\n       // need to save it to the state so we can get it's data\n       // later when we decide what to do with it.\n    \n       // Make sure you have a uploadImages: [] as your default state\n        let { uploadedImages } = this.state;\n        console.log(uploadedImages);\n        const imageObject = {\n          file: file,\n          localSrc: URL.createObjectURL(file),\n          dburl: `${apiUrl}/uploads/${file.name}`\n        }\n\n        uploadedImages.push(imageObject);\n    \n        this.setState({uploadedImages: uploadedImages})\n    \n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n          (resolve, reject) => {\n            resolve({ data: { link: imageObject.localSrc } });\n          }\n        );\n    }\n\n    handleTrackerID = (event) => {\n        this.setState({\n            trackerid: event.target.value\n        });\n    }\n\n\n    onModDetailsStateChange = (editorState) => {\n        this.setState({\n            editorState,\n            moddetails: draftToHtml(convertToRaw(editorState.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n        console.log(this.state);\n    }\n\n    onTestStepsStateChange = (editorState1) => {\n        this.setState({\n            editorState1,\n            teststeps: draftToHtml(convertToRaw(editorState1.getCurrentContent())).replace(/[\\n]/g, '')\n        });\n        console.log(this.state);\n    }\n\n    render() {\n        let { loadingItems, application, submission, editorState, trackerid, editorState1 } = this.state;\n        return(\n            <Form style={{marginLeft: '10px', marginRight: '10px', marginTop: '20px'}}>\n                <FormGroup row>\n                    <Label for=\"file\" sm={2}>Submission File #</Label>\n                    <Col sm={10}>\n                        <Input type=\"text\" name=\"file\" id=\"file\" value={submission.file}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"trackerid\" sm={2}>Tracker ID</Label>\n                    <Col sm={10}>\n                        <Input type=\"trackerid\" name=\"trackerid\" id=\"trackerid\" value={trackerid} onChange={this.handleTrackerID}/>\n                    </Col>\n                </FormGroup>\n                <FormGroup row>\n                    <Label for=\"exampleSelect\" sm={2}>Status</Label>\n                    <Col sm={10}>\n                        <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n                        <option>Testable</option>\n                        <option>JIRA</option>\n                        <option>Audit</option>\n                        <option>Complete</option>\n                        <option>Revoked</option>\n                        </Input>\n                    </Col>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"moddetails\" sm={2}>Mod Details</Label>\n                        <Editor \n                            editorState={editorState}\n                            onEditorStateChange={this.onModDetailsStateChange}\n                        />  \n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"teststeps\" sm={2}>Test Steps</Label>\n                        <Editor \n                            editorState={editorState1}\n                            onEditorStateChange={this.onTestStepsStateChange}\n                            toolbar={{\n                                image: { uploadCallback: this._uploadImageCallBack },\n                                inputAccept: 'image/gif,image/jpeg,image/jpg,image/png,image/svg,application/pdf,text/plain,application/vnd.openxmlformatsofficedocument.wordprocessingml.document,application/msword,application/vnd.ms-excel'\n                              }}\n                        />\n                </FormGroup>\n                <FormGroup check row>\n                    <Col sm={{ size: 10, offset: 2 }}>\n                        <Button>Submit</Button>\n                    </Col>\n                </FormGroup>\n            </Form>\n        );\n    }\n}\n\nexport default NewMod;","import React, { Component } from 'react';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport Loader from './Loader';\nconst apiUrl = process.env.API_URL || 'http://localhost:1337';\nconst strapi = new Strapi(apiUrl);\n\nclass ModRewrites extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            versions: []\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            console.log(this.props.match.params.submissionId);\n            let response = await strapi.request('POST', '/graphql', {\n            data: {\n                query: `query {\n                    submission (id: \"${this.props.match.params.submissionId}\") {\n                        versions {\n                            _id\n                            version\n                            mods {\n                                _id\n                                rewrite\n                            }\n                        }\n                  }\n                }`\n            }\n        }\n        );\n        this.setState({\n            versions: response.data.submission.versions\n        });\n        }catch (err) {\n            console.log(err);\n            this.setState({ loadingItems: false });\n        }\n    }\n\n    render() {\n        let { versions } = this.state;\n        console.log(versions);\n        return(\n            <div>\n                <ol>\n                    {versions.map(a => {\n                        return(\n                            <div>\n                            <h5 style={{textAlign: 'center'}}><u>{a.version}</u></h5>\n                            {a.mods.map(b => {\n                                return(\n                                    <li>{b.rewrite} </li>\n                                )\n                            })}\n                            </div>\n                        )\n                    })}\n                </ol>\n            </div>\n        )\n    }\n\n}\n\nexport default ModRewrites;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport '../CSS/StyleSheet1.css';\n\nimport Dashboard from './Dashboard';\nimport Submission from './Submission';\nimport Applications from './Submission';\nimport Navbar from './Navbar';\nimport Apps from './Apps';\nimport Jurisdiction from './Jurisdiction';\nimport Jurisdictions from './Jurisdictions';\nimport Application from './Application';\nimport Vendors from './Vendors';\nimport Appwiki from './Appwiki';\nimport UpdateMod from './UpdateMod';\nimport NewMod from './NewMod';\nimport ModRewrites from './ModRewrites';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n        <Navbar />\n        <Switch>\n          <Route component={Dashboard} exact path=\"/\" />\n          <Route component={Submission} path=\"/submission/:submissionId\" />\n          <Route component={Applications} path=\"/apps/:appId\" />\n          <Route component={Jurisdiction} path=\"/jurisdiction/:jurisdictionId\" />\n          <Route component={Jurisdictions} path=\"/jurisdictions\" />\n          <Route component={Application} path=\"/application/:applicationId\" />\n          <Route component={Appwiki} path=\"/application/:applicationId/howto\" />\n          <Route component={Apps} path=\"/manufacturers\" />\n          <Route component={Vendors} path=\"/manufacturer/:vendorId\" />\n          <Route component={NewMod} path=\"/newmod/:submissionId\" />\n          <Route component={UpdateMod} path=\"/updatemod/:modId\" />\n          <Route component={ModRewrites} path=\"/modrewrites/:submissionId\" />\n        </Switch>\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport registerServiceWorker, { unregister } from './serviceWorker';\nimport './CSS/StyleSheet1.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\nimport \"gestalt/dist/gestalt.css\";\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\nunregister();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n    module.hot.accept();\n}\n"],"sourceRoot":""}